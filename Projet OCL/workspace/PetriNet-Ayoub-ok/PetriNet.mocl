import 'PetriNet.ecore' as petrinet

context petrinet!petrinet.PetriNetElement
def: petrinet(): petrinet!petrinet.PetriNet =
	petrinet!petrinet.PetriNet.allInstances()
		->select(pn | pn.petriNetElements->includes(self))
		->asSequence()->first()
		
context petrinet!petrinet.PetriNet
inv nameIsValid:
	self.name.matches('^[a-zA-Z_][0-9a-zA-Z_]*$')

context petrinet!petrinet.Place
inv positiveTokenNumber:
	self.nbJetons >= 0
inv nonEmptyName:
	self.name <> ''
inv uniquePlaceName:
	petrinet!petrinet.Place.allInstances()->forAll(p1, p2 | p1 <> p2 implies p1.name <> p2.name)
inv nameIsValid:
	self.name.matches('^[a-zA-Z_][0-9a-zA-Z_]*$')

context petrinet!petrinet.Arc
inv positiveWeight:
	self.weight >= 0
inv readArcValidType:
	self.type <> petrinet!petrinet.ArcKind#READ or self.direction = petrinet!petrinet.ArcDirection#P2T
inv sameNet:
	self.petrinet() = self.place.petrinet() and self.petrinet() = self.transition.petrinet()
inv nameIsValid:
	self.name.matches('(^[a-zA-Z_][0-9a-zA-Z_]*)?$')



context petrinet!petrinet.Transition
inv nonEmptyName:
	self.name <> ''
inv uniqueTransitionName:
	petrinet!petrinet.Transition.allInstances()->forAll(t1, t2 | t1 <> t2 implies t1.name <> t2.name)
inv nameIsValid:
	self.name.matches('^[a-zA-Z_][0-9a-zA-Z_]*$')
