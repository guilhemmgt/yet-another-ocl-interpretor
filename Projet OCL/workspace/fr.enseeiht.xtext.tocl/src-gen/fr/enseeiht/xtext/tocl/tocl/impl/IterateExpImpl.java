/**
 * generated by Xtext 2.32.0
 */
package fr.enseeiht.xtext.tocl.tocl.impl;

import fr.enseeiht.xtext.tocl.tocl.IterateExp;
import fr.enseeiht.xtext.tocl.tocl.Iterator;
import fr.enseeiht.xtext.tocl.tocl.LocalVariable;
import fr.enseeiht.xtext.tocl.tocl.OclExpression;
import fr.enseeiht.xtext.tocl.tocl.ToclPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Iterate Exp</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.enseeiht.xtext.tocl.tocl.impl.IterateExpImpl#getIterators <em>Iterators</em>}</li>
 *   <li>{@link fr.enseeiht.xtext.tocl.tocl.impl.IterateExpImpl#getResult <em>Result</em>}</li>
 *   <li>{@link fr.enseeiht.xtext.tocl.tocl.impl.IterateExpImpl#getBody <em>Body</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IterateExpImpl extends PropertyCallImpl implements IterateExp
{
  /**
   * The cached value of the '{@link #getIterators() <em>Iterators</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIterators()
   * @generated
   * @ordered
   */
  protected EList<Iterator> iterators;

  /**
   * The cached value of the '{@link #getResult() <em>Result</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResult()
   * @generated
   * @ordered
   */
  protected LocalVariable result;

  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected OclExpression body;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IterateExpImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ToclPackage.Literals.ITERATE_EXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Iterator> getIterators()
  {
    if (iterators == null)
    {
      iterators = new EObjectContainmentEList<Iterator>(Iterator.class, this, ToclPackage.ITERATE_EXP__ITERATORS);
    }
    return iterators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalVariable getResult()
  {
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetResult(LocalVariable newResult, NotificationChain msgs)
  {
    LocalVariable oldResult = result;
    result = newResult;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ToclPackage.ITERATE_EXP__RESULT, oldResult, newResult);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setResult(LocalVariable newResult)
  {
    if (newResult != result)
    {
      NotificationChain msgs = null;
      if (result != null)
        msgs = ((InternalEObject)result).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ToclPackage.ITERATE_EXP__RESULT, null, msgs);
      if (newResult != null)
        msgs = ((InternalEObject)newResult).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ToclPackage.ITERATE_EXP__RESULT, null, msgs);
      msgs = basicSetResult(newResult, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ToclPackage.ITERATE_EXP__RESULT, newResult, newResult));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclExpression getBody()
  {
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBody(OclExpression newBody, NotificationChain msgs)
  {
    OclExpression oldBody = body;
    body = newBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ToclPackage.ITERATE_EXP__BODY, oldBody, newBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBody(OclExpression newBody)
  {
    if (newBody != body)
    {
      NotificationChain msgs = null;
      if (body != null)
        msgs = ((InternalEObject)body).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ToclPackage.ITERATE_EXP__BODY, null, msgs);
      if (newBody != null)
        msgs = ((InternalEObject)newBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ToclPackage.ITERATE_EXP__BODY, null, msgs);
      msgs = basicSetBody(newBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ToclPackage.ITERATE_EXP__BODY, newBody, newBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ToclPackage.ITERATE_EXP__ITERATORS:
        return ((InternalEList<?>)getIterators()).basicRemove(otherEnd, msgs);
      case ToclPackage.ITERATE_EXP__RESULT:
        return basicSetResult(null, msgs);
      case ToclPackage.ITERATE_EXP__BODY:
        return basicSetBody(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ToclPackage.ITERATE_EXP__ITERATORS:
        return getIterators();
      case ToclPackage.ITERATE_EXP__RESULT:
        return getResult();
      case ToclPackage.ITERATE_EXP__BODY:
        return getBody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ToclPackage.ITERATE_EXP__ITERATORS:
        getIterators().clear();
        getIterators().addAll((Collection<? extends Iterator>)newValue);
        return;
      case ToclPackage.ITERATE_EXP__RESULT:
        setResult((LocalVariable)newValue);
        return;
      case ToclPackage.ITERATE_EXP__BODY:
        setBody((OclExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ToclPackage.ITERATE_EXP__ITERATORS:
        getIterators().clear();
        return;
      case ToclPackage.ITERATE_EXP__RESULT:
        setResult((LocalVariable)null);
        return;
      case ToclPackage.ITERATE_EXP__BODY:
        setBody((OclExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ToclPackage.ITERATE_EXP__ITERATORS:
        return iterators != null && !iterators.isEmpty();
      case ToclPackage.ITERATE_EXP__RESULT:
        return result != null;
      case ToclPackage.ITERATE_EXP__BODY:
        return body != null;
    }
    return super.eIsSet(featureID);
  }

} //IterateExpImpl
