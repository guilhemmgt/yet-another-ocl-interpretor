/**
 * generated by Xtext 2.32.0
 */
package fr.enseeiht.xtext.tocl.tocl.util;

import fr.enseeiht.xtext.tocl.tocl.AddOpCallExp;
import fr.enseeiht.xtext.tocl.tocl.Attribute;
import fr.enseeiht.xtext.tocl.tocl.Auxiliary;
import fr.enseeiht.xtext.tocl.tocl.BagExp;
import fr.enseeiht.xtext.tocl.tocl.BagType;
import fr.enseeiht.xtext.tocl.tocl.BoolOpCallExp;
import fr.enseeiht.xtext.tocl.tocl.BooleanExp;
import fr.enseeiht.xtext.tocl.tocl.BooleanType;
import fr.enseeiht.xtext.tocl.tocl.BraceExp;
import fr.enseeiht.xtext.tocl.tocl.CollectionOperationCall;
import fr.enseeiht.xtext.tocl.tocl.CollectionType;
import fr.enseeiht.xtext.tocl.tocl.EnumLiteralExp;
import fr.enseeiht.xtext.tocl.tocl.EqOpCallExp;
import fr.enseeiht.xtext.tocl.tocl.IfExp;
import fr.enseeiht.xtext.tocl.tocl.Import;
import fr.enseeiht.xtext.tocl.tocl.IntOpCallExp;
import fr.enseeiht.xtext.tocl.tocl.IntegerExp;
import fr.enseeiht.xtext.tocl.tocl.IntegerType;
import fr.enseeiht.xtext.tocl.tocl.IterateExp;
import fr.enseeiht.xtext.tocl.tocl.Iterator;
import fr.enseeiht.xtext.tocl.tocl.IteratorExp;
import fr.enseeiht.xtext.tocl.tocl.LetExp;
import fr.enseeiht.xtext.tocl.tocl.LocalVariable;
import fr.enseeiht.xtext.tocl.tocl.MapElement;
import fr.enseeiht.xtext.tocl.tocl.MapExp;
import fr.enseeiht.xtext.tocl.tocl.MapType;
import fr.enseeiht.xtext.tocl.tocl.ModuleElement;
import fr.enseeiht.xtext.tocl.tocl.MulOpCallExp;
import fr.enseeiht.xtext.tocl.tocl.NavigationOrAttributeCall;
import fr.enseeiht.xtext.tocl.tocl.NumericExp;
import fr.enseeiht.xtext.tocl.tocl.NumericType;
import fr.enseeiht.xtext.tocl.tocl.OclAnyType;
import fr.enseeiht.xtext.tocl.tocl.OclExpression;
import fr.enseeiht.xtext.tocl.tocl.OclFeatureDefinition;
import fr.enseeiht.xtext.tocl.tocl.OclInvariant;
import fr.enseeiht.xtext.tocl.tocl.OclModelElement;
import fr.enseeiht.xtext.tocl.tocl.OclModelElementExp;
import fr.enseeiht.xtext.tocl.tocl.OclModuleElement;
import fr.enseeiht.xtext.tocl.tocl.OclType;
import fr.enseeiht.xtext.tocl.tocl.OclUndefinedExp;
import fr.enseeiht.xtext.tocl.tocl.Operation;
import fr.enseeiht.xtext.tocl.tocl.OperationCall;
import fr.enseeiht.xtext.tocl.tocl.OperatorCallExp;
import fr.enseeiht.xtext.tocl.tocl.OrderedSetExp;
import fr.enseeiht.xtext.tocl.tocl.OrderedSetType;
import fr.enseeiht.xtext.tocl.tocl.Parameter;
import fr.enseeiht.xtext.tocl.tocl.Primitive;
import fr.enseeiht.xtext.tocl.tocl.PropertyCall;
import fr.enseeiht.xtext.tocl.tocl.PropertyCallExp;
import fr.enseeiht.xtext.tocl.tocl.RealExp;
import fr.enseeiht.xtext.tocl.tocl.RealType;
import fr.enseeiht.xtext.tocl.tocl.RelOpCallExp;
import fr.enseeiht.xtext.tocl.tocl.SelfExp;
import fr.enseeiht.xtext.tocl.tocl.SequenceExp;
import fr.enseeiht.xtext.tocl.tocl.SequenceType;
import fr.enseeiht.xtext.tocl.tocl.SetExp;
import fr.enseeiht.xtext.tocl.tocl.SetType;
import fr.enseeiht.xtext.tocl.tocl.StringExp;
import fr.enseeiht.xtext.tocl.tocl.StringType;
import fr.enseeiht.xtext.tocl.tocl.SuperExp;
import fr.enseeiht.xtext.tocl.tocl.ToclPackage;
import fr.enseeiht.xtext.tocl.tocl.TupleExp;
import fr.enseeiht.xtext.tocl.tocl.TuplePart;
import fr.enseeiht.xtext.tocl.tocl.TupleType;
import fr.enseeiht.xtext.tocl.tocl.TupleTypeAttribute;
import fr.enseeiht.xtext.tocl.tocl.VariableDeclaration;
import fr.enseeiht.xtext.tocl.tocl.VariableExp;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see fr.enseeiht.xtext.tocl.tocl.ToclPackage
 * @generated
 */
public class ToclSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ToclPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ToclSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ToclPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ToclPackage.MODULE:
      {
        fr.enseeiht.xtext.tocl.tocl.Module module = (fr.enseeiht.xtext.tocl.tocl.Module)theEObject;
        T result = caseModule(module);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.MODULE_ELEMENT:
      {
        ModuleElement moduleElement = (ModuleElement)theEObject;
        T result = caseModuleElement(moduleElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.OCL_MODULE_ELEMENT:
      {
        OclModuleElement oclModuleElement = (OclModuleElement)theEObject;
        T result = caseOclModuleElement(oclModuleElement);
        if (result == null) result = caseModuleElement(oclModuleElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.OCL_FEATURE_DEFINITION:
      {
        OclFeatureDefinition oclFeatureDefinition = (OclFeatureDefinition)theEObject;
        T result = caseOclFeatureDefinition(oclFeatureDefinition);
        if (result == null) result = caseOclModuleElement(oclFeatureDefinition);
        if (result == null) result = caseModuleElement(oclFeatureDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.OPERATION:
      {
        Operation operation = (Operation)theEObject;
        T result = caseOperation(operation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.PARAMETER:
      {
        Parameter parameter = (Parameter)theEObject;
        T result = caseParameter(parameter);
        if (result == null) result = caseAuxiliary(parameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.OCL_INVARIANT:
      {
        OclInvariant oclInvariant = (OclInvariant)theEObject;
        T result = caseOclInvariant(oclInvariant);
        if (result == null) result = caseOclModuleElement(oclInvariant);
        if (result == null) result = caseModuleElement(oclInvariant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.OCL_EXPRESSION:
      {
        OclExpression oclExpression = (OclExpression)theEObject;
        T result = caseOclExpression(oclExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.OCL_MODEL_ELEMENT_EXP:
      {
        OclModelElementExp oclModelElementExp = (OclModelElementExp)theEObject;
        T result = caseOclModelElementExp(oclModelElementExp);
        if (result == null) result = caseOclExpression(oclModelElementExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.OPERATOR_CALL_EXP:
      {
        OperatorCallExp operatorCallExp = (OperatorCallExp)theEObject;
        T result = caseOperatorCallExp(operatorCallExp);
        if (result == null) result = caseOclExpression(operatorCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.PROPERTY_CALL_EXP:
      {
        PropertyCallExp propertyCallExp = (PropertyCallExp)theEObject;
        T result = casePropertyCallExp(propertyCallExp);
        if (result == null) result = caseOperatorCallExp(propertyCallExp);
        if (result == null) result = caseOclExpression(propertyCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.AUXILIARY:
      {
        Auxiliary auxiliary = (Auxiliary)theEObject;
        T result = caseAuxiliary(auxiliary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.VARIABLE_EXP:
      {
        VariableExp variableExp = (VariableExp)theEObject;
        T result = caseVariableExp(variableExp);
        if (result == null) result = caseOclExpression(variableExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.VARIABLE_DECLARATION:
      {
        VariableDeclaration variableDeclaration = (VariableDeclaration)theEObject;
        T result = caseVariableDeclaration(variableDeclaration);
        if (result == null) result = caseVariableExp(variableDeclaration);
        if (result == null) result = caseOclExpression(variableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.SUPER_EXP:
      {
        SuperExp superExp = (SuperExp)theEObject;
        T result = caseSuperExp(superExp);
        if (result == null) result = caseOclExpression(superExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.SELF_EXP:
      {
        SelfExp selfExp = (SelfExp)theEObject;
        T result = caseSelfExp(selfExp);
        if (result == null) result = caseOclExpression(selfExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.STRING_EXP:
      {
        StringExp stringExp = (StringExp)theEObject;
        T result = caseStringExp(stringExp);
        if (result == null) result = caseOclExpression(stringExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.NUMERIC_EXP:
      {
        NumericExp numericExp = (NumericExp)theEObject;
        T result = caseNumericExp(numericExp);
        if (result == null) result = caseOclExpression(numericExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.REAL_EXP:
      {
        RealExp realExp = (RealExp)theEObject;
        T result = caseRealExp(realExp);
        if (result == null) result = caseNumericExp(realExp);
        if (result == null) result = caseOclExpression(realExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.INTEGER_EXP:
      {
        IntegerExp integerExp = (IntegerExp)theEObject;
        T result = caseIntegerExp(integerExp);
        if (result == null) result = caseNumericExp(integerExp);
        if (result == null) result = caseOclExpression(integerExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.BAG_EXP:
      {
        BagExp bagExp = (BagExp)theEObject;
        T result = caseBagExp(bagExp);
        if (result == null) result = caseOclExpression(bagExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.ORDERED_SET_EXP:
      {
        OrderedSetExp orderedSetExp = (OrderedSetExp)theEObject;
        T result = caseOrderedSetExp(orderedSetExp);
        if (result == null) result = caseOclExpression(orderedSetExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.SEQUENCE_EXP:
      {
        SequenceExp sequenceExp = (SequenceExp)theEObject;
        T result = caseSequenceExp(sequenceExp);
        if (result == null) result = caseOclExpression(sequenceExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.SET_EXP:
      {
        SetExp setExp = (SetExp)theEObject;
        T result = caseSetExp(setExp);
        if (result == null) result = caseOclExpression(setExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.TUPLE_EXP:
      {
        TupleExp tupleExp = (TupleExp)theEObject;
        T result = caseTupleExp(tupleExp);
        if (result == null) result = caseOclExpression(tupleExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.TUPLE_PART:
      {
        TuplePart tuplePart = (TuplePart)theEObject;
        T result = caseTuplePart(tuplePart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.MAP_EXP:
      {
        MapExp mapExp = (MapExp)theEObject;
        T result = caseMapExp(mapExp);
        if (result == null) result = caseOclExpression(mapExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.MAP_ELEMENT:
      {
        MapElement mapElement = (MapElement)theEObject;
        T result = caseMapElement(mapElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.ENUM_LITERAL_EXP:
      {
        EnumLiteralExp enumLiteralExp = (EnumLiteralExp)theEObject;
        T result = caseEnumLiteralExp(enumLiteralExp);
        if (result == null) result = caseOclExpression(enumLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.OCL_UNDEFINED_EXP:
      {
        OclUndefinedExp oclUndefinedExp = (OclUndefinedExp)theEObject;
        T result = caseOclUndefinedExp(oclUndefinedExp);
        if (result == null) result = caseOclExpression(oclUndefinedExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.LET_EXP:
      {
        LetExp letExp = (LetExp)theEObject;
        T result = caseLetExp(letExp);
        if (result == null) result = caseOclExpression(letExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.IF_EXP:
      {
        IfExp ifExp = (IfExp)theEObject;
        T result = caseIfExp(ifExp);
        if (result == null) result = caseOclExpression(ifExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.BRACE_EXP:
      {
        BraceExp braceExp = (BraceExp)theEObject;
        T result = caseBraceExp(braceExp);
        if (result == null) result = caseOclExpression(braceExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.BOOLEAN_EXP:
      {
        BooleanExp booleanExp = (BooleanExp)theEObject;
        T result = caseBooleanExp(booleanExp);
        if (result == null) result = caseOclExpression(booleanExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.PROPERTY_CALL:
      {
        PropertyCall propertyCall = (PropertyCall)theEObject;
        T result = casePropertyCall(propertyCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.OPERATION_CALL:
      {
        OperationCall operationCall = (OperationCall)theEObject;
        T result = caseOperationCall(operationCall);
        if (result == null) result = casePropertyCall(operationCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.NAVIGATION_OR_ATTRIBUTE_CALL:
      {
        NavigationOrAttributeCall navigationOrAttributeCall = (NavigationOrAttributeCall)theEObject;
        T result = caseNavigationOrAttributeCall(navigationOrAttributeCall);
        if (result == null) result = casePropertyCall(navigationOrAttributeCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.ITERATE_EXP:
      {
        IterateExp iterateExp = (IterateExp)theEObject;
        T result = caseIterateExp(iterateExp);
        if (result == null) result = casePropertyCall(iterateExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.ITERATOR:
      {
        Iterator iterator = (Iterator)theEObject;
        T result = caseIterator(iterator);
        if (result == null) result = caseAuxiliary(iterator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.ITERATOR_EXP:
      {
        IteratorExp iteratorExp = (IteratorExp)theEObject;
        T result = caseIteratorExp(iteratorExp);
        if (result == null) result = casePropertyCall(iteratorExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.COLLECTION_OPERATION_CALL:
      {
        CollectionOperationCall collectionOperationCall = (CollectionOperationCall)theEObject;
        T result = caseCollectionOperationCall(collectionOperationCall);
        if (result == null) result = casePropertyCall(collectionOperationCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.LOCAL_VARIABLE:
      {
        LocalVariable localVariable = (LocalVariable)theEObject;
        T result = caseLocalVariable(localVariable);
        if (result == null) result = caseAuxiliary(localVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.OCL_TYPE:
      {
        OclType oclType = (OclType)theEObject;
        T result = caseOclType(oclType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.COLLECTION_TYPE:
      {
        CollectionType collectionType = (CollectionType)theEObject;
        T result = caseCollectionType(collectionType);
        if (result == null) result = caseOclType(collectionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.BAG_TYPE:
      {
        BagType bagType = (BagType)theEObject;
        T result = caseBagType(bagType);
        if (result == null) result = caseCollectionType(bagType);
        if (result == null) result = caseOclType(bagType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.ORDERED_SET_TYPE:
      {
        OrderedSetType orderedSetType = (OrderedSetType)theEObject;
        T result = caseOrderedSetType(orderedSetType);
        if (result == null) result = caseCollectionType(orderedSetType);
        if (result == null) result = caseOclType(orderedSetType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.SEQUENCE_TYPE:
      {
        SequenceType sequenceType = (SequenceType)theEObject;
        T result = caseSequenceType(sequenceType);
        if (result == null) result = caseCollectionType(sequenceType);
        if (result == null) result = caseOclType(sequenceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.SET_TYPE:
      {
        SetType setType = (SetType)theEObject;
        T result = caseSetType(setType);
        if (result == null) result = caseCollectionType(setType);
        if (result == null) result = caseOclType(setType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.PRIMITIVE:
      {
        Primitive primitive = (Primitive)theEObject;
        T result = casePrimitive(primitive);
        if (result == null) result = caseOclType(primitive);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.STRING_TYPE:
      {
        StringType stringType = (StringType)theEObject;
        T result = caseStringType(stringType);
        if (result == null) result = casePrimitive(stringType);
        if (result == null) result = caseOclType(stringType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.BOOLEAN_TYPE:
      {
        BooleanType booleanType = (BooleanType)theEObject;
        T result = caseBooleanType(booleanType);
        if (result == null) result = casePrimitive(booleanType);
        if (result == null) result = caseOclType(booleanType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.NUMERIC_TYPE:
      {
        NumericType numericType = (NumericType)theEObject;
        T result = caseNumericType(numericType);
        if (result == null) result = casePrimitive(numericType);
        if (result == null) result = caseOclType(numericType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.INTEGER_TYPE:
      {
        IntegerType integerType = (IntegerType)theEObject;
        T result = caseIntegerType(integerType);
        if (result == null) result = caseNumericType(integerType);
        if (result == null) result = casePrimitive(integerType);
        if (result == null) result = caseOclType(integerType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.REAL_TYPE:
      {
        RealType realType = (RealType)theEObject;
        T result = caseRealType(realType);
        if (result == null) result = caseNumericType(realType);
        if (result == null) result = casePrimitive(realType);
        if (result == null) result = caseOclType(realType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.OCL_ANY_TYPE:
      {
        OclAnyType oclAnyType = (OclAnyType)theEObject;
        T result = caseOclAnyType(oclAnyType);
        if (result == null) result = caseOclType(oclAnyType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.TUPLE_TYPE:
      {
        TupleType tupleType = (TupleType)theEObject;
        T result = caseTupleType(tupleType);
        if (result == null) result = caseOclType(tupleType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.TUPLE_TYPE_ATTRIBUTE:
      {
        TupleTypeAttribute tupleTypeAttribute = (TupleTypeAttribute)theEObject;
        T result = caseTupleTypeAttribute(tupleTypeAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.OCL_MODEL_ELEMENT:
      {
        OclModelElement oclModelElement = (OclModelElement)theEObject;
        T result = caseOclModelElement(oclModelElement);
        if (result == null) result = caseOclType(oclModelElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.MAP_TYPE:
      {
        MapType mapType = (MapType)theEObject;
        T result = caseMapType(mapType);
        if (result == null) result = caseOclType(mapType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.BOOL_OP_CALL_EXP:
      {
        BoolOpCallExp boolOpCallExp = (BoolOpCallExp)theEObject;
        T result = caseBoolOpCallExp(boolOpCallExp);
        if (result == null) result = caseOperatorCallExp(boolOpCallExp);
        if (result == null) result = caseOclExpression(boolOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.EQ_OP_CALL_EXP:
      {
        EqOpCallExp eqOpCallExp = (EqOpCallExp)theEObject;
        T result = caseEqOpCallExp(eqOpCallExp);
        if (result == null) result = caseOperatorCallExp(eqOpCallExp);
        if (result == null) result = caseOclExpression(eqOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.REL_OP_CALL_EXP:
      {
        RelOpCallExp relOpCallExp = (RelOpCallExp)theEObject;
        T result = caseRelOpCallExp(relOpCallExp);
        if (result == null) result = caseOperatorCallExp(relOpCallExp);
        if (result == null) result = caseOclExpression(relOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.ADD_OP_CALL_EXP:
      {
        AddOpCallExp addOpCallExp = (AddOpCallExp)theEObject;
        T result = caseAddOpCallExp(addOpCallExp);
        if (result == null) result = caseOperatorCallExp(addOpCallExp);
        if (result == null) result = caseOclExpression(addOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.INT_OP_CALL_EXP:
      {
        IntOpCallExp intOpCallExp = (IntOpCallExp)theEObject;
        T result = caseIntOpCallExp(intOpCallExp);
        if (result == null) result = caseOperatorCallExp(intOpCallExp);
        if (result == null) result = caseOclExpression(intOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ToclPackage.MUL_OP_CALL_EXP:
      {
        MulOpCallExp mulOpCallExp = (MulOpCallExp)theEObject;
        T result = caseMulOpCallExp(mulOpCallExp);
        if (result == null) result = caseOperatorCallExp(mulOpCallExp);
        if (result == null) result = caseOclExpression(mulOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModule(fr.enseeiht.xtext.tocl.tocl.Module object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModuleElement(ModuleElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl Module Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl Module Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclModuleElement(OclModuleElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl Feature Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl Feature Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclFeatureDefinition(OclFeatureDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperation(Operation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameter(Parameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl Invariant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl Invariant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclInvariant(OclInvariant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclExpression(OclExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl Model Element Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl Model Element Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclModelElementExp(OclModelElementExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operator Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operator Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperatorCallExp(OperatorCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyCallExp(PropertyCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Auxiliary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Auxiliary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAuxiliary(Auxiliary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableExp(VariableExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableDeclaration(VariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Super Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Super Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSuperExp(SuperExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Self Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Self Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelfExp(SelfExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringExp(StringExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Numeric Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Numeric Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumericExp(NumericExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Real Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Real Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRealExp(RealExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integer Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integer Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntegerExp(IntegerExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bag Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bag Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBagExp(BagExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordered Set Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordered Set Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderedSetExp(OrderedSetExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceExp(SequenceExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetExp(SetExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleExp(TupleExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTuplePart(TuplePart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapExp(MapExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapElement(MapElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumLiteralExp(EnumLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl Undefined Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl Undefined Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclUndefinedExp(OclUndefinedExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetExp(LetExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfExp(IfExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Brace Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Brace Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBraceExp(BraceExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanExp(BooleanExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyCall(PropertyCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationCall(OperationCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigation Or Attribute Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigation Or Attribute Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigationOrAttributeCall(NavigationOrAttributeCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterate Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterate Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIterateExp(IterateExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIterator(Iterator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterator Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterator Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIteratorExp(IteratorExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Operation Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Operation Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionOperationCall(CollectionOperationCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Local Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Local Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocalVariable(LocalVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclType(OclType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionType(CollectionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bag Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bag Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBagType(BagType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordered Set Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordered Set Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderedSetType(OrderedSetType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceType(SequenceType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetType(SetType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitive(Primitive object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringType(StringType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanType(BooleanType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Numeric Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Numeric Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumericType(NumericType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integer Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integer Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntegerType(IntegerType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Real Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Real Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRealType(RealType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl Any Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl Any Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclAnyType(OclAnyType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleType(TupleType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Type Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Type Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleTypeAttribute(TupleTypeAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl Model Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl Model Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclModelElement(OclModelElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapType(MapType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolOpCallExp(BoolOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Eq Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Eq Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqOpCallExp(EqOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rel Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rel Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelOpCallExp(RelOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddOpCallExp(AddOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntOpCallExp(IntOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mul Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mul Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMulOpCallExp(MulOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ToclSwitch
