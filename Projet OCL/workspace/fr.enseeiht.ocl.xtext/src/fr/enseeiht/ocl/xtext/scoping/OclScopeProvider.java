/*
 * generated by Xtext 2.37.0
 */
package fr.enseeiht.ocl.xtext.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import fr.enseeiht.ocl.xtext.ocl.Attribute;
import fr.enseeiht.ocl.xtext.ocl.Auxiliary;
import fr.enseeiht.ocl.xtext.ocl.IterateExp;
import fr.enseeiht.ocl.xtext.ocl.IteratorExp;
import fr.enseeiht.ocl.xtext.ocl.LetExp;
import fr.enseeiht.ocl.xtext.ocl.Module;
import fr.enseeiht.ocl.xtext.ocl.OclFeatureDefinition;
import fr.enseeiht.ocl.xtext.ocl.OclPackage;
import fr.enseeiht.ocl.xtext.ocl.Operation;
import fr.enseeiht.ocl.xtext.ocl.VariableExp;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class OclScopeProvider extends AbstractOclScopeProvider {
	@Override
	public IScope getScope(EObject context, EReference reference) {
		if (reference == OclPackage.Literals.VARIABLE_EXP__REFERRED_VARIABLE) { 
			VariableExp variableExp = (VariableExp) context;
			
			List<Auxiliary> scopeAuxiliaries = new ArrayList<>();

	        EObject parent = variableExp.eContainer();
	        while (!(parent instanceof Module)) {
	        	List<Auxiliary> parentAuxiliaries = new ArrayList<>();

	        	// Ajoute les Iterators
	        	if (parent instanceof IteratorExp iteratorExp)
	        		parentAuxiliaries.addAll(iteratorExp.getIterators());
	        	if (parent instanceof IterateExp iterateExp)
	        		parentAuxiliaries.addAll(iterateExp.getIterators());
	        	// Ajoute les LocalVariables
	        	if (parent instanceof LetExp letExp)
	        		parentAuxiliaries.add(letExp.getVariable());
	        	if (parent instanceof IterateExp iterateExp)
	        		parentAuxiliaries.add(iterateExp.getResult());
	        	// Ajoute les Parameters
	        	if (parent instanceof Operation operation)
	        		parentAuxiliaries.addAll(operation.getParameters());
	        	if (parent instanceof OclFeatureDefinition oclFeatureDef)
	        		if (oclFeatureDef.getFeature() instanceof Attribute feature)
	        			parentAuxiliaries.add(feature);
	        	
	        	// Applique le masquage (on enregistre uniquement les auxiliaires qui n'ont pas le même nom qu'un auxiliaire déjà enregistré)
	        	for (Auxiliary parentAux : parentAuxiliaries) {
	        		boolean masked = false;
	        		for (Auxiliary scopeAux : scopeAuxiliaries) {
	        			if (scopeAux.getName().equals(scopeAux.getName())) {
	        				masked = true;
	        				break;
	        			}
	        		}
	        		if (!masked)
	        			scopeAuxiliaries.add(parentAux);
	        	}
	        	
	        	// Navigation
	        	parent = parent.eContainer();
	        }
	        
	        return Scopes.scopeFor(scopeAuxiliaries);
		}
		
		return super.getScope(context, reference);
	}
}
