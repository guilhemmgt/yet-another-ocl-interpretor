grammar fr.enseeiht.ocl.xtext.Ocl with org.eclipse.xtext.common.Terminals

generate ocl "http://www.enseeiht.fr/ocl/xtext/Ocl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Module:
	(imports+=Import)+ (contextlessFeatures+=OclFeatureDefinition)* (contextBlocks+=OclContextBlock)+
;


Import:
	'import' package=[ecore::EPackage|STRING] 'as'name=ID;

OclContextBlock:
	('context' ecoreTypes=[Import]'!'class=[ecore::EClass|QualifiedName]) (members+=(OclFeatureDefinition|OclInvariant))+
;
OclFeatureDefinition:
	'def' ':' feature = (Attribute|Operation)
;
Attribute :
	name=ID ':' type=OclTypeLiteral '=' initExpression=OclExpression
;
Operation:
	name=ID  '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ':' returnType=OclTypeLiteral '=' body=OclExpression
;
Parameter:
	name=ID ':' type=OclTypeLiteral
;
OclInvariant:
	'inv' name=ID ':' body=OclExpression
;
OclExpression returns OclExpression :
	OperatorCallExp|LetExp;

OclModelElementExp :
	model=[Import]'!'class=[ecore::EClass|QualifiedName]
;

//priority_5

OperatorCallExp:
	// args+=EqOpCallExp (({OperatorCallExp.source=current} operationNames+=BOOLOP) 	args+=EqOpCallExp )*
	args+=EqOpCallExp (operationNames+=BOOLOP args+=EqOpCallExp)*
;
BOOLOP  		: 'and'|'or'|'xor'|'implies';

EqOpCallExp:
	//args+=RelOpCallExp (({EqOpCallExp.source=current} operationNames+=EQOP) 	args+=RelOpCallExp )?
	args+=RelOpCallExp (operationNames+=EQOP args+=RelOpCallExp)?
;
EQOP  		: '='|'<>';

RelOpCallExp:
	//args+=AddOpCallExp (({RelOpCallExp.source=current} operationNames+=RELOP) 	args+=AddOpCallExp )?
	args+=AddOpCallExp (operationNames+=RELOP args+=AddOpCallExp)?
;
RELOP  		: '>'|'<'|'>='|'<=' ;

AddOpCallExp:
	//args+=IntOpCallExp (({AddOpCallExp.source=current} operationNames+=ADDOP) 	args+=IntOpCallExp )*
	args+=IntOpCallExp (operationNames+=ADDOP args+=IntOpCallExp)*
;
ADDOP : '-'|'+';

IntOpCallExp :
	//args+=MulOpCallExp (({IntOpCallExp.source=current} operationNames+=INTOP) 	args+=MulOpCallExp )*
	args+=MulOpCallExp (operationNames+=INTOP args+=MulOpCallExp)*
;
INTOP : 'div'|'mod';

MulOpCallExp:
	//args+=NotOpCallExp (({MulOpCallExp.source=current} operationNames+=MULOP) 	args+=NotOpCallExp )*
	args+=NotOpCallExp (operationNames+=MULOP args+=NotOpCallExp)*
;
MULOP: '*'|'/';

NotOpCallExp :
	((operationName=UNARYOP source=NotOpCallExp) 
		| 
		PropertyCallExp)
;
UNARYOP: 'not' | '-'
;
//priority_0
PropertyCallExp  :
	source = Primary_OclExpression (calls+=PropertyCall)*
	;

Primary_OclExpression returns OclExpression : 
	VariableExp
	|SelfLiteralExp
	|StringLiteralExp
	|BooleanLiteralExp
	|NumericLiteralExp
	|NullLiteralExp
	|BagLiteralExp
	|OrderedSetLiteralExp
	|SequenceLiteralExp
	|SetLiteralExp
	|TupleLiteralExp
	|MapLiteralExp
	|EnumLiteralExp
	|IfExp
	|BraceExp
	|OclModelElementExp
	|ContextlessCallExp;

Auxiliary :Iterator|LocalVariable|Parameter|Attribute;
VariableExp:
	referredVariable=[Auxiliary]
;
SelfLiteralExp :
	{SelfLiteralExp}	'self'
;

NullLiteralExp : 
	{NullLiteralExp} 'null'
;
StringLiteralExp :
	{StringLiteralExp}
	stringSymbol=STRING
;
NumericLiteralExp: 
	RealLiteralExp|IntegerLiteralExp
;
RealLiteralExp : realSymbol=DOUBLE;


IntegerLiteralExp:
	{IntegerLiteralExp}
	integerSymbol=INT
;
BagLiteralExp:
	{BagLiteralExp}
	'Bag' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
;
OrderedSetLiteralExp:
	{OrderedSetLiteralExp}
	'OrderedSet' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
;
SequenceLiteralExp:
	{SequenceLiteralExp}
	'Sequence' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
;
SetLiteralExp:
	{SetLiteralExp}
	'Set' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
;
TupleLiteralExp:
	{TupleLiteralExp}
	'Tuple' '{' (tuplePart+=TuplePart ("," tuplePart+=TuplePart)*)? '}'
;
TuplePart:
	varName=ID (':' type=OclTypeLiteral)? '=' initExpression=OclExpression
;
MapLiteralExp : 
	{MapLiteralExp}
	'Map' '{' (elements+=MapElement (',' elements+=MapElement)*)? '}'
;

MapElement : 
	'(' key=OclExpression ',' value=OclExpression ')'
;

EnumLiteralExp : 
	ecoreTypes=[Import]'!'enum_=[ecore::EEnum|QualifiedName] "#" name=ID
;

LetExp : 
	'let' variable=LocalVariable 'in' in_=OclExpression
;

IfExp : 
	'if' condition=OclExpression 'then' thenExpression=OclExpression 'else' elseExpression=OclExpression 'endif'
;

BraceExp : 
	'(' exp=OclExpression ')'
;

ContextlessCallExp :
	operationName=ID '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
;
	
BooleanLiteralExp:
	booleanSymbol= 'true'|booleanSymbol= 'false'
	;
	
PropertyCall:
	OperationCall|NavigationOrAttributeCall|IterateExp|IteratorExp
	;
	
OperationCall:
	navOperator=NavigationOp operationName=ID '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
	;

NavigationOp : 
	'->'|'.'
	;
	
NavigationOrAttributeCall : 
	'.' name=ID
	;

IterateExp:
	'->' 'iterate' '(' iterators+=Iterator (',' iterators+=Iterator)* ';' result=LocalVariable '|' body=OclExpression ')'
	;
	
Iterator : 
	name=ID (':' type=OclTypeLiteral)?
	;

IteratorExp : 
	'->' name=ID '(' iterators+=Iterator (',' iterators+=Iterator)* '|' body=OclExpression ')'
	;


LocalVariable : 
	name=ID (':' type=OclTypeLiteral)? '=' initExpression=OclExpression
;
OclTypeLiteral : 
	CollectionTypeLiteral
	| Primitive 
	| OclAnyType 
	| OclVoidType
	| TupleType 
	| OclModelElementClass
	| MapType 
	;

CollectionTypeLiteral:
	CollectionType
	| BagType
	| OrderedSetType 
	| SequenceType 
	| SetType 
	;
	
CollectionType :
	'Collection' '(' elementType=OclTypeLiteral ')'
;

BagType :
	'Bag' '(' elementType=OclTypeLiteral ')'
;

OrderedSetType :
	'OrderedSet' '(' elementType=OclTypeLiteral ')'
;

SequenceType :
	'Sequence' '(' elementType=OclTypeLiteral ')'
;

SetType :
	'Set' '(' elementType=OclTypeLiteral ')'
;

Primitive:
	StringType
	| BooleanType 
	| NumericType 
;

StringType:
	{StringType}'String'
;

BooleanType:
	{BooleanType}'Boolean'
;

NumericType:
	IntegerType
	|RealType
;

IntegerType:
	{IntegerType}'Integer'
;

RealType:
	{RealType}'Real'
;

OclAnyType :
	{OclAnyType}'OclAny'
;

OclVoidType :
	{OclVoidType}'OclVoid'
;
	
TupleType :
	{TupleType}
	 ('Tuple') '(' (attributes+=TupleTypeAttribute (',' attributes+=TupleTypeAttribute)*)? ')'
	 ;
	 
TupleTypeAttribute : name=ID ':' type=OclTypeLiteral;

OclModelElementClass: model=[Import]'!'name=[ecore::EClass|QualifiedName];
	
MapType : 
	'Map' '(' keyType=OclTypeLiteral ',' valueType=OclTypeLiteral ')'
;


terminal DOUBLE returns ecore::EDouble :
	(INT '.' INT| '.' INT | INT '.') ('e' ('-'|'+') INT)?;

QualifiedName: ID ('.' ID);


@Override
terminal SL_COMMENT:
    '--' .* '\n'
;
	