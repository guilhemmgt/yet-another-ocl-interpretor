/**
 * generated by Xtext
 */
package fr.enseeiht.ocl.xtext.ocl.util;

import fr.enseeiht.ocl.xtext.ocl.AddOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.Attribute;
import fr.enseeiht.ocl.xtext.ocl.Auxiliary;
import fr.enseeiht.ocl.xtext.ocl.BagLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.BagType;
import fr.enseeiht.ocl.xtext.ocl.BooleanLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.BooleanType;
import fr.enseeiht.ocl.xtext.ocl.BraceExp;
import fr.enseeiht.ocl.xtext.ocl.CollectionOperationCall;
import fr.enseeiht.ocl.xtext.ocl.CollectionType;
import fr.enseeiht.ocl.xtext.ocl.EnumLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.EqOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.IfExp;
import fr.enseeiht.ocl.xtext.ocl.Import;
import fr.enseeiht.ocl.xtext.ocl.IntOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.IntegerLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.IntegerType;
import fr.enseeiht.ocl.xtext.ocl.IterateExp;
import fr.enseeiht.ocl.xtext.ocl.Iterator;
import fr.enseeiht.ocl.xtext.ocl.IteratorExp;
import fr.enseeiht.ocl.xtext.ocl.LetExp;
import fr.enseeiht.ocl.xtext.ocl.LocalVariable;
import fr.enseeiht.ocl.xtext.ocl.MapElement;
import fr.enseeiht.ocl.xtext.ocl.MapLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.MapType;
import fr.enseeiht.ocl.xtext.ocl.MulOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.NavigationOrAttributeCall;
import fr.enseeiht.ocl.xtext.ocl.NotOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.NullLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.NumericLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.NumericType;
import fr.enseeiht.ocl.xtext.ocl.OclAnyType;
import fr.enseeiht.ocl.xtext.ocl.OclContextBlock;
import fr.enseeiht.ocl.xtext.ocl.OclExpression;
import fr.enseeiht.ocl.xtext.ocl.OclFeatureDefinition;
import fr.enseeiht.ocl.xtext.ocl.OclInvariant;
import fr.enseeiht.ocl.xtext.ocl.OclModelElementClass;
import fr.enseeiht.ocl.xtext.ocl.OclModelElementExp;
import fr.enseeiht.ocl.xtext.ocl.OclPackage;
import fr.enseeiht.ocl.xtext.ocl.OclTypeLiteral;
import fr.enseeiht.ocl.xtext.ocl.Operation;
import fr.enseeiht.ocl.xtext.ocl.OperationCall;
import fr.enseeiht.ocl.xtext.ocl.OperatorCallExp;
import fr.enseeiht.ocl.xtext.ocl.OrderedSetLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.OrderedSetType;
import fr.enseeiht.ocl.xtext.ocl.Parameter;
import fr.enseeiht.ocl.xtext.ocl.Primitive;
import fr.enseeiht.ocl.xtext.ocl.PropertyCall;
import fr.enseeiht.ocl.xtext.ocl.PropertyCallExp;
import fr.enseeiht.ocl.xtext.ocl.RealLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.RealType;
import fr.enseeiht.ocl.xtext.ocl.RelOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.SelfLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.SequenceLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.SequenceType;
import fr.enseeiht.ocl.xtext.ocl.SetLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.SetType;
import fr.enseeiht.ocl.xtext.ocl.StringLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.StringType;
import fr.enseeiht.ocl.xtext.ocl.TupleLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.TuplePart;
import fr.enseeiht.ocl.xtext.ocl.TupleType;
import fr.enseeiht.ocl.xtext.ocl.TupleTypeAttribute;
import fr.enseeiht.ocl.xtext.ocl.VariableExp;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see fr.enseeiht.ocl.xtext.ocl.OclPackage
 * @generated
 */
public class OclSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static OclPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OclSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = OclPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case OclPackage.MODULE:
      {
        fr.enseeiht.ocl.xtext.ocl.Module module = (fr.enseeiht.ocl.xtext.ocl.Module)theEObject;
        T result = caseModule(module);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.OCL_CONTEXT_BLOCK:
      {
        OclContextBlock oclContextBlock = (OclContextBlock)theEObject;
        T result = caseOclContextBlock(oclContextBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.OCL_FEATURE_DEFINITION:
      {
        OclFeatureDefinition oclFeatureDefinition = (OclFeatureDefinition)theEObject;
        T result = caseOclFeatureDefinition(oclFeatureDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.OPERATION:
      {
        Operation operation = (Operation)theEObject;
        T result = caseOperation(operation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.PARAMETER:
      {
        Parameter parameter = (Parameter)theEObject;
        T result = caseParameter(parameter);
        if (result == null) result = caseAuxiliary(parameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.OCL_INVARIANT:
      {
        OclInvariant oclInvariant = (OclInvariant)theEObject;
        T result = caseOclInvariant(oclInvariant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.OCL_EXPRESSION:
      {
        OclExpression oclExpression = (OclExpression)theEObject;
        T result = caseOclExpression(oclExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.OCL_MODEL_ELEMENT_EXP:
      {
        OclModelElementExp oclModelElementExp = (OclModelElementExp)theEObject;
        T result = caseOclModelElementExp(oclModelElementExp);
        if (result == null) result = caseOclExpression(oclModelElementExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.OPERATOR_CALL_EXP:
      {
        OperatorCallExp operatorCallExp = (OperatorCallExp)theEObject;
        T result = caseOperatorCallExp(operatorCallExp);
        if (result == null) result = caseOclExpression(operatorCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.EQ_OP_CALL_EXP:
      {
        EqOpCallExp eqOpCallExp = (EqOpCallExp)theEObject;
        T result = caseEqOpCallExp(eqOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.REL_OP_CALL_EXP:
      {
        RelOpCallExp relOpCallExp = (RelOpCallExp)theEObject;
        T result = caseRelOpCallExp(relOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.ADD_OP_CALL_EXP:
      {
        AddOpCallExp addOpCallExp = (AddOpCallExp)theEObject;
        T result = caseAddOpCallExp(addOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.INT_OP_CALL_EXP:
      {
        IntOpCallExp intOpCallExp = (IntOpCallExp)theEObject;
        T result = caseIntOpCallExp(intOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.MUL_OP_CALL_EXP:
      {
        MulOpCallExp mulOpCallExp = (MulOpCallExp)theEObject;
        T result = caseMulOpCallExp(mulOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.NOT_OP_CALL_EXP:
      {
        NotOpCallExp notOpCallExp = (NotOpCallExp)theEObject;
        T result = caseNotOpCallExp(notOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.PROPERTY_CALL_EXP:
      {
        PropertyCallExp propertyCallExp = (PropertyCallExp)theEObject;
        T result = casePropertyCallExp(propertyCallExp);
        if (result == null) result = caseNotOpCallExp(propertyCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.AUXILIARY:
      {
        Auxiliary auxiliary = (Auxiliary)theEObject;
        T result = caseAuxiliary(auxiliary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.VARIABLE_EXP:
      {
        VariableExp variableExp = (VariableExp)theEObject;
        T result = caseVariableExp(variableExp);
        if (result == null) result = caseOclExpression(variableExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.SELF_LITERAL_EXP:
      {
        SelfLiteralExp selfLiteralExp = (SelfLiteralExp)theEObject;
        T result = caseSelfLiteralExp(selfLiteralExp);
        if (result == null) result = caseOclExpression(selfLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.NULL_LITERAL_EXP:
      {
        NullLiteralExp nullLiteralExp = (NullLiteralExp)theEObject;
        T result = caseNullLiteralExp(nullLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.STRING_LITERAL_EXP:
      {
        StringLiteralExp stringLiteralExp = (StringLiteralExp)theEObject;
        T result = caseStringLiteralExp(stringLiteralExp);
        if (result == null) result = caseOclExpression(stringLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.NUMERIC_LITERAL_EXP:
      {
        NumericLiteralExp numericLiteralExp = (NumericLiteralExp)theEObject;
        T result = caseNumericLiteralExp(numericLiteralExp);
        if (result == null) result = caseOclExpression(numericLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.REAL_LITERAL_EXP:
      {
        RealLiteralExp realLiteralExp = (RealLiteralExp)theEObject;
        T result = caseRealLiteralExp(realLiteralExp);
        if (result == null) result = caseNumericLiteralExp(realLiteralExp);
        if (result == null) result = caseOclExpression(realLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.INTEGER_LITERAL_EXP:
      {
        IntegerLiteralExp integerLiteralExp = (IntegerLiteralExp)theEObject;
        T result = caseIntegerLiteralExp(integerLiteralExp);
        if (result == null) result = caseNumericLiteralExp(integerLiteralExp);
        if (result == null) result = caseOclExpression(integerLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.BAG_LITERAL_EXP:
      {
        BagLiteralExp bagLiteralExp = (BagLiteralExp)theEObject;
        T result = caseBagLiteralExp(bagLiteralExp);
        if (result == null) result = caseOclExpression(bagLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.ORDERED_SET_LITERAL_EXP:
      {
        OrderedSetLiteralExp orderedSetLiteralExp = (OrderedSetLiteralExp)theEObject;
        T result = caseOrderedSetLiteralExp(orderedSetLiteralExp);
        if (result == null) result = caseOclExpression(orderedSetLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.SEQUENCE_LITERAL_EXP:
      {
        SequenceLiteralExp sequenceLiteralExp = (SequenceLiteralExp)theEObject;
        T result = caseSequenceLiteralExp(sequenceLiteralExp);
        if (result == null) result = caseOclExpression(sequenceLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.SET_LITERAL_EXP:
      {
        SetLiteralExp setLiteralExp = (SetLiteralExp)theEObject;
        T result = caseSetLiteralExp(setLiteralExp);
        if (result == null) result = caseOclExpression(setLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.TUPLE_LITERAL_EXP:
      {
        TupleLiteralExp tupleLiteralExp = (TupleLiteralExp)theEObject;
        T result = caseTupleLiteralExp(tupleLiteralExp);
        if (result == null) result = caseOclExpression(tupleLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.TUPLE_PART:
      {
        TuplePart tuplePart = (TuplePart)theEObject;
        T result = caseTuplePart(tuplePart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.MAP_LITERAL_EXP:
      {
        MapLiteralExp mapLiteralExp = (MapLiteralExp)theEObject;
        T result = caseMapLiteralExp(mapLiteralExp);
        if (result == null) result = caseOclExpression(mapLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.MAP_ELEMENT:
      {
        MapElement mapElement = (MapElement)theEObject;
        T result = caseMapElement(mapElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.ENUM_LITERAL_EXP:
      {
        EnumLiteralExp enumLiteralExp = (EnumLiteralExp)theEObject;
        T result = caseEnumLiteralExp(enumLiteralExp);
        if (result == null) result = caseOclExpression(enumLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.LET_EXP:
      {
        LetExp letExp = (LetExp)theEObject;
        T result = caseLetExp(letExp);
        if (result == null) result = caseOclExpression(letExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.IF_EXP:
      {
        IfExp ifExp = (IfExp)theEObject;
        T result = caseIfExp(ifExp);
        if (result == null) result = caseOclExpression(ifExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.BRACE_EXP:
      {
        BraceExp braceExp = (BraceExp)theEObject;
        T result = caseBraceExp(braceExp);
        if (result == null) result = caseOclExpression(braceExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.BOOLEAN_LITERAL_EXP:
      {
        BooleanLiteralExp booleanLiteralExp = (BooleanLiteralExp)theEObject;
        T result = caseBooleanLiteralExp(booleanLiteralExp);
        if (result == null) result = caseOclExpression(booleanLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.PROPERTY_CALL:
      {
        PropertyCall propertyCall = (PropertyCall)theEObject;
        T result = casePropertyCall(propertyCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.OPERATION_CALL:
      {
        OperationCall operationCall = (OperationCall)theEObject;
        T result = caseOperationCall(operationCall);
        if (result == null) result = casePropertyCall(operationCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL:
      {
        NavigationOrAttributeCall navigationOrAttributeCall = (NavigationOrAttributeCall)theEObject;
        T result = caseNavigationOrAttributeCall(navigationOrAttributeCall);
        if (result == null) result = casePropertyCall(navigationOrAttributeCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.ITERATE_EXP:
      {
        IterateExp iterateExp = (IterateExp)theEObject;
        T result = caseIterateExp(iterateExp);
        if (result == null) result = casePropertyCall(iterateExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.ITERATOR:
      {
        Iterator iterator = (Iterator)theEObject;
        T result = caseIterator(iterator);
        if (result == null) result = caseAuxiliary(iterator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.ITERATOR_EXP:
      {
        IteratorExp iteratorExp = (IteratorExp)theEObject;
        T result = caseIteratorExp(iteratorExp);
        if (result == null) result = casePropertyCall(iteratorExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.COLLECTION_OPERATION_CALL:
      {
        CollectionOperationCall collectionOperationCall = (CollectionOperationCall)theEObject;
        T result = caseCollectionOperationCall(collectionOperationCall);
        if (result == null) result = casePropertyCall(collectionOperationCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.LOCAL_VARIABLE:
      {
        LocalVariable localVariable = (LocalVariable)theEObject;
        T result = caseLocalVariable(localVariable);
        if (result == null) result = caseAuxiliary(localVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.OCL_TYPE_LITERAL:
      {
        OclTypeLiteral oclTypeLiteral = (OclTypeLiteral)theEObject;
        T result = caseOclTypeLiteral(oclTypeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.COLLECTION_TYPE:
      {
        CollectionType collectionType = (CollectionType)theEObject;
        T result = caseCollectionType(collectionType);
        if (result == null) result = caseOclTypeLiteral(collectionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.BAG_TYPE:
      {
        BagType bagType = (BagType)theEObject;
        T result = caseBagType(bagType);
        if (result == null) result = caseCollectionType(bagType);
        if (result == null) result = caseOclTypeLiteral(bagType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.ORDERED_SET_TYPE:
      {
        OrderedSetType orderedSetType = (OrderedSetType)theEObject;
        T result = caseOrderedSetType(orderedSetType);
        if (result == null) result = caseCollectionType(orderedSetType);
        if (result == null) result = caseOclTypeLiteral(orderedSetType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.SEQUENCE_TYPE:
      {
        SequenceType sequenceType = (SequenceType)theEObject;
        T result = caseSequenceType(sequenceType);
        if (result == null) result = caseCollectionType(sequenceType);
        if (result == null) result = caseOclTypeLiteral(sequenceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.SET_TYPE:
      {
        SetType setType = (SetType)theEObject;
        T result = caseSetType(setType);
        if (result == null) result = caseCollectionType(setType);
        if (result == null) result = caseOclTypeLiteral(setType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.PRIMITIVE:
      {
        Primitive primitive = (Primitive)theEObject;
        T result = casePrimitive(primitive);
        if (result == null) result = caseOclTypeLiteral(primitive);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.STRING_TYPE:
      {
        StringType stringType = (StringType)theEObject;
        T result = caseStringType(stringType);
        if (result == null) result = casePrimitive(stringType);
        if (result == null) result = caseOclTypeLiteral(stringType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.BOOLEAN_TYPE:
      {
        BooleanType booleanType = (BooleanType)theEObject;
        T result = caseBooleanType(booleanType);
        if (result == null) result = casePrimitive(booleanType);
        if (result == null) result = caseOclTypeLiteral(booleanType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.NUMERIC_TYPE:
      {
        NumericType numericType = (NumericType)theEObject;
        T result = caseNumericType(numericType);
        if (result == null) result = casePrimitive(numericType);
        if (result == null) result = caseOclTypeLiteral(numericType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.INTEGER_TYPE:
      {
        IntegerType integerType = (IntegerType)theEObject;
        T result = caseIntegerType(integerType);
        if (result == null) result = caseNumericType(integerType);
        if (result == null) result = casePrimitive(integerType);
        if (result == null) result = caseOclTypeLiteral(integerType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.REAL_TYPE:
      {
        RealType realType = (RealType)theEObject;
        T result = caseRealType(realType);
        if (result == null) result = caseNumericType(realType);
        if (result == null) result = casePrimitive(realType);
        if (result == null) result = caseOclTypeLiteral(realType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.OCL_ANY_TYPE:
      {
        OclAnyType oclAnyType = (OclAnyType)theEObject;
        T result = caseOclAnyType(oclAnyType);
        if (result == null) result = caseOclTypeLiteral(oclAnyType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.TUPLE_TYPE:
      {
        TupleType tupleType = (TupleType)theEObject;
        T result = caseTupleType(tupleType);
        if (result == null) result = caseOclTypeLiteral(tupleType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.TUPLE_TYPE_ATTRIBUTE:
      {
        TupleTypeAttribute tupleTypeAttribute = (TupleTypeAttribute)theEObject;
        T result = caseTupleTypeAttribute(tupleTypeAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.OCL_MODEL_ELEMENT_CLASS:
      {
        OclModelElementClass oclModelElementClass = (OclModelElementClass)theEObject;
        T result = caseOclModelElementClass(oclModelElementClass);
        if (result == null) result = caseOclTypeLiteral(oclModelElementClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OclPackage.MAP_TYPE:
      {
        MapType mapType = (MapType)theEObject;
        T result = caseMapType(mapType);
        if (result == null) result = caseOclTypeLiteral(mapType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModule(fr.enseeiht.ocl.xtext.ocl.Module object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclContextBlock(OclContextBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclFeatureDefinition(OclFeatureDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperation(Operation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameter(Parameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclInvariant(OclInvariant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclExpression(OclExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Element Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Element Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclModelElementExp(OclModelElementExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operator Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operator Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperatorCallExp(OperatorCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Eq Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Eq Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqOpCallExp(EqOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rel Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rel Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelOpCallExp(RelOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddOpCallExp(AddOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntOpCallExp(IntOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mul Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mul Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMulOpCallExp(MulOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNotOpCallExp(NotOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyCallExp(PropertyCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Auxiliary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Auxiliary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAuxiliary(Auxiliary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableExp(VariableExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Self Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Self Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelfLiteralExp(SelfLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Null Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Null Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNullLiteralExp(NullLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteralExp(StringLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Numeric Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Numeric Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumericLiteralExp(NumericLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Real Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Real Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRealLiteralExp(RealLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integer Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integer Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntegerLiteralExp(IntegerLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bag Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bag Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBagLiteralExp(BagLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordered Set Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordered Set Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderedSetLiteralExp(OrderedSetLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceLiteralExp(SequenceLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetLiteralExp(SetLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleLiteralExp(TupleLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTuplePart(TuplePart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapLiteralExp(MapLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapElement(MapElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumLiteralExp(EnumLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetExp(LetExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfExp(IfExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Brace Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Brace Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBraceExp(BraceExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanLiteralExp(BooleanLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyCall(PropertyCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationCall(OperationCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigation Or Attribute Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigation Or Attribute Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigationOrAttributeCall(NavigationOrAttributeCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterate Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterate Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIterateExp(IterateExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIterator(Iterator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterator Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterator Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIteratorExp(IteratorExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Operation Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Operation Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionOperationCall(CollectionOperationCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Local Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Local Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocalVariable(LocalVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclTypeLiteral(OclTypeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionType(CollectionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bag Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bag Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBagType(BagType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordered Set Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordered Set Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderedSetType(OrderedSetType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceType(SequenceType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetType(SetType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitive(Primitive object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringType(StringType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanType(BooleanType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Numeric Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Numeric Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumericType(NumericType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integer Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integer Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntegerType(IntegerType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Real Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Real Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRealType(RealType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Any Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Any Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclAnyType(OclAnyType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleType(TupleType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Type Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Type Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleTypeAttribute(TupleTypeAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Element Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Element Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclModelElementClass(OclModelElementClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapType(MapType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //OclSwitch
