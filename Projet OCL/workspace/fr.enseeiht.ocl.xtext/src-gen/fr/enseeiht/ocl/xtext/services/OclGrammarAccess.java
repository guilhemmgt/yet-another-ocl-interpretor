/*
 * generated by Xtext 2.37.0
 */
package fr.enseeiht.ocl.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OclGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsModuleElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		
		////Model:
		////    (imports+=Import)*
		////    eventsMappings+=EventsMapping*;
		////
		////
		////
		////EventsMapping:
		////    'events mapping' name = ID ':'
		////        dsmlStream=DSMLStream
		////        'observed as'
		////        formalStream=FormalStream
		////    'end events mapping'
		////;
		////
		////DSMLStream:
		////        elements += (StreamDSMLElement)+
		////;
		////
		////StreamDSMLElement:
		////'DSMLEvent' DSMLEvent
		////;
		////
		////DSMLEvent:
		////    name =ID ':' ecoreTypes=[Import]'.'class=[ecore::EClass|ID];
		////
		////FormalStream:
		////        elements += (StreamFormalElement)+
		////;
		////StreamFormalElement:
		////'FormalEvent'    FormalEvent
		////;
		////
		////FormalEvent:
		////    name =ID ':' ecoreTypes=[Import]'.'class=[ecore::EClass|ID] '('  body=OclExpression ')'//
		////;
		//Module:
		//    'module' name=ID ';' imports+=Import (elements+=ModuleElement)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'module' name=ID ';' imports+=Import (elements+=ModuleElement)+
		public Group getGroup() { return cGroup; }
		
		//'module'
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//imports+=Import
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//(elements+=ModuleElement)+
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//ModuleElement
		public RuleCall getElementsModuleElementParserRuleCall_4_0() { return cElementsModuleElementParserRuleCall_4_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPackageEPackageCrossReference_1_0 = (CrossReference)cPackageAssignment_1.eContents().get(0);
		private final RuleCall cPackageEPackageSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cPackageEPackageCrossReference_1_0.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Import:
		//'import' package=[ecore::EPackage|STRING] 'as'name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' package=[ecore::EPackage|STRING] 'as'name=ID
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//package=[ecore::EPackage|STRING]
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }
		
		//[ecore::EPackage|STRING]
		public CrossReference getPackageEPackageCrossReference_1_0() { return cPackageEPackageCrossReference_1_0; }
		
		//STRING
		public RuleCall getPackageEPackageSTRINGTerminalRuleCall_1_0_1() { return cPackageEPackageSTRINGTerminalRuleCall_1_0_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class ModuleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.ModuleElement");
		private final RuleCall cOclModuleElementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ModuleElement:
		//     OclModuleElement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OclModuleElement
		public RuleCall getOclModuleElementParserRuleCall() { return cOclModuleElementParserRuleCall; }
	}
	public class OclModuleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclModuleElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOclFeatureDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOclInvariantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OclModuleElement:
		//    OclFeatureDefinition|OclInvariant
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OclFeatureDefinition|OclInvariant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OclFeatureDefinition
		public RuleCall getOclFeatureDefinitionParserRuleCall_0() { return cOclFeatureDefinitionParserRuleCall_0; }
		
		//OclInvariant
		public RuleCall getOclInvariantParserRuleCall_1() { return cOclInvariantParserRuleCall_1; }
	}
	public class OclFeatureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclFeatureDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cContextKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cEcoreTypesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cEcoreTypesImportCrossReference_0_1_0 = (CrossReference)cEcoreTypesAssignment_0_1.eContents().get(0);
		private final RuleCall cEcoreTypesImportIDTerminalRuleCall_0_1_0_1 = (RuleCall)cEcoreTypesImportCrossReference_0_1_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cClassAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cClassEClassCrossReference_0_3_0 = (CrossReference)cClassAssignment_0_3.eContents().get(0);
		private final RuleCall cClassEClassQualifiedNameParserRuleCall_0_3_0_1 = (RuleCall)cClassEClassCrossReference_0_3_0.eContents().get(1);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cFeatureAlternatives_3_0 = (Alternatives)cFeatureAssignment_3.eContents().get(0);
		private final RuleCall cFeatureAttributeParserRuleCall_3_0_0 = (RuleCall)cFeatureAlternatives_3_0.eContents().get(0);
		private final RuleCall cFeatureOperationParserRuleCall_3_0_1 = (RuleCall)cFeatureAlternatives_3_0.eContents().get(1);
		
		//OclFeatureDefinition:
		//    ('context' ecoreTypes=[Import]'!'class=[ecore::EClass|QualifiedName])? 'def' ':' feature = (Attribute|Operation)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('context' ecoreTypes=[Import]'!'class=[ecore::EClass|QualifiedName])? 'def' ':' feature = (Attribute|Operation)
		public Group getGroup() { return cGroup; }
		
		//('context' ecoreTypes=[Import]'!'class=[ecore::EClass|QualifiedName])?
		public Group getGroup_0() { return cGroup_0; }
		
		//'context'
		public Keyword getContextKeyword_0_0() { return cContextKeyword_0_0; }
		
		//ecoreTypes=[Import]
		public Assignment getEcoreTypesAssignment_0_1() { return cEcoreTypesAssignment_0_1; }
		
		//[Import]
		public CrossReference getEcoreTypesImportCrossReference_0_1_0() { return cEcoreTypesImportCrossReference_0_1_0; }
		
		//ID
		public RuleCall getEcoreTypesImportIDTerminalRuleCall_0_1_0_1() { return cEcoreTypesImportIDTerminalRuleCall_0_1_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0_2() { return cExclamationMarkKeyword_0_2; }
		
		//class=[ecore::EClass|QualifiedName]
		public Assignment getClassAssignment_0_3() { return cClassAssignment_0_3; }
		
		//[ecore::EClass|QualifiedName]
		public CrossReference getClassEClassCrossReference_0_3_0() { return cClassEClassCrossReference_0_3_0; }
		
		//QualifiedName
		public RuleCall getClassEClassQualifiedNameParserRuleCall_0_3_0_1() { return cClassEClassQualifiedNameParserRuleCall_0_3_0_1; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//feature = (Attribute|Operation)
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }
		
		//(Attribute|Operation)
		public Alternatives getFeatureAlternatives_3_0() { return cFeatureAlternatives_3_0; }
		
		//Attribute
		public RuleCall getFeatureAttributeParserRuleCall_3_0_0() { return cFeatureAttributeParserRuleCall_3_0_0; }
		
		//Operation
		public RuleCall getFeatureOperationParserRuleCall_3_0_1() { return cFeatureOperationParserRuleCall_3_0_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOclTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInitExpressionOclExpressionParserRuleCall_4_0 = (RuleCall)cInitExpressionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Attribute :
		//    name=ID ':' type=OclType '=' initExpression=OclExpression ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=OclType '=' initExpression=OclExpression ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=OclType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_2_0() { return cTypeOclTypeParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//initExpression=OclExpression
		public Assignment getInitExpressionAssignment_4() { return cInitExpressionAssignment_4; }
		
		//OclExpression
		public RuleCall getInitExpressionOclExpressionParserRuleCall_4_0() { return cInitExpressionOclExpressionParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeOclTypeParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyOclExpressionParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Operation:
		//    name=ID  '(' (parameters+=Parameter (',' parameters+=Parameter)+)? ')' ':' returnType=OclType '=' body=OclExpression ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID  '(' (parameters+=Parameter (',' parameters+=Parameter)+)? ')' ':' returnType=OclType '=' body=OclExpression ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0_0() { return cParametersParameterParserRuleCall_2_0_0; }
		
		//(',' parameters+=Parameter)+
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_1_0() { return cParametersParameterParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//returnType=OclType
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }
		
		//OclType
		public RuleCall getReturnTypeOclTypeParserRuleCall_5_0() { return cReturnTypeOclTypeParserRuleCall_5_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//body=OclExpression
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_7_0() { return cBodyOclExpressionParserRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOclTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//    name=ID ':' type=OclType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=OclType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=OclType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_2_0() { return cTypeOclTypeParserRuleCall_2_0; }
	}
	public class OclInvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclInvariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cContextKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cEcoreTypesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cEcoreTypesImportCrossReference_0_1_0 = (CrossReference)cEcoreTypesAssignment_0_1.eContents().get(0);
		private final RuleCall cEcoreTypesImportIDTerminalRuleCall_0_1_0_1 = (RuleCall)cEcoreTypesImportCrossReference_0_1_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cClassAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cClassEClassCrossReference_0_3_0 = (CrossReference)cClassAssignment_0_3.eContents().get(0);
		private final RuleCall cClassEClassQualifiedNameParserRuleCall_0_3_0_1 = (RuleCall)cClassEClassCrossReference_0_3_0.eContents().get(1);
		private final Keyword cInvKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyOclExpressionParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//OclInvariant:
		//    ('context' ecoreTypes=[Import]'!'class=[ecore::EClass|QualifiedName])? 'inv' name=ID ':' body=OclExpression //';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('context' ecoreTypes=[Import]'!'class=[ecore::EClass|QualifiedName])? 'inv' name=ID ':' body=OclExpression
		public Group getGroup() { return cGroup; }
		
		//('context' ecoreTypes=[Import]'!'class=[ecore::EClass|QualifiedName])?
		public Group getGroup_0() { return cGroup_0; }
		
		//'context'
		public Keyword getContextKeyword_0_0() { return cContextKeyword_0_0; }
		
		//ecoreTypes=[Import]
		public Assignment getEcoreTypesAssignment_0_1() { return cEcoreTypesAssignment_0_1; }
		
		//[Import]
		public CrossReference getEcoreTypesImportCrossReference_0_1_0() { return cEcoreTypesImportCrossReference_0_1_0; }
		
		//ID
		public RuleCall getEcoreTypesImportIDTerminalRuleCall_0_1_0_1() { return cEcoreTypesImportIDTerminalRuleCall_0_1_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0_2() { return cExclamationMarkKeyword_0_2; }
		
		//class=[ecore::EClass|QualifiedName]
		public Assignment getClassAssignment_0_3() { return cClassAssignment_0_3; }
		
		//[ecore::EClass|QualifiedName]
		public CrossReference getClassEClassCrossReference_0_3_0() { return cClassEClassCrossReference_0_3_0; }
		
		//QualifiedName
		public RuleCall getClassEClassQualifiedNameParserRuleCall_0_3_0_1() { return cClassEClassQualifiedNameParserRuleCall_0_3_0_1; }
		
		//'inv'
		public Keyword getInvKeyword_1() { return cInvKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//body=OclExpression
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_4_0() { return cBodyOclExpressionParserRuleCall_4_0; }
	}
	public class OclExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperatorCallExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLetExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OclExpression returns OclExpression :
		//    //LambdaCallExp|
		//    OperatorCallExp|LetExp;
		@Override public ParserRule getRule() { return rule; }
		
		////LambdaCallExp|
		//OperatorCallExp|LetExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////LambdaCallExp|
		//OperatorCallExp
		public RuleCall getOperatorCallExpParserRuleCall_0() { return cOperatorCallExpParserRuleCall_0; }
		
		//LetExp
		public RuleCall getLetExpParserRuleCall_1() { return cLetExpParserRuleCall_1; }
	}
	public class OclModelElementExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclModelElementExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModelImportCrossReference_0_0 = (CrossReference)cModelAssignment_0.eContents().get(0);
		private final RuleCall cModelImportIDTerminalRuleCall_0_0_1 = (RuleCall)cModelImportCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//OclModelElementExp :
		//    model=[Import]'!'name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//model=[Import]'!'name=ID
		public Group getGroup() { return cGroup; }
		
		//model=[Import]
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }
		
		//[Import]
		public CrossReference getModelImportCrossReference_0_0() { return cModelImportCrossReference_0_0; }
		
		//ID
		public RuleCall getModelImportIDTerminalRuleCall_0_0_1() { return cModelImportIDTerminalRuleCall_0_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class TEMPBIOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.TEMPBIOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cUntilKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReleaseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////priority_5
		//TEMPBIOP          : 'until'|'release';
		@Override public ParserRule getRule() { return rule; }
		
		//'until'|'release'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'until'
		public Keyword getUntilKeyword_0() { return cUntilKeyword_0; }
		
		//'release'
		public Keyword getReleaseKeyword_1() { return cReleaseKeyword_1; }
	}
	public class OperatorCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OperatorCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBoolOpCallExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorCallExpSourceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperationNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperationNameTEMPBIOPParserRuleCall_1_1_0 = (RuleCall)cOperationNameAssignment_1_1.eContents().get(0);
		private final Assignment cArgumentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgumentBoolOpCallExpParserRuleCall_1_2_0 = (RuleCall)cArgumentAssignment_1_2.eContents().get(0);
		
		//OperatorCallExp returns OclExpression :
		//    BoolOpCallExp ({OperatorCallExp.source = current} operationName=TEMPBIOP argument=BoolOpCallExp)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolOpCallExp ({OperatorCallExp.source = current} operationName=TEMPBIOP argument=BoolOpCallExp)*
		public Group getGroup() { return cGroup; }
		
		//BoolOpCallExp
		public RuleCall getBoolOpCallExpParserRuleCall_0() { return cBoolOpCallExpParserRuleCall_0; }
		
		//({OperatorCallExp.source = current} operationName=TEMPBIOP argument=BoolOpCallExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorCallExp.source = current}
		public Action getOperatorCallExpSourceAction_1_0() { return cOperatorCallExpSourceAction_1_0; }
		
		//operationName=TEMPBIOP
		public Assignment getOperationNameAssignment_1_1() { return cOperationNameAssignment_1_1; }
		
		//TEMPBIOP
		public RuleCall getOperationNameTEMPBIOPParserRuleCall_1_1_0() { return cOperationNameTEMPBIOPParserRuleCall_1_1_0; }
		
		//argument=BoolOpCallExp
		public Assignment getArgumentAssignment_1_2() { return cArgumentAssignment_1_2; }
		
		//BoolOpCallExp
		public RuleCall getArgumentBoolOpCallExpParserRuleCall_1_2_0() { return cArgumentBoolOpCallExpParserRuleCall_1_2_0; }
	}
	public class BoolOpCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.BoolOpCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqOpCallExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBoolOpCallExpSourceAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperationNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperationNameBOOLOPParserRuleCall_1_0_1_0 = (RuleCall)cOperationNameAssignment_1_0_1.eContents().get(0);
		private final Assignment cArgumentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentEqOpCallExpParserRuleCall_1_1_0 = (RuleCall)cArgumentAssignment_1_1.eContents().get(0);
		
		//BoolOpCallExp returns OperatorCallExp :
		//    EqOpCallExp (({BoolOpCallExp.source=current} operationName=BOOLOP)     argument=EqOpCallExp )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EqOpCallExp (({BoolOpCallExp.source=current} operationName=BOOLOP) 	argument=EqOpCallExp )*
		public Group getGroup() { return cGroup; }
		
		//EqOpCallExp
		public RuleCall getEqOpCallExpParserRuleCall_0() { return cEqOpCallExpParserRuleCall_0; }
		
		//(({BoolOpCallExp.source=current} operationName=BOOLOP) 	argument=EqOpCallExp )*
		public Group getGroup_1() { return cGroup_1; }
		
		//({BoolOpCallExp.source=current} operationName=BOOLOP)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BoolOpCallExp.source=current}
		public Action getBoolOpCallExpSourceAction_1_0_0() { return cBoolOpCallExpSourceAction_1_0_0; }
		
		//operationName=BOOLOP
		public Assignment getOperationNameAssignment_1_0_1() { return cOperationNameAssignment_1_0_1; }
		
		//BOOLOP
		public RuleCall getOperationNameBOOLOPParserRuleCall_1_0_1_0() { return cOperationNameBOOLOPParserRuleCall_1_0_1_0; }
		
		//argument=EqOpCallExp
		public Assignment getArgumentAssignment_1_1() { return cArgumentAssignment_1_1; }
		
		//EqOpCallExp
		public RuleCall getArgumentEqOpCallExpParserRuleCall_1_1_0() { return cArgumentEqOpCallExpParserRuleCall_1_1_0; }
	}
	public class BOOLOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.BOOLOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cXorKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cImpliesKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEquivalentKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//BOOLOP  		: 'and'|'or'|'xor'|'implies'|'equivalent';
		@Override public ParserRule getRule() { return rule; }
		
		//'and'|'or'|'xor'|'implies'|'equivalent'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//'xor'
		public Keyword getXorKeyword_2() { return cXorKeyword_2; }
		
		//'implies'
		public Keyword getImpliesKeyword_3() { return cImpliesKeyword_3; }
		
		//'equivalent'
		public Keyword getEquivalentKeyword_4() { return cEquivalentKeyword_4; }
	}
	public class EqOpCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.EqOpCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelOpCallExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cEqOpCallExpSourceAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperationNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperationNameEQOPParserRuleCall_1_0_1_0 = (RuleCall)cOperationNameAssignment_1_0_1.eContents().get(0);
		private final Assignment cArgumentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentRelOpCallExpParserRuleCall_1_1_0 = (RuleCall)cArgumentAssignment_1_1.eContents().get(0);
		
		//EqOpCallExp returns OperatorCallExp :
		//    RelOpCallExp (({EqOpCallExp.source=current} operationName=EQOP)     argument=RelOpCallExp )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RelOpCallExp (({EqOpCallExp.source=current} operationName=EQOP) 	argument=RelOpCallExp )*
		public Group getGroup() { return cGroup; }
		
		//RelOpCallExp
		public RuleCall getRelOpCallExpParserRuleCall_0() { return cRelOpCallExpParserRuleCall_0; }
		
		//(({EqOpCallExp.source=current} operationName=EQOP) 	argument=RelOpCallExp )*
		public Group getGroup_1() { return cGroup_1; }
		
		//({EqOpCallExp.source=current} operationName=EQOP)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{EqOpCallExp.source=current}
		public Action getEqOpCallExpSourceAction_1_0_0() { return cEqOpCallExpSourceAction_1_0_0; }
		
		//operationName=EQOP
		public Assignment getOperationNameAssignment_1_0_1() { return cOperationNameAssignment_1_0_1; }
		
		//EQOP
		public RuleCall getOperationNameEQOPParserRuleCall_1_0_1_0() { return cOperationNameEQOPParserRuleCall_1_0_1_0; }
		
		//argument=RelOpCallExp
		public Assignment getArgumentAssignment_1_1() { return cArgumentAssignment_1_1; }
		
		//RelOpCallExp
		public RuleCall getArgumentRelOpCallExpParserRuleCall_1_1_0() { return cArgumentRelOpCallExpParserRuleCall_1_1_0; }
	}
	public class EQOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.EQOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EQOP  		: '='|'<>';
		@Override public ParserRule getRule() { return rule; }
		
		//'='|'<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_1() { return cLessThanSignGreaterThanSignKeyword_1; }
	}
	public class RelOpCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.RelOpCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddOpCallExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cRelOpCallExpSourceAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperationNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperationNameRELOPParserRuleCall_1_0_1_0 = (RuleCall)cOperationNameAssignment_1_0_1.eContents().get(0);
		private final Assignment cArgumentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentAddOpCallExpParserRuleCall_1_1_0 = (RuleCall)cArgumentAssignment_1_1.eContents().get(0);
		
		//RelOpCallExp returns OperatorCallExp :
		//    AddOpCallExp (({RelOpCallExp.source=current} operationName=RELOP)     argument=AddOpCallExp )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AddOpCallExp (({RelOpCallExp.source=current} operationName=RELOP) 	argument=AddOpCallExp )*
		public Group getGroup() { return cGroup; }
		
		//AddOpCallExp
		public RuleCall getAddOpCallExpParserRuleCall_0() { return cAddOpCallExpParserRuleCall_0; }
		
		//(({RelOpCallExp.source=current} operationName=RELOP) 	argument=AddOpCallExp )*
		public Group getGroup_1() { return cGroup_1; }
		
		//({RelOpCallExp.source=current} operationName=RELOP)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{RelOpCallExp.source=current}
		public Action getRelOpCallExpSourceAction_1_0_0() { return cRelOpCallExpSourceAction_1_0_0; }
		
		//operationName=RELOP
		public Assignment getOperationNameAssignment_1_0_1() { return cOperationNameAssignment_1_0_1; }
		
		//RELOP
		public RuleCall getOperationNameRELOPParserRuleCall_1_0_1_0() { return cOperationNameRELOPParserRuleCall_1_0_1_0; }
		
		//argument=AddOpCallExp
		public Assignment getArgumentAssignment_1_1() { return cArgumentAssignment_1_1; }
		
		//AddOpCallExp
		public RuleCall getArgumentAddOpCallExpParserRuleCall_1_1_0() { return cArgumentAddOpCallExpParserRuleCall_1_1_0; }
	}
	public class RELOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.RELOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RELOP  		: '>'|'<'|'>='|'<=' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'>'|'<'|'>='|'<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
	}
	public class AddOpCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.AddOpCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIntOpCallExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cAddOpCallExpSourceAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperationNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperationNameADDOPParserRuleCall_1_0_1_0 = (RuleCall)cOperationNameAssignment_1_0_1.eContents().get(0);
		private final Assignment cArgumentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentIntOpCallExpParserRuleCall_1_1_0 = (RuleCall)cArgumentAssignment_1_1.eContents().get(0);
		
		//AddOpCallExp returns OperatorCallExp :
		//    IntOpCallExp (({AddOpCallExp.source=current} operationName=ADDOP)     argument=IntOpCallExp )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntOpCallExp (({AddOpCallExp.source=current} operationName=ADDOP) 	argument=IntOpCallExp )*
		public Group getGroup() { return cGroup; }
		
		//IntOpCallExp
		public RuleCall getIntOpCallExpParserRuleCall_0() { return cIntOpCallExpParserRuleCall_0; }
		
		//(({AddOpCallExp.source=current} operationName=ADDOP) 	argument=IntOpCallExp )*
		public Group getGroup_1() { return cGroup_1; }
		
		//({AddOpCallExp.source=current} operationName=ADDOP)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{AddOpCallExp.source=current}
		public Action getAddOpCallExpSourceAction_1_0_0() { return cAddOpCallExpSourceAction_1_0_0; }
		
		//operationName=ADDOP
		public Assignment getOperationNameAssignment_1_0_1() { return cOperationNameAssignment_1_0_1; }
		
		//ADDOP
		public RuleCall getOperationNameADDOPParserRuleCall_1_0_1_0() { return cOperationNameADDOPParserRuleCall_1_0_1_0; }
		
		//argument=IntOpCallExp
		public Assignment getArgumentAssignment_1_1() { return cArgumentAssignment_1_1; }
		
		//IntOpCallExp
		public RuleCall getArgumentIntOpCallExpParserRuleCall_1_1_0() { return cArgumentIntOpCallExpParserRuleCall_1_1_0; }
	}
	public class ADDOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.ADDOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ADDOP : '-'|'+';
		@Override public ParserRule getRule() { return rule; }
		
		//'-'|'+'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
	}
	public class IntOpCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.IntOpCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOpCallExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cIntOpCallExpSourceAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperationNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperationNameINTOPParserRuleCall_1_0_1_0 = (RuleCall)cOperationNameAssignment_1_0_1.eContents().get(0);
		private final Assignment cArgumentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentMulOpCallExpParserRuleCall_1_1_0 = (RuleCall)cArgumentAssignment_1_1.eContents().get(0);
		
		//IntOpCallExp returns OperatorCallExp :
		//    MulOpCallExp (({IntOpCallExp.source=current} operationName=INTOP)     argument=MulOpCallExp )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOpCallExp (({IntOpCallExp.source=current} operationName=INTOP) 	argument=MulOpCallExp )*
		public Group getGroup() { return cGroup; }
		
		//MulOpCallExp
		public RuleCall getMulOpCallExpParserRuleCall_0() { return cMulOpCallExpParserRuleCall_0; }
		
		//(({IntOpCallExp.source=current} operationName=INTOP) 	argument=MulOpCallExp )*
		public Group getGroup_1() { return cGroup_1; }
		
		//({IntOpCallExp.source=current} operationName=INTOP)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{IntOpCallExp.source=current}
		public Action getIntOpCallExpSourceAction_1_0_0() { return cIntOpCallExpSourceAction_1_0_0; }
		
		//operationName=INTOP
		public Assignment getOperationNameAssignment_1_0_1() { return cOperationNameAssignment_1_0_1; }
		
		//INTOP
		public RuleCall getOperationNameINTOPParserRuleCall_1_0_1_0() { return cOperationNameINTOPParserRuleCall_1_0_1_0; }
		
		//argument=MulOpCallExp
		public Assignment getArgumentAssignment_1_1() { return cArgumentAssignment_1_1; }
		
		//MulOpCallExp
		public RuleCall getArgumentMulOpCallExpParserRuleCall_1_1_0() { return cArgumentMulOpCallExpParserRuleCall_1_1_0; }
	}
	public class INTOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.INTOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDivKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cModKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//INTOP : 'div'|'mod';
		@Override public ParserRule getRule() { return rule; }
		
		//'div'|'mod'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'div'
		public Keyword getDivKeyword_0() { return cDivKeyword_0; }
		
		//'mod'
		public Keyword getModKeyword_1() { return cModKeyword_1; }
	}
	public class MulOpCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.MulOpCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotOpCallExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMulOpCallExpSourceAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperationNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperationNameMULOPParserRuleCall_1_0_1_0 = (RuleCall)cOperationNameAssignment_1_0_1.eContents().get(0);
		private final Assignment cArgumentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentNotOpCallExpParserRuleCall_1_1_0 = (RuleCall)cArgumentAssignment_1_1.eContents().get(0);
		
		//MulOpCallExp returns OperatorCallExp :
		//    NotOpCallExp (({MulOpCallExp.source=current} operationName=MULOP)     argument=NotOpCallExp )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NotOpCallExp (({MulOpCallExp.source=current} operationName=MULOP) 	argument=NotOpCallExp )*
		public Group getGroup() { return cGroup; }
		
		//NotOpCallExp
		public RuleCall getNotOpCallExpParserRuleCall_0() { return cNotOpCallExpParserRuleCall_0; }
		
		//(({MulOpCallExp.source=current} operationName=MULOP) 	argument=NotOpCallExp )*
		public Group getGroup_1() { return cGroup_1; }
		
		//({MulOpCallExp.source=current} operationName=MULOP)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MulOpCallExp.source=current}
		public Action getMulOpCallExpSourceAction_1_0_0() { return cMulOpCallExpSourceAction_1_0_0; }
		
		//operationName=MULOP
		public Assignment getOperationNameAssignment_1_0_1() { return cOperationNameAssignment_1_0_1; }
		
		//MULOP
		public RuleCall getOperationNameMULOPParserRuleCall_1_0_1_0() { return cOperationNameMULOPParserRuleCall_1_0_1_0; }
		
		//argument=NotOpCallExp
		public Assignment getArgumentAssignment_1_1() { return cArgumentAssignment_1_1; }
		
		//NotOpCallExp
		public RuleCall getArgumentNotOpCallExpParserRuleCall_1_1_0() { return cArgumentNotOpCallExpParserRuleCall_1_1_0; }
	}
	public class MULOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.MULOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MULOP: '*'|'/';
		@Override public ParserRule getRule() { return rule; }
		
		//'*'|'/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}
	public class NotOpCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.NotOpCallExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperationNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOperationNameUnaryOPParserRuleCall_0_0_0 = (RuleCall)cOperationNameAssignment_0_0.eContents().get(0);
		private final Assignment cSourceAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSourceNotOpCallExpParserRuleCall_0_1_0 = (RuleCall)cSourceAssignment_0_1.eContents().get(0);
		private final RuleCall cPropertyCallExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NotOpCallExp returns OperatorCallExp :
		//    (((operationName=UnaryOP) source=NotOpCallExp)
		//        |
		//        PropertyCallExp)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(((operationName=UnaryOP) source=NotOpCallExp)
		//    |
		//    PropertyCallExp)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//((operationName=UnaryOP) source=NotOpCallExp)
		public Group getGroup_0() { return cGroup_0; }
		
		//(operationName=UnaryOP)
		public Assignment getOperationNameAssignment_0_0() { return cOperationNameAssignment_0_0; }
		
		//UnaryOP
		public RuleCall getOperationNameUnaryOPParserRuleCall_0_0_0() { return cOperationNameUnaryOPParserRuleCall_0_0_0; }
		
		//source=NotOpCallExp
		public Assignment getSourceAssignment_0_1() { return cSourceAssignment_0_1; }
		
		//NotOpCallExp
		public RuleCall getSourceNotOpCallExpParserRuleCall_0_1_0() { return cSourceNotOpCallExpParserRuleCall_0_1_0; }
		
		//PropertyCallExp
		public RuleCall getPropertyCallExpParserRuleCall_1() { return cPropertyCallExpParserRuleCall_1; }
	}
	public class UnaryOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.UnaryOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNOTOPParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNARYTEMPOPParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOP: NOTOP|UNARYTEMPOP;
		@Override public ParserRule getRule() { return rule; }
		
		//NOTOP|UNARYTEMPOP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NOTOP
		public RuleCall getNOTOPParserRuleCall_0() { return cNOTOPParserRuleCall_0; }
		
		//UNARYTEMPOP
		public RuleCall getUNARYTEMPOPParserRuleCall_1() { return cUNARYTEMPOPParserRuleCall_1; }
	}
	public class NOTOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.NOTOP");
		private final Keyword cNotKeyword = (Keyword)rule.eContents().get(1);
		
		//NOTOP: 'not';
		@Override public ParserRule getRule() { return rule; }
		
		//'not'
		public Keyword getNotKeyword() { return cNotKeyword; }
	}
	public class UNARYTEMPOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.UNARYTEMPOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAlwaysKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEventuallyKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNextKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAllKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExistsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//UNARYTEMPOP: 'always'|'eventually'|'next'|'All'|'Exists';
		@Override public ParserRule getRule() { return rule; }
		
		//'always'|'eventually'|'next'|'All'|'Exists'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'always'
		public Keyword getAlwaysKeyword_0() { return cAlwaysKeyword_0; }
		
		//'eventually'
		public Keyword getEventuallyKeyword_1() { return cEventuallyKeyword_1; }
		
		//'next'
		public Keyword getNextKeyword_2() { return cNextKeyword_2; }
		
		//'All'
		public Keyword getAllKeyword_3() { return cAllKeyword_3; }
		
		//'Exists'
		public Keyword getExistsKeyword_4() { return cExistsKeyword_4; }
	}
	public class PropertyCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.PropertyCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourcePrimary_OclExpressionParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Assignment cCallsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallsPropertyCallParserRuleCall_1_0 = (RuleCall)cCallsAssignment_1.eContents().get(0);
		
		////priority_0
		//PropertyCallExp  :
		//    source = Primary_OclExpression (calls+=PropertyCall)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//source = Primary_OclExpression (calls+=PropertyCall)*
		public Group getGroup() { return cGroup; }
		
		//source = Primary_OclExpression
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//Primary_OclExpression
		public RuleCall getSourcePrimary_OclExpressionParserRuleCall_0_0() { return cSourcePrimary_OclExpressionParserRuleCall_0_0; }
		
		//(calls+=PropertyCall)*
		public Assignment getCallsAssignment_1() { return cCallsAssignment_1; }
		
		//PropertyCall
		public RuleCall getCallsPropertyCallParserRuleCall_1_0() { return cCallsPropertyCallParserRuleCall_1_0; }
	}
	public class Primary_OclExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Primary_OclExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSuperExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelfExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringExpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanExpParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNumericExpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBagExpParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOrderedSetExpParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSequenceExpParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSetExpParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTupleExpParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cMapExpParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cEnumLiteralExpParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cOclUndefinedExpParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cIfExpParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cBraceExpParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cOclModelElementExpParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//Primary_OclExpression returns OclExpression :
		//    VariableExp
		//    |SuperExp
		//    |SelfExp
		//    |StringExp
		//    |BooleanExp
		//    |NumericExp
		//    |BagExp
		//    |OrderedSetExp
		//    |SequenceExp
		//    |SetExp
		//    |TupleExp
		//    |MapExp
		//    |EnumLiteralExp
		//    |OclUndefinedExp
		//    |IfExp
		//    |BraceExp
		//    |OclModelElementExp;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableExp
		//|SuperExp
		//|SelfExp
		//|StringExp
		//|BooleanExp
		//|NumericExp
		//|BagExp
		//|OrderedSetExp
		//|SequenceExp
		//|SetExp
		//|TupleExp
		//|MapExp
		//|EnumLiteralExp
		//|OclUndefinedExp
		//|IfExp
		//|BraceExp
		//|OclModelElementExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableExp
		public RuleCall getVariableExpParserRuleCall_0() { return cVariableExpParserRuleCall_0; }
		
		//SuperExp
		public RuleCall getSuperExpParserRuleCall_1() { return cSuperExpParserRuleCall_1; }
		
		//SelfExp
		public RuleCall getSelfExpParserRuleCall_2() { return cSelfExpParserRuleCall_2; }
		
		//StringExp
		public RuleCall getStringExpParserRuleCall_3() { return cStringExpParserRuleCall_3; }
		
		//BooleanExp
		public RuleCall getBooleanExpParserRuleCall_4() { return cBooleanExpParserRuleCall_4; }
		
		//NumericExp
		public RuleCall getNumericExpParserRuleCall_5() { return cNumericExpParserRuleCall_5; }
		
		//BagExp
		public RuleCall getBagExpParserRuleCall_6() { return cBagExpParserRuleCall_6; }
		
		//OrderedSetExp
		public RuleCall getOrderedSetExpParserRuleCall_7() { return cOrderedSetExpParserRuleCall_7; }
		
		//SequenceExp
		public RuleCall getSequenceExpParserRuleCall_8() { return cSequenceExpParserRuleCall_8; }
		
		//SetExp
		public RuleCall getSetExpParserRuleCall_9() { return cSetExpParserRuleCall_9; }
		
		//TupleExp
		public RuleCall getTupleExpParserRuleCall_10() { return cTupleExpParserRuleCall_10; }
		
		//MapExp
		public RuleCall getMapExpParserRuleCall_11() { return cMapExpParserRuleCall_11; }
		
		//EnumLiteralExp
		public RuleCall getEnumLiteralExpParserRuleCall_12() { return cEnumLiteralExpParserRuleCall_12; }
		
		//OclUndefinedExp
		public RuleCall getOclUndefinedExpParserRuleCall_13() { return cOclUndefinedExpParserRuleCall_13; }
		
		//IfExp
		public RuleCall getIfExpParserRuleCall_14() { return cIfExpParserRuleCall_14; }
		
		//BraceExp
		public RuleCall getBraceExpParserRuleCall_15() { return cBraceExpParserRuleCall_15; }
		
		//OclModelElementExp
		public RuleCall getOclModelElementExpParserRuleCall_16() { return cOclModelElementExpParserRuleCall_16; }
	}
	public class AuxiliaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Auxiliary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIteratorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Auxiliary :Iterator|LocalVariable|Parameter;
		@Override public ParserRule getRule() { return rule; }
		
		//Iterator|LocalVariable|Parameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Iterator
		public RuleCall getIteratorParserRuleCall_0() { return cIteratorParserRuleCall_0; }
		
		//LocalVariable
		public RuleCall getLocalVariableParserRuleCall_1() { return cLocalVariableParserRuleCall_1; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_2() { return cParameterParserRuleCall_2; }
	}
	public class VariableExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.VariableExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cReferredVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cReferredVariableAuxiliaryCrossReference_0_0 = (CrossReference)cReferredVariableAssignment_0.eContents().get(0);
		private final RuleCall cReferredVariableAuxiliaryIDTerminalRuleCall_0_0_1 = (RuleCall)cReferredVariableAuxiliaryCrossReference_0_0.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableExp:
		//    //name= ID|
		//    referredVariable=[Auxiliary]|
		//    VariableDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////name= ID|
		//referredVariable=[Auxiliary]|
		//VariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////name= ID|
		//referredVariable=[Auxiliary]
		public Assignment getReferredVariableAssignment_0() { return cReferredVariableAssignment_0; }
		
		//[Auxiliary]
		public CrossReference getReferredVariableAuxiliaryCrossReference_0_0() { return cReferredVariableAuxiliaryCrossReference_0_0; }
		
		//ID
		public RuleCall getReferredVariableAuxiliaryIDTerminalRuleCall_0_0_1() { return cReferredVariableAuxiliaryIDTerminalRuleCall_0_0_1; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_1() { return cVariableDeclarationParserRuleCall_1; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.VariableDeclaration");
		private final Assignment cVarNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cVarNameThisModuleKeyword_0 = (Keyword)cVarNameAssignment.eContents().get(0);
		
		//VariableDeclaration:
		//    varName='thisModule'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//varName='thisModule'
		public Assignment getVarNameAssignment() { return cVarNameAssignment; }
		
		//'thisModule'
		public Keyword getVarNameThisModuleKeyword_0() { return cVarNameThisModuleKeyword_0; }
	}
	public class SuperExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.SuperExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuperExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSuperKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SuperExp :
		//    {SuperExp}    'super'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SuperExp}	'super'
		public Group getGroup() { return cGroup; }
		
		//{SuperExp}
		public Action getSuperExpAction_0() { return cSuperExpAction_0; }
		
		//'super'
		public Keyword getSuperKeyword_1() { return cSuperKeyword_1; }
	}
	public class SelfExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.SelfExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelfExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSelfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SelfExp :
		//    {SelfExp}    'self'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SelfExp}	'self'
		public Group getGroup() { return cGroup; }
		
		//{SelfExp}
		public Action getSelfExpAction_0() { return cSelfExpAction_0; }
		
		//'self'
		public Keyword getSelfKeyword_1() { return cSelfKeyword_1; }
	}
	public class StringExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.StringExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStringSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStringSymbolSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringSymbolAssignment_1.eContents().get(0);
		
		//StringExp :
		//    {StringExp}
		//    stringSymbol=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringExp}
		//stringSymbol=STRING
		public Group getGroup() { return cGroup; }
		
		//{StringExp}
		public Action getStringExpAction_0() { return cStringExpAction_0; }
		
		//stringSymbol=STRING
		public Assignment getStringSymbolAssignment_1() { return cStringSymbolAssignment_1; }
		
		//STRING
		public RuleCall getStringSymbolSTRINGTerminalRuleCall_1_0() { return cStringSymbolSTRINGTerminalRuleCall_1_0; }
	}
	public class NumericExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.NumericExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRealExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericExp:
		//    RealExp|IntegerExp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RealExp|IntegerExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RealExp
		public RuleCall getRealExpParserRuleCall_0() { return cRealExpParserRuleCall_0; }
		
		//IntegerExp
		public RuleCall getIntegerExpParserRuleCall_1() { return cIntegerExpParserRuleCall_1; }
	}
	public class RealExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.RealExp");
		private final Assignment cRealSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRealSymbolDOUBLETerminalRuleCall_0 = (RuleCall)cRealSymbolAssignment.eContents().get(0);
		
		//RealExp : realSymbol=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//realSymbol=DOUBLE
		public Assignment getRealSymbolAssignment() { return cRealSymbolAssignment; }
		
		//DOUBLE
		public RuleCall getRealSymbolDOUBLETerminalRuleCall_0() { return cRealSymbolDOUBLETerminalRuleCall_0; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cEXT_INTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//REAL hidden(): INT '.' (EXT_INT | INT);
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' (EXT_INT | INT)
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//(EXT_INT | INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//EXT_INT
		public RuleCall getEXT_INTTerminalRuleCall_2_0() { return cEXT_INTTerminalRuleCall_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class IntegerExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.IntegerExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIntegerSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntegerSymbolINTTerminalRuleCall_1_0 = (RuleCall)cIntegerSymbolAssignment_1.eContents().get(0);
		
		//IntegerExp:
		//    {IntegerExp}
		//    integerSymbol=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerExp}
		//integerSymbol=INT
		public Group getGroup() { return cGroup; }
		
		//{IntegerExp}
		public Action getIntegerExpAction_0() { return cIntegerExpAction_0; }
		
		//integerSymbol=INT
		public Assignment getIntegerSymbolAssignment_1() { return cIntegerSymbolAssignment_1; }
		
		//INT
		public RuleCall getIntegerSymbolINTTerminalRuleCall_1_0() { return cIntegerSymbolINTTerminalRuleCall_1_0; }
	}
	public class BagExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.BagExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBagExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBagKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BagExp:
		//    {BagExp}
		//    'Bag' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BagExp}
		//'Bag' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{BagExp}
		public Action getBagExpAction_0() { return cBagExpAction_0; }
		
		//'Bag'
		public Keyword getBagKeyword_1() { return cBagKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(elements+=OclExpression ("," elements+=OclExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_0_0() { return cElementsOclExpressionParserRuleCall_3_0_0; }
		
		//("," elements+=OclExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_1_1_0() { return cElementsOclExpressionParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class OrderedSetExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OrderedSetExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrderedSetExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrderedSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OrderedSetExp:
		//    {OrderedSetExp}
		//    'OrderedSet' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{OrderedSetExp}
		//'OrderedSet' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{OrderedSetExp}
		public Action getOrderedSetExpAction_0() { return cOrderedSetExpAction_0; }
		
		//'OrderedSet'
		public Keyword getOrderedSetKeyword_1() { return cOrderedSetKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(elements+=OclExpression ("," elements+=OclExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_0_0() { return cElementsOclExpressionParserRuleCall_3_0_0; }
		
		//("," elements+=OclExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_1_1_0() { return cElementsOclExpressionParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SequenceExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.SequenceExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSequenceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SequenceExp:
		//    {SequenceExp}
		//    'Sequence' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SequenceExp}
		//'Sequence' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{SequenceExp}
		public Action getSequenceExpAction_0() { return cSequenceExpAction_0; }
		
		//'Sequence'
		public Keyword getSequenceKeyword_1() { return cSequenceKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(elements+=OclExpression ("," elements+=OclExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_0_0() { return cElementsOclExpressionParserRuleCall_3_0_0; }
		
		//("," elements+=OclExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_1_1_0() { return cElementsOclExpressionParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SetExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.SetExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SetExp:
		//    {SetExp}
		//    'Set' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SetExp}
		//'Set' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{SetExp}
		public Action getSetExpAction_0() { return cSetExpAction_0; }
		
		//'Set'
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(elements+=OclExpression ("," elements+=OclExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_0_0() { return cElementsOclExpressionParserRuleCall_3_0_0; }
		
		//("," elements+=OclExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_1_1_0() { return cElementsOclExpressionParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TupleExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.TupleExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTupleExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTupleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTuplePartAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTuplePartTuplePartParserRuleCall_3_0_0 = (RuleCall)cTuplePartAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTuplePartAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTuplePartTuplePartParserRuleCall_3_1_1_0 = (RuleCall)cTuplePartAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TupleExp:
		//    {TupleExp}
		//    'Tuple' '{' (tuplePart+=TuplePart ("," tuplePart+=TuplePart)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TupleExp}
		//'Tuple' '{' (tuplePart+=TuplePart ("," tuplePart+=TuplePart)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{TupleExp}
		public Action getTupleExpAction_0() { return cTupleExpAction_0; }
		
		//'Tuple'
		public Keyword getTupleKeyword_1() { return cTupleKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(tuplePart+=TuplePart ("," tuplePart+=TuplePart)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//tuplePart+=TuplePart
		public Assignment getTuplePartAssignment_3_0() { return cTuplePartAssignment_3_0; }
		
		//TuplePart
		public RuleCall getTuplePartTuplePartParserRuleCall_3_0_0() { return cTuplePartTuplePartParserRuleCall_3_0_0; }
		
		//("," tuplePart+=TuplePart)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//tuplePart+=TuplePart
		public Assignment getTuplePartAssignment_3_1_1() { return cTuplePartAssignment_3_1_1; }
		
		//TuplePart
		public RuleCall getTuplePartTuplePartParserRuleCall_3_1_1_0() { return cTuplePartTuplePartParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TuplePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.TuplePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cVarNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeOclTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitExpressionOclExpressionParserRuleCall_3_0 = (RuleCall)cInitExpressionAssignment_3.eContents().get(0);
		
		//TuplePart:
		//    varName=STRING (':' type=OclType)? '=' initExpression=OclExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//varName=STRING (':' type=OclType)? '=' initExpression=OclExpression
		public Group getGroup() { return cGroup; }
		
		//varName=STRING
		public Assignment getVarNameAssignment_0() { return cVarNameAssignment_0; }
		
		//STRING
		public RuleCall getVarNameSTRINGTerminalRuleCall_0_0() { return cVarNameSTRINGTerminalRuleCall_0_0; }
		
		//(':' type=OclType)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//type=OclType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_1_1_0() { return cTypeOclTypeParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//initExpression=OclExpression
		public Assignment getInitExpressionAssignment_3() { return cInitExpressionAssignment_3; }
		
		//OclExpression
		public RuleCall getInitExpressionOclExpressionParserRuleCall_3_0() { return cInitExpressionOclExpressionParserRuleCall_3_0; }
	}
	public class MapExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.MapExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMapExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsMapElementParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsMapElementParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MapExp :
		//    {MapExp}
		//    'Map' '{' (elements+=MapElement (',' elements+=MapElement)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{MapExp}
		//'Map' '{' (elements+=MapElement (',' elements+=MapElement)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{MapExp}
		public Action getMapExpAction_0() { return cMapExpAction_0; }
		
		//'Map'
		public Keyword getMapKeyword_1() { return cMapKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(elements+=MapElement (',' elements+=MapElement)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//elements+=MapElement
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }
		
		//MapElement
		public RuleCall getElementsMapElementParserRuleCall_3_0_0() { return cElementsMapElementParserRuleCall_3_0_0; }
		
		//(',' elements+=MapElement)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//elements+=MapElement
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }
		
		//MapElement
		public RuleCall getElementsMapElementParserRuleCall_3_1_1_0() { return cElementsMapElementParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MapElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.MapElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyOclExpressionParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueOclExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MapElement :
		//    '(' key=OclExpression ',' value=OclExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' key=OclExpression ',' value=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//key=OclExpression
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//OclExpression
		public RuleCall getKeyOclExpressionParserRuleCall_1_0() { return cKeyOclExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//value=OclExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//OclExpression
		public RuleCall getValueOclExpressionParserRuleCall_3_0() { return cValueOclExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EnumLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.EnumLiteralExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//EnumLiteralExp :
		//    "#" (name=STRING|name=ID)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"#" (name=STRING|name=ID)
		public Group getGroup() { return cGroup; }
		
		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//(name=STRING|name=ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=STRING
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_0() { return cNameSTRINGTerminalRuleCall_1_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}
	public class OclUndefinedExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclUndefinedExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOclUndefinedExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOclUndefinedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OclUndefinedExp :
		//    {OclUndefinedExp}
		//    'OclUndefined'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{OclUndefinedExp}
		//'OclUndefined'
		public Group getGroup() { return cGroup; }
		
		//{OclUndefinedExp}
		public Action getOclUndefinedExpAction_0() { return cOclUndefinedExpAction_0; }
		
		//'OclUndefined'
		public Keyword getOclUndefinedKeyword_1() { return cOclUndefinedKeyword_1; }
	}
	public class LetExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.LetExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableLocalVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIn_Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIn_OclExpressionParserRuleCall_3_0 = (RuleCall)cIn_Assignment_3.eContents().get(0);
		
		//LetExp :
		//    'let' variable=LocalVariable 'in' in_=OclExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' variable=LocalVariable 'in' in_=OclExpression
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//variable=LocalVariable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//LocalVariable
		public RuleCall getVariableLocalVariableParserRuleCall_1_0() { return cVariableLocalVariableParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//in_=OclExpression
		public Assignment getIn_Assignment_3() { return cIn_Assignment_3; }
		
		//OclExpression
		public RuleCall getIn_OclExpressionParserRuleCall_3_0() { return cIn_OclExpressionParserRuleCall_3_0; }
	}
	public class IfExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.IfExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionOclExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionOclExpressionParserRuleCall_3_0 = (RuleCall)cThenExpressionAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseExpressionOclExpressionParserRuleCall_5_0 = (RuleCall)cElseExpressionAssignment_5.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfExp :
		//    'if' condition=OclExpression 'then' thenExpression=OclExpression 'else' elseExpression=OclExpression 'endif'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=OclExpression 'then' thenExpression=OclExpression 'else' elseExpression=OclExpression 'endif'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=OclExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//OclExpression
		public RuleCall getConditionOclExpressionParserRuleCall_1_0() { return cConditionOclExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//thenExpression=OclExpression
		public Assignment getThenExpressionAssignment_3() { return cThenExpressionAssignment_3; }
		
		//OclExpression
		public RuleCall getThenExpressionOclExpressionParserRuleCall_3_0() { return cThenExpressionOclExpressionParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//elseExpression=OclExpression
		public Assignment getElseExpressionAssignment_5() { return cElseExpressionAssignment_5; }
		
		//OclExpression
		public RuleCall getElseExpressionOclExpressionParserRuleCall_5_0() { return cElseExpressionOclExpressionParserRuleCall_5_0; }
		
		//'endif'
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
	}
	public class BraceExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.BraceExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpOclExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BraceExp :
		//    '(' exp=OclExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' exp=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//exp=OclExpression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//OclExpression
		public RuleCall getExpOclExpressionParserRuleCall_1_0() { return cExpOclExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class BooleanExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.BooleanExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBooleanSymbolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cBooleanSymbolTrueKeyword_0_0 = (Keyword)cBooleanSymbolAssignment_0.eContents().get(0);
		private final Assignment cBooleanSymbolAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cBooleanSymbolFalseKeyword_1_0 = (Keyword)cBooleanSymbolAssignment_1.eContents().get(0);
		
		////CollectionPart:
		////    CollectionRange|CollectionItem
		////    ;
		////
		////CollectionRange:
		////    first=OclExpression '..' last=OclExpression
		////    ;
		////
		////CollectionItem:
		////    item=OclExpression
		////    ;
		//BooleanExp:
		//    booleanSymbol= 'true'|booleanSymbol= 'false'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//booleanSymbol= 'true'|booleanSymbol= 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//booleanSymbol= 'true'
		public Assignment getBooleanSymbolAssignment_0() { return cBooleanSymbolAssignment_0; }
		
		//'true'
		public Keyword getBooleanSymbolTrueKeyword_0_0() { return cBooleanSymbolTrueKeyword_0_0; }
		
		//booleanSymbol= 'false'
		public Assignment getBooleanSymbolAssignment_1() { return cBooleanSymbolAssignment_1; }
		
		//'false'
		public Keyword getBooleanSymbolFalseKeyword_1_0() { return cBooleanSymbolFalseKeyword_1_0; }
	}
	public class PropertyCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.PropertyCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNavigationOrAttributeCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIterateExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIteratorExpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCollectionOperationCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//PropertyCall:
		//    OperationCall|NavigationOrAttributeCall|IterateExp|IteratorExp|CollectionOperationCall
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationCall|NavigationOrAttributeCall|IterateExp|IteratorExp|CollectionOperationCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationCall
		public RuleCall getOperationCallParserRuleCall_0() { return cOperationCallParserRuleCall_0; }
		
		//NavigationOrAttributeCall
		public RuleCall getNavigationOrAttributeCallParserRuleCall_1() { return cNavigationOrAttributeCallParserRuleCall_1; }
		
		//IterateExp
		public RuleCall getIterateExpParserRuleCall_2() { return cIterateExpParserRuleCall_2; }
		
		//IteratorExp
		public RuleCall getIteratorExpParserRuleCall_3() { return cIteratorExpParserRuleCall_3; }
		
		//CollectionOperationCall
		public RuleCall getCollectionOperationCallParserRuleCall_4() { return cCollectionOperationCallParserRuleCall_4; }
	}
	public class OperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOperationNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOperationNameSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cOperationNameAssignment_1_0.eContents().get(0);
		private final Assignment cOperationNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOperationNameIDTerminalRuleCall_1_1_0 = (RuleCall)cOperationNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OperationCall:
		//    '.' (operationName=STRING|operationName=ID) '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' (operationName=STRING|operationName=ID) '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//(operationName=STRING|operationName=ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//operationName=STRING
		public Assignment getOperationNameAssignment_1_0() { return cOperationNameAssignment_1_0; }
		
		//STRING
		public RuleCall getOperationNameSTRINGTerminalRuleCall_1_0_0() { return cOperationNameSTRINGTerminalRuleCall_1_0_0; }
		
		//operationName=ID
		public Assignment getOperationNameAssignment_1_1() { return cOperationNameAssignment_1_1; }
		
		//ID
		public RuleCall getOperationNameIDTerminalRuleCall_1_1_0() { return cOperationNameIDTerminalRuleCall_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(arguments+=OclExpression (',' arguments+=OclExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }
		
		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_3_0_0() { return cArgumentsOclExpressionParserRuleCall_3_0_0; }
		
		//(',' arguments+=OclExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_3_1_1_0() { return cArgumentsOclExpressionParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class NavigationOrAttributeCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.NavigationOrAttributeCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//NavigationOrAttributeCall :
		//    '.' (name=STRING|name=ID)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' (name=STRING|name=ID)
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//(name=STRING|name=ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=STRING
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_0() { return cNameSTRINGTerminalRuleCall_1_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}
	public class IterateExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.IterateExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIterateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIteratorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIteratorsIteratorParserRuleCall_3_0 = (RuleCall)cIteratorsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIteratorsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIteratorsIteratorParserRuleCall_4_1_0 = (RuleCall)cIteratorsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cResultAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cResultLocalVariableParserRuleCall_6_0 = (RuleCall)cResultAssignment_6.eContents().get(0);
		private final Keyword cVerticalLineKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyOclExpressionParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//IterateExp:
		//    '->' 'iterate' '(' iterators+=Iterator (',' iterators+=Iterator)* ';' result=LocalVariable '|' body=OclExpression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'->' 'iterate' '(' iterators+=Iterator (',' iterators+=Iterator)* ';' result=LocalVariable '|' body=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//'iterate'
		public Keyword getIterateKeyword_1() { return cIterateKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//iterators+=Iterator
		public Assignment getIteratorsAssignment_3() { return cIteratorsAssignment_3; }
		
		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_3_0() { return cIteratorsIteratorParserRuleCall_3_0; }
		
		//(',' iterators+=Iterator)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//iterators+=Iterator
		public Assignment getIteratorsAssignment_4_1() { return cIteratorsAssignment_4_1; }
		
		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_4_1_0() { return cIteratorsIteratorParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//result=LocalVariable
		public Assignment getResultAssignment_6() { return cResultAssignment_6; }
		
		//LocalVariable
		public RuleCall getResultLocalVariableParserRuleCall_6_0() { return cResultLocalVariableParserRuleCall_6_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_7() { return cVerticalLineKeyword_7; }
		
		//body=OclExpression
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_8_0() { return cBodyOclExpressionParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class IteratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Iterator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeOclTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//Iterator :
		//    name=ID (':' type=OclType)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (':' type=OclType)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(':' type=OclType)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//type=OclType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_1_1_0() { return cTypeOclTypeParserRuleCall_1_1_0; }
	}
	public class IteratorExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.IteratorExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIteratorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIteratorsIteratorParserRuleCall_3_0 = (RuleCall)cIteratorsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIteratorsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIteratorsIteratorParserRuleCall_4_1_0 = (RuleCall)cIteratorsAssignment_4_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyOclExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IteratorExp :
		//    '->' name=ID '(' iterators+=Iterator (',' iterators+=Iterator)* '|' body=OclExpression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'->' name=ID '(' iterators+=Iterator (',' iterators+=Iterator)* '|' body=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//iterators+=Iterator
		public Assignment getIteratorsAssignment_3() { return cIteratorsAssignment_3; }
		
		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_3_0() { return cIteratorsIteratorParserRuleCall_3_0; }
		
		//(',' iterators+=Iterator)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//iterators+=Iterator
		public Assignment getIteratorsAssignment_4_1() { return cIteratorsAssignment_4_1; }
		
		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_4_1_0() { return cIteratorsIteratorParserRuleCall_4_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_5() { return cVerticalLineKeyword_5; }
		
		//body=OclExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_6_0() { return cBodyOclExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class CollectionOperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.CollectionOperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationNameIDTerminalRuleCall_1_0 = (RuleCall)cOperationNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CollectionOperationCall :
		//    '->' operationName=ID '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'->' operationName=ID '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//operationName=ID
		public Assignment getOperationNameAssignment_1() { return cOperationNameAssignment_1; }
		
		//ID
		public RuleCall getOperationNameIDTerminalRuleCall_1_0() { return cOperationNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(arguments+=OclExpression (',' arguments+=OclExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }
		
		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_3_0_0() { return cArgumentsOclExpressionParserRuleCall_3_0_0; }
		
		//(',' arguments+=OclExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_3_1_1_0() { return cArgumentsOclExpressionParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LocalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.LocalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeOclTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitExpressionOclExpressionParserRuleCall_3_0 = (RuleCall)cInitExpressionAssignment_3.eContents().get(0);
		
		//LocalVariable :
		//    name=ID (':' type=OclType)? '=' initExpression=OclExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (':' type=OclType)? '=' initExpression=OclExpression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(':' type=OclType)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//type=OclType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_1_1_0() { return cTypeOclTypeParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//initExpression=OclExpression
		public Assignment getInitExpressionAssignment_3() { return cInitExpressionAssignment_3; }
		
		//OclExpression
		public RuleCall getInitExpressionOclExpressionParserRuleCall_3_0() { return cInitExpressionOclExpressionParserRuleCall_3_0; }
	}
	public class OclTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOclAnyTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTupleTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOclModelElementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMapTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOclType_abstractContentsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//OclType :
		//    //oclModelElement |
		//    //{OclType} name=STRING
		//    CollectionType
		//    | Primitive
		//    | OclAnyType
		//    | TupleType
		//    | OclModelElement
		//    | MapType
		//    // | LambdaType
		//    // | EnvType
		//    | OclType_abstractContents
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////oclModelElement |
		////{OclType} name=STRING
		//CollectionType
		//| Primitive
		//| OclAnyType
		//| TupleType
		//| OclModelElement
		//| MapType
		//// | LambdaType
		//// | EnvType
		//| OclType_abstractContents
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////oclModelElement |
		////{OclType} name=STRING
		//CollectionType
		public RuleCall getCollectionTypeParserRuleCall_0() { return cCollectionTypeParserRuleCall_0; }
		
		//Primitive
		public RuleCall getPrimitiveParserRuleCall_1() { return cPrimitiveParserRuleCall_1; }
		
		//OclAnyType
		public RuleCall getOclAnyTypeParserRuleCall_2() { return cOclAnyTypeParserRuleCall_2; }
		
		//TupleType
		public RuleCall getTupleTypeParserRuleCall_3() { return cTupleTypeParserRuleCall_3; }
		
		//OclModelElement
		public RuleCall getOclModelElementParserRuleCall_4() { return cOclModelElementParserRuleCall_4; }
		
		//MapType
		public RuleCall getMapTypeParserRuleCall_5() { return cMapTypeParserRuleCall_5; }
		
		//OclType_abstractContents
		public RuleCall getOclType_abstractContentsParserRuleCall_6() { return cOclType_abstractContentsParserRuleCall_6; }
	}
	public class CollectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.CollectionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBagTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrderedSetTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSequenceTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSetTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//CollectionType:
		//    BagType
		//    | OrderedSetType
		//    | SequenceType
		//    | SetType
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//BagType
		//| OrderedSetType
		//| SequenceType
		//| SetType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BagType
		public RuleCall getBagTypeParserRuleCall_0() { return cBagTypeParserRuleCall_0; }
		
		//OrderedSetType
		public RuleCall getOrderedSetTypeParserRuleCall_1() { return cOrderedSetTypeParserRuleCall_1; }
		
		//SequenceType
		public RuleCall getSequenceTypeParserRuleCall_2() { return cSequenceTypeParserRuleCall_2; }
		
		//SetType
		public RuleCall getSetTypeParserRuleCall_3() { return cSetTypeParserRuleCall_3; }
	}
	public class BagTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.BagType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBagKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeOclTypeParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BagType :
		//    'Bag' '(' elementType=OclType ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Bag' '(' elementType=OclType ')'
		public Group getGroup() { return cGroup; }
		
		//'Bag'
		public Keyword getBagKeyword_0() { return cBagKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elementType=OclType
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//OclType
		public RuleCall getElementTypeOclTypeParserRuleCall_2_0() { return cElementTypeOclTypeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OrderedSetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OrderedSetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrderedSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeOclTypeParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OrderedSetType :
		//    'OrderedSet' '(' elementType=OclType ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'OrderedSet' '(' elementType=OclType ')'
		public Group getGroup() { return cGroup; }
		
		//'OrderedSet'
		public Keyword getOrderedSetKeyword_0() { return cOrderedSetKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elementType=OclType
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//OclType
		public RuleCall getElementTypeOclTypeParserRuleCall_2_0() { return cElementTypeOclTypeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SequenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.SequenceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeOclTypeParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SequenceType :
		//    'Sequence' '(' elementType=OclType ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sequence' '(' elementType=OclType ')'
		public Group getGroup() { return cGroup; }
		
		//'Sequence'
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elementType=OclType
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//OclType
		public RuleCall getElementTypeOclTypeParserRuleCall_2_0() { return cElementTypeOclTypeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.SetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeOclTypeParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetType :
		//    'Set' '(' elementType=OclType ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Set' '(' elementType=OclType ')'
		public Group getGroup() { return cGroup; }
		
		//'Set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elementType=OclType
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//OclType
		public RuleCall getElementTypeOclTypeParserRuleCall_2_0() { return cElementTypeOclTypeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumericTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primitive:
		//    StringType
		//    | BooleanType
		//    | NumericType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StringType
		//| BooleanType
		//| NumericType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_0() { return cStringTypeParserRuleCall_0; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_1() { return cBooleanTypeParserRuleCall_1; }
		
		//NumericType
		public RuleCall getNumericTypeParserRuleCall_2() { return cNumericTypeParserRuleCall_2; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringType:
		//    {StringType}'String'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType}'String'
		public Group getGroup() { return cGroup; }
		
		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//'String'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanType:
		//    {BooleanType}'Boolean'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanType}'Boolean'
		public Group getGroup() { return cGroup; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
	}
	public class NumericTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.NumericType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericType:
		//    IntegerType
		//    |RealType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerType
		//|RealType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_0() { return cIntegerTypeParserRuleCall_0; }
		
		//RealType
		public RuleCall getRealTypeParserRuleCall_1() { return cRealTypeParserRuleCall_1; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.IntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntegerType:
		//    {IntegerType}'Integer'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType}'Integer'
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
	}
	public class RealTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.RealType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRealKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RealType:
		//    {RealType}'Real'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RealType}'Real'
		public Group getGroup() { return cGroup; }
		
		//{RealType}
		public Action getRealTypeAction_0() { return cRealTypeAction_0; }
		
		//'Real'
		public Keyword getRealKeyword_1() { return cRealKeyword_1; }
	}
	public class OclAnyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclAnyType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOclAnyTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOclAnyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OclAnyType :
		//    {OclAnyType}'OclAny'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{OclAnyType}'OclAny'
		public Group getGroup() { return cGroup; }
		
		//{OclAnyType}
		public Action getOclAnyTypeAction_0() { return cOclAnyTypeAction_0; }
		
		//'OclAny'
		public Keyword getOclAnyKeyword_1() { return cOclAnyKeyword_1; }
	}
	public class OclType_abstractContentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclType_abstractContents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOclTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOclTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OclType_abstractContents  returns OclType :
		//    {OclType}
		//    'OclType'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{OclType}
		//'OclType'
		public Group getGroup() { return cGroup; }
		
		//{OclType}
		public Action getOclTypeAction_0() { return cOclTypeAction_0; }
		
		//'OclType'
		public Keyword getOclTypeKeyword_1() { return cOclTypeKeyword_1; }
	}
	public class TupleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.TupleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTupleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cTupleTypeKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cTupleKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cAttributesTupleTypeAttributeParserRuleCall_3_0_0 = (RuleCall)cAttributesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cAttributesTupleTypeAttributeParserRuleCall_3_1_1_0 = (RuleCall)cAttributesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TupleType :
		//    {TupleType}
		//     ('TupleType' | 'Tuple') '(' (attributes+=TupleTypeAttribute (',' attributes+=TupleTypeAttribute)*)? ')'
		//     ;
		@Override public ParserRule getRule() { return rule; }
		
		//{TupleType}
		// ('TupleType' | 'Tuple') '(' (attributes+=TupleTypeAttribute (',' attributes+=TupleTypeAttribute)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{TupleType}
		public Action getTupleTypeAction_0() { return cTupleTypeAction_0; }
		
		//('TupleType' | 'Tuple')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'TupleType'
		public Keyword getTupleTypeKeyword_1_0() { return cTupleTypeKeyword_1_0; }
		
		//'Tuple'
		public Keyword getTupleKeyword_1_1() { return cTupleKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(attributes+=TupleTypeAttribute (',' attributes+=TupleTypeAttribute)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//attributes+=TupleTypeAttribute
		public Assignment getAttributesAssignment_3_0() { return cAttributesAssignment_3_0; }
		
		//TupleTypeAttribute
		public RuleCall getAttributesTupleTypeAttributeParserRuleCall_3_0_0() { return cAttributesTupleTypeAttributeParserRuleCall_3_0_0; }
		
		//(',' attributes+=TupleTypeAttribute)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//attributes+=TupleTypeAttribute
		public Assignment getAttributesAssignment_3_1_1() { return cAttributesAssignment_3_1_1; }
		
		//TupleTypeAttribute
		public RuleCall getAttributesTupleTypeAttributeParserRuleCall_3_1_1_0() { return cAttributesTupleTypeAttributeParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TupleTypeAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.TupleTypeAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOclTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TupleTypeAttribute : name=ID ':' type=OclType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=OclType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=OclType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_2_0() { return cTypeOclTypeParserRuleCall_2_0; }
	}
	public class OclModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclModelElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModelImportCrossReference_0_0 = (CrossReference)cModelAssignment_0.eContents().get(0);
		private final RuleCall cModelImportIDTerminalRuleCall_0_0_1 = (RuleCall)cModelImportCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//OclModelElement: model=[Import]'!'name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//model=[Import]'!'name=ID
		public Group getGroup() { return cGroup; }
		
		//model=[Import]
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }
		
		//[Import]
		public CrossReference getModelImportCrossReference_0_0() { return cModelImportCrossReference_0_0; }
		
		//ID
		public RuleCall getModelImportIDTerminalRuleCall_0_0_1() { return cModelImportIDTerminalRuleCall_0_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.MapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyTypeOclTypeParserRuleCall_2_0 = (RuleCall)cKeyTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueTypeOclTypeParserRuleCall_4_0 = (RuleCall)cValueTypeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		// //[ecore::EClass|ID];
		//MapType :
		//    'Map' '(' keyType=OclType ',' valueType=OclType ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Map' '(' keyType=OclType ',' valueType=OclType ')'
		public Group getGroup() { return cGroup; }
		
		//'Map'
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//keyType=OclType
		public Assignment getKeyTypeAssignment_2() { return cKeyTypeAssignment_2; }
		
		//OclType
		public RuleCall getKeyTypeOclTypeParserRuleCall_2_0() { return cKeyTypeOclTypeParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//valueType=OclType
		public Assignment getValueTypeAssignment_4() { return cValueTypeAssignment_4; }
		
		//OclType
		public RuleCall getValueTypeOclTypeParserRuleCall_4_0() { return cValueTypeOclTypeParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName: ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ModuleElements pModule;
	private final ImportElements pImport;
	private final ModuleElementElements pModuleElement;
	private final OclModuleElementElements pOclModuleElement;
	private final OclFeatureDefinitionElements pOclFeatureDefinition;
	private final AttributeElements pAttribute;
	private final OperationElements pOperation;
	private final ParameterElements pParameter;
	private final OclInvariantElements pOclInvariant;
	private final OclExpressionElements pOclExpression;
	private final OclModelElementExpElements pOclModelElementExp;
	private final TEMPBIOPElements pTEMPBIOP;
	private final OperatorCallExpElements pOperatorCallExp;
	private final BoolOpCallExpElements pBoolOpCallExp;
	private final BOOLOPElements pBOOLOP;
	private final EqOpCallExpElements pEqOpCallExp;
	private final EQOPElements pEQOP;
	private final RelOpCallExpElements pRelOpCallExp;
	private final RELOPElements pRELOP;
	private final AddOpCallExpElements pAddOpCallExp;
	private final ADDOPElements pADDOP;
	private final IntOpCallExpElements pIntOpCallExp;
	private final INTOPElements pINTOP;
	private final MulOpCallExpElements pMulOpCallExp;
	private final MULOPElements pMULOP;
	private final NotOpCallExpElements pNotOpCallExp;
	private final UnaryOPElements pUnaryOP;
	private final NOTOPElements pNOTOP;
	private final UNARYTEMPOPElements pUNARYTEMPOP;
	private final PropertyCallExpElements pPropertyCallExp;
	private final Primary_OclExpressionElements pPrimary_OclExpression;
	private final AuxiliaryElements pAuxiliary;
	private final VariableExpElements pVariableExp;
	private final VariableDeclarationElements pVariableDeclaration;
	private final SuperExpElements pSuperExp;
	private final SelfExpElements pSelfExp;
	private final StringExpElements pStringExp;
	private final NumericExpElements pNumericExp;
	private final RealExpElements pRealExp;
	private final REALElements pREAL;
	private final TerminalRule tEXT_INT;
	private final IntegerExpElements pIntegerExp;
	private final BagExpElements pBagExp;
	private final OrderedSetExpElements pOrderedSetExp;
	private final SequenceExpElements pSequenceExp;
	private final SetExpElements pSetExp;
	private final TupleExpElements pTupleExp;
	private final TuplePartElements pTuplePart;
	private final MapExpElements pMapExp;
	private final MapElementElements pMapElement;
	private final EnumLiteralExpElements pEnumLiteralExp;
	private final OclUndefinedExpElements pOclUndefinedExp;
	private final LetExpElements pLetExp;
	private final IfExpElements pIfExp;
	private final BraceExpElements pBraceExp;
	private final BooleanExpElements pBooleanExp;
	private final PropertyCallElements pPropertyCall;
	private final OperationCallElements pOperationCall;
	private final NavigationOrAttributeCallElements pNavigationOrAttributeCall;
	private final IterateExpElements pIterateExp;
	private final IteratorElements pIterator;
	private final IteratorExpElements pIteratorExp;
	private final CollectionOperationCallElements pCollectionOperationCall;
	private final LocalVariableElements pLocalVariable;
	private final OclTypeElements pOclType;
	private final CollectionTypeElements pCollectionType;
	private final BagTypeElements pBagType;
	private final OrderedSetTypeElements pOrderedSetType;
	private final SequenceTypeElements pSequenceType;
	private final SetTypeElements pSetType;
	private final PrimitiveElements pPrimitive;
	private final StringTypeElements pStringType;
	private final BooleanTypeElements pBooleanType;
	private final NumericTypeElements pNumericType;
	private final IntegerTypeElements pIntegerType;
	private final RealTypeElements pRealType;
	private final OclAnyTypeElements pOclAnyType;
	private final OclType_abstractContentsElements pOclType_abstractContents;
	private final TupleTypeElements pTupleType;
	private final TupleTypeAttributeElements pTupleTypeAttribute;
	private final OclModelElementElements pOclModelElement;
	private final MapTypeElements pMapType;
	private final TerminalRule tDOUBLE;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OclGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModule = new ModuleElements();
		this.pImport = new ImportElements();
		this.pModuleElement = new ModuleElementElements();
		this.pOclModuleElement = new OclModuleElementElements();
		this.pOclFeatureDefinition = new OclFeatureDefinitionElements();
		this.pAttribute = new AttributeElements();
		this.pOperation = new OperationElements();
		this.pParameter = new ParameterElements();
		this.pOclInvariant = new OclInvariantElements();
		this.pOclExpression = new OclExpressionElements();
		this.pOclModelElementExp = new OclModelElementExpElements();
		this.pTEMPBIOP = new TEMPBIOPElements();
		this.pOperatorCallExp = new OperatorCallExpElements();
		this.pBoolOpCallExp = new BoolOpCallExpElements();
		this.pBOOLOP = new BOOLOPElements();
		this.pEqOpCallExp = new EqOpCallExpElements();
		this.pEQOP = new EQOPElements();
		this.pRelOpCallExp = new RelOpCallExpElements();
		this.pRELOP = new RELOPElements();
		this.pAddOpCallExp = new AddOpCallExpElements();
		this.pADDOP = new ADDOPElements();
		this.pIntOpCallExp = new IntOpCallExpElements();
		this.pINTOP = new INTOPElements();
		this.pMulOpCallExp = new MulOpCallExpElements();
		this.pMULOP = new MULOPElements();
		this.pNotOpCallExp = new NotOpCallExpElements();
		this.pUnaryOP = new UnaryOPElements();
		this.pNOTOP = new NOTOPElements();
		this.pUNARYTEMPOP = new UNARYTEMPOPElements();
		this.pPropertyCallExp = new PropertyCallExpElements();
		this.pPrimary_OclExpression = new Primary_OclExpressionElements();
		this.pAuxiliary = new AuxiliaryElements();
		this.pVariableExp = new VariableExpElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pSuperExp = new SuperExpElements();
		this.pSelfExp = new SelfExpElements();
		this.pStringExp = new StringExpElements();
		this.pNumericExp = new NumericExpElements();
		this.pRealExp = new RealExpElements();
		this.pREAL = new REALElements();
		this.tEXT_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.EXT_INT");
		this.pIntegerExp = new IntegerExpElements();
		this.pBagExp = new BagExpElements();
		this.pOrderedSetExp = new OrderedSetExpElements();
		this.pSequenceExp = new SequenceExpElements();
		this.pSetExp = new SetExpElements();
		this.pTupleExp = new TupleExpElements();
		this.pTuplePart = new TuplePartElements();
		this.pMapExp = new MapExpElements();
		this.pMapElement = new MapElementElements();
		this.pEnumLiteralExp = new EnumLiteralExpElements();
		this.pOclUndefinedExp = new OclUndefinedExpElements();
		this.pLetExp = new LetExpElements();
		this.pIfExp = new IfExpElements();
		this.pBraceExp = new BraceExpElements();
		this.pBooleanExp = new BooleanExpElements();
		this.pPropertyCall = new PropertyCallElements();
		this.pOperationCall = new OperationCallElements();
		this.pNavigationOrAttributeCall = new NavigationOrAttributeCallElements();
		this.pIterateExp = new IterateExpElements();
		this.pIterator = new IteratorElements();
		this.pIteratorExp = new IteratorExpElements();
		this.pCollectionOperationCall = new CollectionOperationCallElements();
		this.pLocalVariable = new LocalVariableElements();
		this.pOclType = new OclTypeElements();
		this.pCollectionType = new CollectionTypeElements();
		this.pBagType = new BagTypeElements();
		this.pOrderedSetType = new OrderedSetTypeElements();
		this.pSequenceType = new SequenceTypeElements();
		this.pSetType = new SetTypeElements();
		this.pPrimitive = new PrimitiveElements();
		this.pStringType = new StringTypeElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pNumericType = new NumericTypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pRealType = new RealTypeElements();
		this.pOclAnyType = new OclAnyTypeElements();
		this.pOclType_abstractContents = new OclType_abstractContentsElements();
		this.pTupleType = new TupleTypeElements();
		this.pTupleTypeAttribute = new TupleTypeAttributeElements();
		this.pOclModelElement = new OclModelElementElements();
		this.pMapType = new MapTypeElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.DOUBLE");
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.enseeiht.ocl.xtext.Ocl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Model:
	////    (imports+=Import)*
	////    eventsMappings+=EventsMapping*;
	////
	////
	////
	////EventsMapping:
	////    'events mapping' name = ID ':'
	////        dsmlStream=DSMLStream
	////        'observed as'
	////        formalStream=FormalStream
	////    'end events mapping'
	////;
	////
	////DSMLStream:
	////        elements += (StreamDSMLElement)+
	////;
	////
	////StreamDSMLElement:
	////'DSMLEvent' DSMLEvent
	////;
	////
	////DSMLEvent:
	////    name =ID ':' ecoreTypes=[Import]'.'class=[ecore::EClass|ID];
	////
	////FormalStream:
	////        elements += (StreamFormalElement)+
	////;
	////StreamFormalElement:
	////'FormalEvent'    FormalEvent
	////;
	////
	////FormalEvent:
	////    name =ID ':' ecoreTypes=[Import]'.'class=[ecore::EClass|ID] '('  body=OclExpression ')'//
	////;
	//Module:
	//    'module' name=ID ';' imports+=Import (elements+=ModuleElement)+
	//;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//Import:
	//'import' package=[ecore::EPackage|STRING] 'as'name=ID;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ModuleElement:
	//     OclModuleElement
	//;
	public ModuleElementElements getModuleElementAccess() {
		return pModuleElement;
	}
	
	public ParserRule getModuleElementRule() {
		return getModuleElementAccess().getRule();
	}
	
	//OclModuleElement:
	//    OclFeatureDefinition|OclInvariant
	//;
	public OclModuleElementElements getOclModuleElementAccess() {
		return pOclModuleElement;
	}
	
	public ParserRule getOclModuleElementRule() {
		return getOclModuleElementAccess().getRule();
	}
	
	//OclFeatureDefinition:
	//    ('context' ecoreTypes=[Import]'!'class=[ecore::EClass|QualifiedName])? 'def' ':' feature = (Attribute|Operation)
	//;
	public OclFeatureDefinitionElements getOclFeatureDefinitionAccess() {
		return pOclFeatureDefinition;
	}
	
	public ParserRule getOclFeatureDefinitionRule() {
		return getOclFeatureDefinitionAccess().getRule();
	}
	
	//Attribute :
	//    name=ID ':' type=OclType '=' initExpression=OclExpression ';'
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Operation:
	//    name=ID  '(' (parameters+=Parameter (',' parameters+=Parameter)+)? ')' ':' returnType=OclType '=' body=OclExpression ';'
	//;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Parameter:
	//    name=ID ':' type=OclType
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//OclInvariant:
	//    ('context' ecoreTypes=[Import]'!'class=[ecore::EClass|QualifiedName])? 'inv' name=ID ':' body=OclExpression //';'
	//;
	public OclInvariantElements getOclInvariantAccess() {
		return pOclInvariant;
	}
	
	public ParserRule getOclInvariantRule() {
		return getOclInvariantAccess().getRule();
	}
	
	//OclExpression returns OclExpression :
	//    //LambdaCallExp|
	//    OperatorCallExp|LetExp;
	public OclExpressionElements getOclExpressionAccess() {
		return pOclExpression;
	}
	
	public ParserRule getOclExpressionRule() {
		return getOclExpressionAccess().getRule();
	}
	
	//OclModelElementExp :
	//    model=[Import]'!'name=ID
	//;
	public OclModelElementExpElements getOclModelElementExpAccess() {
		return pOclModelElementExp;
	}
	
	public ParserRule getOclModelElementExpRule() {
		return getOclModelElementExpAccess().getRule();
	}
	
	////priority_5
	//TEMPBIOP          : 'until'|'release';
	public TEMPBIOPElements getTEMPBIOPAccess() {
		return pTEMPBIOP;
	}
	
	public ParserRule getTEMPBIOPRule() {
		return getTEMPBIOPAccess().getRule();
	}
	
	//OperatorCallExp returns OclExpression :
	//    BoolOpCallExp ({OperatorCallExp.source = current} operationName=TEMPBIOP argument=BoolOpCallExp)*
	//;
	public OperatorCallExpElements getOperatorCallExpAccess() {
		return pOperatorCallExp;
	}
	
	public ParserRule getOperatorCallExpRule() {
		return getOperatorCallExpAccess().getRule();
	}
	
	//BoolOpCallExp returns OperatorCallExp :
	//    EqOpCallExp (({BoolOpCallExp.source=current} operationName=BOOLOP)     argument=EqOpCallExp )*
	//;
	public BoolOpCallExpElements getBoolOpCallExpAccess() {
		return pBoolOpCallExp;
	}
	
	public ParserRule getBoolOpCallExpRule() {
		return getBoolOpCallExpAccess().getRule();
	}
	
	//BOOLOP  		: 'and'|'or'|'xor'|'implies'|'equivalent';
	public BOOLOPElements getBOOLOPAccess() {
		return pBOOLOP;
	}
	
	public ParserRule getBOOLOPRule() {
		return getBOOLOPAccess().getRule();
	}
	
	//EqOpCallExp returns OperatorCallExp :
	//    RelOpCallExp (({EqOpCallExp.source=current} operationName=EQOP)     argument=RelOpCallExp )*
	//;
	public EqOpCallExpElements getEqOpCallExpAccess() {
		return pEqOpCallExp;
	}
	
	public ParserRule getEqOpCallExpRule() {
		return getEqOpCallExpAccess().getRule();
	}
	
	//EQOP  		: '='|'<>';
	public EQOPElements getEQOPAccess() {
		return pEQOP;
	}
	
	public ParserRule getEQOPRule() {
		return getEQOPAccess().getRule();
	}
	
	//RelOpCallExp returns OperatorCallExp :
	//    AddOpCallExp (({RelOpCallExp.source=current} operationName=RELOP)     argument=AddOpCallExp )*
	//;
	public RelOpCallExpElements getRelOpCallExpAccess() {
		return pRelOpCallExp;
	}
	
	public ParserRule getRelOpCallExpRule() {
		return getRelOpCallExpAccess().getRule();
	}
	
	//RELOP  		: '>'|'<'|'>='|'<=' ;
	public RELOPElements getRELOPAccess() {
		return pRELOP;
	}
	
	public ParserRule getRELOPRule() {
		return getRELOPAccess().getRule();
	}
	
	//AddOpCallExp returns OperatorCallExp :
	//    IntOpCallExp (({AddOpCallExp.source=current} operationName=ADDOP)     argument=IntOpCallExp )*
	//;
	public AddOpCallExpElements getAddOpCallExpAccess() {
		return pAddOpCallExp;
	}
	
	public ParserRule getAddOpCallExpRule() {
		return getAddOpCallExpAccess().getRule();
	}
	
	//ADDOP : '-'|'+';
	public ADDOPElements getADDOPAccess() {
		return pADDOP;
	}
	
	public ParserRule getADDOPRule() {
		return getADDOPAccess().getRule();
	}
	
	//IntOpCallExp returns OperatorCallExp :
	//    MulOpCallExp (({IntOpCallExp.source=current} operationName=INTOP)     argument=MulOpCallExp )*
	//;
	public IntOpCallExpElements getIntOpCallExpAccess() {
		return pIntOpCallExp;
	}
	
	public ParserRule getIntOpCallExpRule() {
		return getIntOpCallExpAccess().getRule();
	}
	
	//INTOP : 'div'|'mod';
	public INTOPElements getINTOPAccess() {
		return pINTOP;
	}
	
	public ParserRule getINTOPRule() {
		return getINTOPAccess().getRule();
	}
	
	//MulOpCallExp returns OperatorCallExp :
	//    NotOpCallExp (({MulOpCallExp.source=current} operationName=MULOP)     argument=NotOpCallExp )*
	//;
	public MulOpCallExpElements getMulOpCallExpAccess() {
		return pMulOpCallExp;
	}
	
	public ParserRule getMulOpCallExpRule() {
		return getMulOpCallExpAccess().getRule();
	}
	
	//MULOP: '*'|'/';
	public MULOPElements getMULOPAccess() {
		return pMULOP;
	}
	
	public ParserRule getMULOPRule() {
		return getMULOPAccess().getRule();
	}
	
	//NotOpCallExp returns OperatorCallExp :
	//    (((operationName=UnaryOP) source=NotOpCallExp)
	//        |
	//        PropertyCallExp)
	//;
	public NotOpCallExpElements getNotOpCallExpAccess() {
		return pNotOpCallExp;
	}
	
	public ParserRule getNotOpCallExpRule() {
		return getNotOpCallExpAccess().getRule();
	}
	
	//UnaryOP: NOTOP|UNARYTEMPOP;
	public UnaryOPElements getUnaryOPAccess() {
		return pUnaryOP;
	}
	
	public ParserRule getUnaryOPRule() {
		return getUnaryOPAccess().getRule();
	}
	
	//NOTOP: 'not';
	public NOTOPElements getNOTOPAccess() {
		return pNOTOP;
	}
	
	public ParserRule getNOTOPRule() {
		return getNOTOPAccess().getRule();
	}
	
	//UNARYTEMPOP: 'always'|'eventually'|'next'|'All'|'Exists';
	public UNARYTEMPOPElements getUNARYTEMPOPAccess() {
		return pUNARYTEMPOP;
	}
	
	public ParserRule getUNARYTEMPOPRule() {
		return getUNARYTEMPOPAccess().getRule();
	}
	
	////priority_0
	//PropertyCallExp  :
	//    source = Primary_OclExpression (calls+=PropertyCall)*
	//    ;
	public PropertyCallExpElements getPropertyCallExpAccess() {
		return pPropertyCallExp;
	}
	
	public ParserRule getPropertyCallExpRule() {
		return getPropertyCallExpAccess().getRule();
	}
	
	//Primary_OclExpression returns OclExpression :
	//    VariableExp
	//    |SuperExp
	//    |SelfExp
	//    |StringExp
	//    |BooleanExp
	//    |NumericExp
	//    |BagExp
	//    |OrderedSetExp
	//    |SequenceExp
	//    |SetExp
	//    |TupleExp
	//    |MapExp
	//    |EnumLiteralExp
	//    |OclUndefinedExp
	//    |IfExp
	//    |BraceExp
	//    |OclModelElementExp;
	public Primary_OclExpressionElements getPrimary_OclExpressionAccess() {
		return pPrimary_OclExpression;
	}
	
	public ParserRule getPrimary_OclExpressionRule() {
		return getPrimary_OclExpressionAccess().getRule();
	}
	
	//Auxiliary :Iterator|LocalVariable|Parameter;
	public AuxiliaryElements getAuxiliaryAccess() {
		return pAuxiliary;
	}
	
	public ParserRule getAuxiliaryRule() {
		return getAuxiliaryAccess().getRule();
	}
	
	//VariableExp:
	//    //name= ID|
	//    referredVariable=[Auxiliary]|
	//    VariableDeclaration
	//;
	public VariableExpElements getVariableExpAccess() {
		return pVariableExp;
	}
	
	public ParserRule getVariableExpRule() {
		return getVariableExpAccess().getRule();
	}
	
	//VariableDeclaration:
	//    varName='thisModule'
	//;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//SuperExp :
	//    {SuperExp}    'super'
	//;
	public SuperExpElements getSuperExpAccess() {
		return pSuperExp;
	}
	
	public ParserRule getSuperExpRule() {
		return getSuperExpAccess().getRule();
	}
	
	//SelfExp :
	//    {SelfExp}    'self'
	//;
	public SelfExpElements getSelfExpAccess() {
		return pSelfExp;
	}
	
	public ParserRule getSelfExpRule() {
		return getSelfExpAccess().getRule();
	}
	
	//StringExp :
	//    {StringExp}
	//    stringSymbol=STRING
	//;
	public StringExpElements getStringExpAccess() {
		return pStringExp;
	}
	
	public ParserRule getStringExpRule() {
		return getStringExpAccess().getRule();
	}
	
	//NumericExp:
	//    RealExp|IntegerExp
	//;
	public NumericExpElements getNumericExpAccess() {
		return pNumericExp;
	}
	
	public ParserRule getNumericExpRule() {
		return getNumericExpAccess().getRule();
	}
	
	//RealExp : realSymbol=DOUBLE;
	public RealExpElements getRealExpAccess() {
		return pRealExp;
	}
	
	public ParserRule getRealExpRule() {
		return getRealExpAccess().getRule();
	}
	
	//REAL hidden(): INT '.' (EXT_INT | INT);
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	//terminal EXT_INT: INT ('e'|'E')('-'|'+') INT;
	public TerminalRule getEXT_INTRule() {
		return tEXT_INT;
	}
	
	//IntegerExp:
	//    {IntegerExp}
	//    integerSymbol=INT
	//;
	public IntegerExpElements getIntegerExpAccess() {
		return pIntegerExp;
	}
	
	public ParserRule getIntegerExpRule() {
		return getIntegerExpAccess().getRule();
	}
	
	//BagExp:
	//    {BagExp}
	//    'Bag' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
	//;
	public BagExpElements getBagExpAccess() {
		return pBagExp;
	}
	
	public ParserRule getBagExpRule() {
		return getBagExpAccess().getRule();
	}
	
	//OrderedSetExp:
	//    {OrderedSetExp}
	//    'OrderedSet' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
	//;
	public OrderedSetExpElements getOrderedSetExpAccess() {
		return pOrderedSetExp;
	}
	
	public ParserRule getOrderedSetExpRule() {
		return getOrderedSetExpAccess().getRule();
	}
	
	//SequenceExp:
	//    {SequenceExp}
	//    'Sequence' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
	//;
	public SequenceExpElements getSequenceExpAccess() {
		return pSequenceExp;
	}
	
	public ParserRule getSequenceExpRule() {
		return getSequenceExpAccess().getRule();
	}
	
	//SetExp:
	//    {SetExp}
	//    'Set' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
	//;
	public SetExpElements getSetExpAccess() {
		return pSetExp;
	}
	
	public ParserRule getSetExpRule() {
		return getSetExpAccess().getRule();
	}
	
	//TupleExp:
	//    {TupleExp}
	//    'Tuple' '{' (tuplePart+=TuplePart ("," tuplePart+=TuplePart)*)? '}'
	//;
	public TupleExpElements getTupleExpAccess() {
		return pTupleExp;
	}
	
	public ParserRule getTupleExpRule() {
		return getTupleExpAccess().getRule();
	}
	
	//TuplePart:
	//    varName=STRING (':' type=OclType)? '=' initExpression=OclExpression
	//;
	public TuplePartElements getTuplePartAccess() {
		return pTuplePart;
	}
	
	public ParserRule getTuplePartRule() {
		return getTuplePartAccess().getRule();
	}
	
	//MapExp :
	//    {MapExp}
	//    'Map' '{' (elements+=MapElement (',' elements+=MapElement)*)? '}'
	//;
	public MapExpElements getMapExpAccess() {
		return pMapExp;
	}
	
	public ParserRule getMapExpRule() {
		return getMapExpAccess().getRule();
	}
	
	//MapElement :
	//    '(' key=OclExpression ',' value=OclExpression ')'
	//;
	public MapElementElements getMapElementAccess() {
		return pMapElement;
	}
	
	public ParserRule getMapElementRule() {
		return getMapElementAccess().getRule();
	}
	
	//EnumLiteralExp :
	//    "#" (name=STRING|name=ID)
	//;
	public EnumLiteralExpElements getEnumLiteralExpAccess() {
		return pEnumLiteralExp;
	}
	
	public ParserRule getEnumLiteralExpRule() {
		return getEnumLiteralExpAccess().getRule();
	}
	
	//OclUndefinedExp :
	//    {OclUndefinedExp}
	//    'OclUndefined'
	//;
	public OclUndefinedExpElements getOclUndefinedExpAccess() {
		return pOclUndefinedExp;
	}
	
	public ParserRule getOclUndefinedExpRule() {
		return getOclUndefinedExpAccess().getRule();
	}
	
	//LetExp :
	//    'let' variable=LocalVariable 'in' in_=OclExpression
	//;
	public LetExpElements getLetExpAccess() {
		return pLetExp;
	}
	
	public ParserRule getLetExpRule() {
		return getLetExpAccess().getRule();
	}
	
	//IfExp :
	//    'if' condition=OclExpression 'then' thenExpression=OclExpression 'else' elseExpression=OclExpression 'endif'
	//;
	public IfExpElements getIfExpAccess() {
		return pIfExp;
	}
	
	public ParserRule getIfExpRule() {
		return getIfExpAccess().getRule();
	}
	
	//BraceExp :
	//    '(' exp=OclExpression ')'
	//;
	public BraceExpElements getBraceExpAccess() {
		return pBraceExp;
	}
	
	public ParserRule getBraceExpRule() {
		return getBraceExpAccess().getRule();
	}
	
	////CollectionPart:
	////    CollectionRange|CollectionItem
	////    ;
	////
	////CollectionRange:
	////    first=OclExpression '..' last=OclExpression
	////    ;
	////
	////CollectionItem:
	////    item=OclExpression
	////    ;
	//BooleanExp:
	//    booleanSymbol= 'true'|booleanSymbol= 'false'
	//    ;
	public BooleanExpElements getBooleanExpAccess() {
		return pBooleanExp;
	}
	
	public ParserRule getBooleanExpRule() {
		return getBooleanExpAccess().getRule();
	}
	
	//PropertyCall:
	//    OperationCall|NavigationOrAttributeCall|IterateExp|IteratorExp|CollectionOperationCall
	//    ;
	public PropertyCallElements getPropertyCallAccess() {
		return pPropertyCall;
	}
	
	public ParserRule getPropertyCallRule() {
		return getPropertyCallAccess().getRule();
	}
	
	//OperationCall:
	//    '.' (operationName=STRING|operationName=ID) '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
	//    ;
	public OperationCallElements getOperationCallAccess() {
		return pOperationCall;
	}
	
	public ParserRule getOperationCallRule() {
		return getOperationCallAccess().getRule();
	}
	
	//NavigationOrAttributeCall :
	//    '.' (name=STRING|name=ID)
	//    ;
	public NavigationOrAttributeCallElements getNavigationOrAttributeCallAccess() {
		return pNavigationOrAttributeCall;
	}
	
	public ParserRule getNavigationOrAttributeCallRule() {
		return getNavigationOrAttributeCallAccess().getRule();
	}
	
	//IterateExp:
	//    '->' 'iterate' '(' iterators+=Iterator (',' iterators+=Iterator)* ';' result=LocalVariable '|' body=OclExpression ')'
	//    ;
	public IterateExpElements getIterateExpAccess() {
		return pIterateExp;
	}
	
	public ParserRule getIterateExpRule() {
		return getIterateExpAccess().getRule();
	}
	
	//Iterator :
	//    name=ID (':' type=OclType)?
	//    ;
	public IteratorElements getIteratorAccess() {
		return pIterator;
	}
	
	public ParserRule getIteratorRule() {
		return getIteratorAccess().getRule();
	}
	
	//IteratorExp :
	//    '->' name=ID '(' iterators+=Iterator (',' iterators+=Iterator)* '|' body=OclExpression ')'
	//    ;
	public IteratorExpElements getIteratorExpAccess() {
		return pIteratorExp;
	}
	
	public ParserRule getIteratorExpRule() {
		return getIteratorExpAccess().getRule();
	}
	
	//CollectionOperationCall :
	//    '->' operationName=ID '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
	//    ;
	public CollectionOperationCallElements getCollectionOperationCallAccess() {
		return pCollectionOperationCall;
	}
	
	public ParserRule getCollectionOperationCallRule() {
		return getCollectionOperationCallAccess().getRule();
	}
	
	//LocalVariable :
	//    name=ID (':' type=OclType)? '=' initExpression=OclExpression
	//;
	public LocalVariableElements getLocalVariableAccess() {
		return pLocalVariable;
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}
	
	//OclType :
	//    //oclModelElement |
	//    //{OclType} name=STRING
	//    CollectionType
	//    | Primitive
	//    | OclAnyType
	//    | TupleType
	//    | OclModelElement
	//    | MapType
	//    // | LambdaType
	//    // | EnvType
	//    | OclType_abstractContents
	//    ;
	public OclTypeElements getOclTypeAccess() {
		return pOclType;
	}
	
	public ParserRule getOclTypeRule() {
		return getOclTypeAccess().getRule();
	}
	
	//CollectionType:
	//    BagType
	//    | OrderedSetType
	//    | SequenceType
	//    | SetType
	//    ;
	public CollectionTypeElements getCollectionTypeAccess() {
		return pCollectionType;
	}
	
	public ParserRule getCollectionTypeRule() {
		return getCollectionTypeAccess().getRule();
	}
	
	//BagType :
	//    'Bag' '(' elementType=OclType ')'
	//;
	public BagTypeElements getBagTypeAccess() {
		return pBagType;
	}
	
	public ParserRule getBagTypeRule() {
		return getBagTypeAccess().getRule();
	}
	
	//OrderedSetType :
	//    'OrderedSet' '(' elementType=OclType ')'
	//;
	public OrderedSetTypeElements getOrderedSetTypeAccess() {
		return pOrderedSetType;
	}
	
	public ParserRule getOrderedSetTypeRule() {
		return getOrderedSetTypeAccess().getRule();
	}
	
	//SequenceType :
	//    'Sequence' '(' elementType=OclType ')'
	//;
	public SequenceTypeElements getSequenceTypeAccess() {
		return pSequenceType;
	}
	
	public ParserRule getSequenceTypeRule() {
		return getSequenceTypeAccess().getRule();
	}
	
	//SetType :
	//    'Set' '(' elementType=OclType ')'
	//;
	public SetTypeElements getSetTypeAccess() {
		return pSetType;
	}
	
	public ParserRule getSetTypeRule() {
		return getSetTypeAccess().getRule();
	}
	
	//Primitive:
	//    StringType
	//    | BooleanType
	//    | NumericType
	//;
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//StringType:
	//    {StringType}'String'
	//;
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//BooleanType:
	//    {BooleanType}'Boolean'
	//;
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//NumericType:
	//    IntegerType
	//    |RealType
	//;
	public NumericTypeElements getNumericTypeAccess() {
		return pNumericType;
	}
	
	public ParserRule getNumericTypeRule() {
		return getNumericTypeAccess().getRule();
	}
	
	//IntegerType:
	//    {IntegerType}'Integer'
	//;
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//RealType:
	//    {RealType}'Real'
	//;
	public RealTypeElements getRealTypeAccess() {
		return pRealType;
	}
	
	public ParserRule getRealTypeRule() {
		return getRealTypeAccess().getRule();
	}
	
	//OclAnyType :
	//    {OclAnyType}'OclAny'
	//;
	public OclAnyTypeElements getOclAnyTypeAccess() {
		return pOclAnyType;
	}
	
	public ParserRule getOclAnyTypeRule() {
		return getOclAnyTypeAccess().getRule();
	}
	
	//OclType_abstractContents  returns OclType :
	//    {OclType}
	//    'OclType'
	//;
	public OclType_abstractContentsElements getOclType_abstractContentsAccess() {
		return pOclType_abstractContents;
	}
	
	public ParserRule getOclType_abstractContentsRule() {
		return getOclType_abstractContentsAccess().getRule();
	}
	
	//TupleType :
	//    {TupleType}
	//     ('TupleType' | 'Tuple') '(' (attributes+=TupleTypeAttribute (',' attributes+=TupleTypeAttribute)*)? ')'
	//     ;
	public TupleTypeElements getTupleTypeAccess() {
		return pTupleType;
	}
	
	public ParserRule getTupleTypeRule() {
		return getTupleTypeAccess().getRule();
	}
	
	//TupleTypeAttribute : name=ID ':' type=OclType;
	public TupleTypeAttributeElements getTupleTypeAttributeAccess() {
		return pTupleTypeAttribute;
	}
	
	public ParserRule getTupleTypeAttributeRule() {
		return getTupleTypeAttributeAccess().getRule();
	}
	
	//OclModelElement: model=[Import]'!'name=ID;
	public OclModelElementElements getOclModelElementAccess() {
		return pOclModelElement;
	}
	
	public ParserRule getOclModelElementRule() {
		return getOclModelElementAccess().getRule();
	}
	
	// //[ecore::EClass|ID];
	//MapType :
	//    'Map' '(' keyType=OclType ',' valueType=OclType ')'
	//;
	public MapTypeElements getMapTypeAccess() {
		return pMapType;
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}
	
	////LambdaType :
	////    'Lambda' "(" (argumentTypes ("," argumentTypes)*)? ")" ":" returnType
	////;
	////    EnvType ::= name[ENVTYPE];
	//terminal DOUBLE returns ecore::EDouble :
	//('-'|'+')? (INT '.' INT| '.' INT | INT '.') ('e' ('-'|'+') INT)?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//QualifiedName: ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
