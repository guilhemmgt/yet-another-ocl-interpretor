/*
 * generated by Xtext
 */
package fr.enseeiht.ocl.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OclGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cContextlessFeaturesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContextlessFeaturesOclFeatureDefinitionParserRuleCall_1_0 = (RuleCall)cContextlessFeaturesAssignment_1.eContents().get(0);
		private final Assignment cContextBlocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContextBlocksOclContextBlockParserRuleCall_2_0 = (RuleCall)cContextBlocksAssignment_2.eContents().get(0);
		
		//Module:
		//    (imports+=Import)+ (contextlessFeatures+=OclFeatureDefinition)* (contextBlocks+=OclContextBlock)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(imports+=Import)+ (contextlessFeatures+=OclFeatureDefinition)* (contextBlocks+=OclContextBlock)+
		public Group getGroup() { return cGroup; }
		
		//(imports+=Import)+
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//(contextlessFeatures+=OclFeatureDefinition)*
		public Assignment getContextlessFeaturesAssignment_1() { return cContextlessFeaturesAssignment_1; }
		
		//OclFeatureDefinition
		public RuleCall getContextlessFeaturesOclFeatureDefinitionParserRuleCall_1_0() { return cContextlessFeaturesOclFeatureDefinitionParserRuleCall_1_0; }
		
		//(contextBlocks+=OclContextBlock)+
		public Assignment getContextBlocksAssignment_2() { return cContextBlocksAssignment_2; }
		
		//OclContextBlock
		public RuleCall getContextBlocksOclContextBlockParserRuleCall_2_0() { return cContextBlocksOclContextBlockParserRuleCall_2_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPackageEPackageCrossReference_1_0 = (CrossReference)cPackageAssignment_1.eContents().get(0);
		private final RuleCall cPackageEPackageSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cPackageEPackageCrossReference_1_0.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Import:
		//    'import' package=[ecore::EPackage|STRING] 'as'name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' package=[ecore::EPackage|STRING] 'as'name=ID
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//package=[ecore::EPackage|STRING]
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }
		
		//[ecore::EPackage|STRING]
		public CrossReference getPackageEPackageCrossReference_1_0() { return cPackageEPackageCrossReference_1_0; }
		
		//STRING
		public RuleCall getPackageEPackageSTRINGTerminalRuleCall_1_0_1() { return cPackageEPackageSTRINGTerminalRuleCall_1_0_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class OclContextBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclContextBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cContextKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cEcoreTypesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cEcoreTypesImportCrossReference_0_1_0 = (CrossReference)cEcoreTypesAssignment_0_1.eContents().get(0);
		private final RuleCall cEcoreTypesImportIDTerminalRuleCall_0_1_0_1 = (RuleCall)cEcoreTypesImportCrossReference_0_1_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cClassAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cClassEClassCrossReference_0_3_0 = (CrossReference)cClassAssignment_0_3.eContents().get(0);
		private final RuleCall cClassEClassQualifiedNameParserRuleCall_0_3_0_1 = (RuleCall)cClassEClassCrossReference_0_3_0.eContents().get(1);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cMembersAlternatives_1_0 = (Alternatives)cMembersAssignment_1.eContents().get(0);
		private final RuleCall cMembersOclFeatureDefinitionParserRuleCall_1_0_0 = (RuleCall)cMembersAlternatives_1_0.eContents().get(0);
		private final RuleCall cMembersOclInvariantParserRuleCall_1_0_1 = (RuleCall)cMembersAlternatives_1_0.eContents().get(1);
		
		//OclContextBlock:
		//    ('context' ecoreTypes=[Import]'!'class=[ecore::EClass|QualifiedName]) (members+=(OclFeatureDefinition|OclInvariant))+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('context' ecoreTypes=[Import]'!'class=[ecore::EClass|QualifiedName]) (members+=(OclFeatureDefinition|OclInvariant))+
		public Group getGroup() { return cGroup; }
		
		//('context' ecoreTypes=[Import]'!'class=[ecore::EClass|QualifiedName])
		public Group getGroup_0() { return cGroup_0; }
		
		//'context'
		public Keyword getContextKeyword_0_0() { return cContextKeyword_0_0; }
		
		//ecoreTypes=[Import]
		public Assignment getEcoreTypesAssignment_0_1() { return cEcoreTypesAssignment_0_1; }
		
		//[Import]
		public CrossReference getEcoreTypesImportCrossReference_0_1_0() { return cEcoreTypesImportCrossReference_0_1_0; }
		
		//ID
		public RuleCall getEcoreTypesImportIDTerminalRuleCall_0_1_0_1() { return cEcoreTypesImportIDTerminalRuleCall_0_1_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0_2() { return cExclamationMarkKeyword_0_2; }
		
		//class=[ecore::EClass|QualifiedName]
		public Assignment getClassAssignment_0_3() { return cClassAssignment_0_3; }
		
		//[ecore::EClass|QualifiedName]
		public CrossReference getClassEClassCrossReference_0_3_0() { return cClassEClassCrossReference_0_3_0; }
		
		//QualifiedName
		public RuleCall getClassEClassQualifiedNameParserRuleCall_0_3_0_1() { return cClassEClassQualifiedNameParserRuleCall_0_3_0_1; }
		
		//(members+=(OclFeatureDefinition|OclInvariant))+
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }
		
		//(OclFeatureDefinition|OclInvariant)
		public Alternatives getMembersAlternatives_1_0() { return cMembersAlternatives_1_0; }
		
		//OclFeatureDefinition
		public RuleCall getMembersOclFeatureDefinitionParserRuleCall_1_0_0() { return cMembersOclFeatureDefinitionParserRuleCall_1_0_0; }
		
		//OclInvariant
		public RuleCall getMembersOclInvariantParserRuleCall_1_0_1() { return cMembersOclInvariantParserRuleCall_1_0_1; }
	}
	public class OclFeatureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclFeatureDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cFeatureAlternatives_2_0 = (Alternatives)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureAttributeParserRuleCall_2_0_0 = (RuleCall)cFeatureAlternatives_2_0.eContents().get(0);
		private final RuleCall cFeatureOperationParserRuleCall_2_0_1 = (RuleCall)cFeatureAlternatives_2_0.eContents().get(1);
		
		//OclFeatureDefinition:
		//    'def' ':' feature = (Attribute|Operation)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'def' ':' feature = (Attribute|Operation)
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//feature = (Attribute|Operation)
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }
		
		//(Attribute|Operation)
		public Alternatives getFeatureAlternatives_2_0() { return cFeatureAlternatives_2_0; }
		
		//Attribute
		public RuleCall getFeatureAttributeParserRuleCall_2_0_0() { return cFeatureAttributeParserRuleCall_2_0_0; }
		
		//Operation
		public RuleCall getFeatureOperationParserRuleCall_2_0_1() { return cFeatureOperationParserRuleCall_2_0_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOclTypeLiteralParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInitExpressionOclExpressionParserRuleCall_4_0 = (RuleCall)cInitExpressionAssignment_4.eContents().get(0);
		
		//Attribute :
		//    name=ID ':' type=OclTypeLiteral '=' initExpression=OclExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=OclTypeLiteral '=' initExpression=OclExpression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=OclTypeLiteral
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//OclTypeLiteral
		public RuleCall getTypeOclTypeLiteralParserRuleCall_2_0() { return cTypeOclTypeLiteralParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//initExpression=OclExpression
		public Assignment getInitExpressionAssignment_4() { return cInitExpressionAssignment_4; }
		
		//OclExpression
		public RuleCall getInitExpressionOclExpressionParserRuleCall_4_0() { return cInitExpressionOclExpressionParserRuleCall_4_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeOclTypeLiteralParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyOclExpressionParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//Operation:
		//    name=ID  '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ':' returnType=OclTypeLiteral '=' body=OclExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID  '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ':' returnType=OclTypeLiteral '=' body=OclExpression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0_0() { return cParametersParameterParserRuleCall_2_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_1_0() { return cParametersParameterParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//returnType=OclTypeLiteral
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }
		
		//OclTypeLiteral
		public RuleCall getReturnTypeOclTypeLiteralParserRuleCall_5_0() { return cReturnTypeOclTypeLiteralParserRuleCall_5_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//body=OclExpression
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_7_0() { return cBodyOclExpressionParserRuleCall_7_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOclTypeLiteralParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//    name=ID ':' type=OclTypeLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=OclTypeLiteral
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=OclTypeLiteral
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//OclTypeLiteral
		public RuleCall getTypeOclTypeLiteralParserRuleCall_2_0() { return cTypeOclTypeLiteralParserRuleCall_2_0; }
	}
	public class OclInvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclInvariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyOclExpressionParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//OclInvariant:
		//    'inv' name=ID ':' body=OclExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'inv' name=ID ':' body=OclExpression
		public Group getGroup() { return cGroup; }
		
		//'inv'
		public Keyword getInvKeyword_0() { return cInvKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//body=OclExpression
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_3_0() { return cBodyOclExpressionParserRuleCall_3_0; }
	}
	public class OclExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperatorCallExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLetExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OclExpression returns OclExpression :
		//    OperatorCallExp|LetExp;
		@Override public ParserRule getRule() { return rule; }
		
		//OperatorCallExp|LetExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperatorCallExp
		public RuleCall getOperatorCallExpParserRuleCall_0() { return cOperatorCallExpParserRuleCall_0; }
		
		//LetExp
		public RuleCall getLetExpParserRuleCall_1() { return cLetExpParserRuleCall_1; }
	}
	public class OclModelElementExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclModelElementExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModelImportCrossReference_0_0 = (CrossReference)cModelAssignment_0.eContents().get(0);
		private final RuleCall cModelImportIDTerminalRuleCall_0_0_1 = (RuleCall)cModelImportCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//OclModelElementExp :
		//    model=[Import]'!'name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//model=[Import]'!'name=ID
		public Group getGroup() { return cGroup; }
		
		//model=[Import]
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }
		
		//[Import]
		public CrossReference getModelImportCrossReference_0_0() { return cModelImportCrossReference_0_0; }
		
		//ID
		public RuleCall getModelImportIDTerminalRuleCall_0_0_1() { return cModelImportIDTerminalRuleCall_0_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class OperatorCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OperatorCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsEqOpCallExpParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperationNamesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperationNamesBOOLOPParserRuleCall_1_0_0 = (RuleCall)cOperationNamesAssignment_1_0.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsEqOpCallExpParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		////priority_5
		//OperatorCallExp:
		//    // args+=EqOpCallExp (({OperatorCallExp.source=current} operationNames+=BOOLOP)     args+=EqOpCallExp )*
		//    args+=EqOpCallExp (operationNames+=BOOLOP args+=EqOpCallExp)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// args+=EqOpCallExp (({OperatorCallExp.source=current} operationNames+=BOOLOP)     args+=EqOpCallExp )*
		//args+=EqOpCallExp (operationNames+=BOOLOP args+=EqOpCallExp)*
		public Group getGroup() { return cGroup; }
		
		//// args+=EqOpCallExp (({OperatorCallExp.source=current} operationNames+=BOOLOP)     args+=EqOpCallExp )*
		//args+=EqOpCallExp
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }
		
		//EqOpCallExp
		public RuleCall getArgsEqOpCallExpParserRuleCall_0_0() { return cArgsEqOpCallExpParserRuleCall_0_0; }
		
		//(operationNames+=BOOLOP args+=EqOpCallExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operationNames+=BOOLOP
		public Assignment getOperationNamesAssignment_1_0() { return cOperationNamesAssignment_1_0; }
		
		//BOOLOP
		public RuleCall getOperationNamesBOOLOPParserRuleCall_1_0_0() { return cOperationNamesBOOLOPParserRuleCall_1_0_0; }
		
		//args+=EqOpCallExp
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }
		
		//EqOpCallExp
		public RuleCall getArgsEqOpCallExpParserRuleCall_1_1_0() { return cArgsEqOpCallExpParserRuleCall_1_1_0; }
	}
	public class BOOLOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.BOOLOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cXorKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cImpliesKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//BOOLOP  		: 'and'|'or'|'xor'|'implies';
		@Override public ParserRule getRule() { return rule; }
		
		//'and'|'or'|'xor'|'implies'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//'xor'
		public Keyword getXorKeyword_2() { return cXorKeyword_2; }
		
		//'implies'
		public Keyword getImpliesKeyword_3() { return cImpliesKeyword_3; }
	}
	public class EqOpCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.EqOpCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsRelOpCallExpParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperationNamesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperationNamesEQOPParserRuleCall_1_0_0 = (RuleCall)cOperationNamesAssignment_1_0.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsRelOpCallExpParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//EqOpCallExp:
		//    //args+=RelOpCallExp (({EqOpCallExp.source=current} operationNames+=EQOP)     args+=RelOpCallExp )?
		//    args+=RelOpCallExp (operationNames+=EQOP args+=RelOpCallExp)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////args+=RelOpCallExp (({EqOpCallExp.source=current} operationNames+=EQOP)     args+=RelOpCallExp )?
		//args+=RelOpCallExp (operationNames+=EQOP args+=RelOpCallExp)?
		public Group getGroup() { return cGroup; }
		
		////args+=RelOpCallExp (({EqOpCallExp.source=current} operationNames+=EQOP)     args+=RelOpCallExp )?
		//args+=RelOpCallExp
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }
		
		//RelOpCallExp
		public RuleCall getArgsRelOpCallExpParserRuleCall_0_0() { return cArgsRelOpCallExpParserRuleCall_0_0; }
		
		//(operationNames+=EQOP args+=RelOpCallExp)?
		public Group getGroup_1() { return cGroup_1; }
		
		//operationNames+=EQOP
		public Assignment getOperationNamesAssignment_1_0() { return cOperationNamesAssignment_1_0; }
		
		//EQOP
		public RuleCall getOperationNamesEQOPParserRuleCall_1_0_0() { return cOperationNamesEQOPParserRuleCall_1_0_0; }
		
		//args+=RelOpCallExp
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }
		
		//RelOpCallExp
		public RuleCall getArgsRelOpCallExpParserRuleCall_1_1_0() { return cArgsRelOpCallExpParserRuleCall_1_1_0; }
	}
	public class EQOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.EQOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EQOP  		: '='|'<>';
		@Override public ParserRule getRule() { return rule; }
		
		//'='|'<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_1() { return cLessThanSignGreaterThanSignKeyword_1; }
	}
	public class RelOpCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.RelOpCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsAddOpCallExpParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperationNamesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperationNamesRELOPParserRuleCall_1_0_0 = (RuleCall)cOperationNamesAssignment_1_0.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsAddOpCallExpParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//RelOpCallExp:
		//    //args+=AddOpCallExp (({RelOpCallExp.source=current} operationNames+=RELOP)     args+=AddOpCallExp )?
		//    args+=AddOpCallExp (operationNames+=RELOP args+=AddOpCallExp)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////args+=AddOpCallExp (({RelOpCallExp.source=current} operationNames+=RELOP)     args+=AddOpCallExp )?
		//args+=AddOpCallExp (operationNames+=RELOP args+=AddOpCallExp)?
		public Group getGroup() { return cGroup; }
		
		////args+=AddOpCallExp (({RelOpCallExp.source=current} operationNames+=RELOP)     args+=AddOpCallExp )?
		//args+=AddOpCallExp
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }
		
		//AddOpCallExp
		public RuleCall getArgsAddOpCallExpParserRuleCall_0_0() { return cArgsAddOpCallExpParserRuleCall_0_0; }
		
		//(operationNames+=RELOP args+=AddOpCallExp)?
		public Group getGroup_1() { return cGroup_1; }
		
		//operationNames+=RELOP
		public Assignment getOperationNamesAssignment_1_0() { return cOperationNamesAssignment_1_0; }
		
		//RELOP
		public RuleCall getOperationNamesRELOPParserRuleCall_1_0_0() { return cOperationNamesRELOPParserRuleCall_1_0_0; }
		
		//args+=AddOpCallExp
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }
		
		//AddOpCallExp
		public RuleCall getArgsAddOpCallExpParserRuleCall_1_1_0() { return cArgsAddOpCallExpParserRuleCall_1_1_0; }
	}
	public class RELOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.RELOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RELOP  		: '>'|'<'|'>='|'<=' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'>'|'<'|'>='|'<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
	}
	public class AddOpCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.AddOpCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsIntOpCallExpParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperationNamesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperationNamesADDOPParserRuleCall_1_0_0 = (RuleCall)cOperationNamesAssignment_1_0.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsIntOpCallExpParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//AddOpCallExp:
		//    //args+=IntOpCallExp (({AddOpCallExp.source=current} operationNames+=ADDOP)     args+=IntOpCallExp )*
		//    args+=IntOpCallExp (operationNames+=ADDOP args+=IntOpCallExp)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////args+=IntOpCallExp (({AddOpCallExp.source=current} operationNames+=ADDOP)     args+=IntOpCallExp )*
		//args+=IntOpCallExp (operationNames+=ADDOP args+=IntOpCallExp)*
		public Group getGroup() { return cGroup; }
		
		////args+=IntOpCallExp (({AddOpCallExp.source=current} operationNames+=ADDOP)     args+=IntOpCallExp )*
		//args+=IntOpCallExp
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }
		
		//IntOpCallExp
		public RuleCall getArgsIntOpCallExpParserRuleCall_0_0() { return cArgsIntOpCallExpParserRuleCall_0_0; }
		
		//(operationNames+=ADDOP args+=IntOpCallExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operationNames+=ADDOP
		public Assignment getOperationNamesAssignment_1_0() { return cOperationNamesAssignment_1_0; }
		
		//ADDOP
		public RuleCall getOperationNamesADDOPParserRuleCall_1_0_0() { return cOperationNamesADDOPParserRuleCall_1_0_0; }
		
		//args+=IntOpCallExp
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }
		
		//IntOpCallExp
		public RuleCall getArgsIntOpCallExpParserRuleCall_1_1_0() { return cArgsIntOpCallExpParserRuleCall_1_1_0; }
	}
	public class ADDOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.ADDOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ADDOP : '-'|'+';
		@Override public ParserRule getRule() { return rule; }
		
		//'-'|'+'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
	}
	public class IntOpCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.IntOpCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsMulOpCallExpParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperationNamesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperationNamesINTOPParserRuleCall_1_0_0 = (RuleCall)cOperationNamesAssignment_1_0.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsMulOpCallExpParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//IntOpCallExp :
		//    //args+=MulOpCallExp (({IntOpCallExp.source=current} operationNames+=INTOP)     args+=MulOpCallExp )*
		//    args+=MulOpCallExp (operationNames+=INTOP args+=MulOpCallExp)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////args+=MulOpCallExp (({IntOpCallExp.source=current} operationNames+=INTOP)     args+=MulOpCallExp )*
		//args+=MulOpCallExp (operationNames+=INTOP args+=MulOpCallExp)*
		public Group getGroup() { return cGroup; }
		
		////args+=MulOpCallExp (({IntOpCallExp.source=current} operationNames+=INTOP)     args+=MulOpCallExp )*
		//args+=MulOpCallExp
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }
		
		//MulOpCallExp
		public RuleCall getArgsMulOpCallExpParserRuleCall_0_0() { return cArgsMulOpCallExpParserRuleCall_0_0; }
		
		//(operationNames+=INTOP args+=MulOpCallExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operationNames+=INTOP
		public Assignment getOperationNamesAssignment_1_0() { return cOperationNamesAssignment_1_0; }
		
		//INTOP
		public RuleCall getOperationNamesINTOPParserRuleCall_1_0_0() { return cOperationNamesINTOPParserRuleCall_1_0_0; }
		
		//args+=MulOpCallExp
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }
		
		//MulOpCallExp
		public RuleCall getArgsMulOpCallExpParserRuleCall_1_1_0() { return cArgsMulOpCallExpParserRuleCall_1_1_0; }
	}
	public class INTOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.INTOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDivKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cModKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//INTOP : 'div'|'mod';
		@Override public ParserRule getRule() { return rule; }
		
		//'div'|'mod'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'div'
		public Keyword getDivKeyword_0() { return cDivKeyword_0; }
		
		//'mod'
		public Keyword getModKeyword_1() { return cModKeyword_1; }
	}
	public class MulOpCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.MulOpCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsNotOpCallExpParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperationNamesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperationNamesMULOPParserRuleCall_1_0_0 = (RuleCall)cOperationNamesAssignment_1_0.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsNotOpCallExpParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//MulOpCallExp:
		//    //args+=NotOpCallExp (({MulOpCallExp.source=current} operationNames+=MULOP)     args+=NotOpCallExp )*
		//    args+=NotOpCallExp (operationNames+=MULOP args+=NotOpCallExp)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////args+=NotOpCallExp (({MulOpCallExp.source=current} operationNames+=MULOP)     args+=NotOpCallExp )*
		//args+=NotOpCallExp (operationNames+=MULOP args+=NotOpCallExp)*
		public Group getGroup() { return cGroup; }
		
		////args+=NotOpCallExp (({MulOpCallExp.source=current} operationNames+=MULOP)     args+=NotOpCallExp )*
		//args+=NotOpCallExp
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }
		
		//NotOpCallExp
		public RuleCall getArgsNotOpCallExpParserRuleCall_0_0() { return cArgsNotOpCallExpParserRuleCall_0_0; }
		
		//(operationNames+=MULOP args+=NotOpCallExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operationNames+=MULOP
		public Assignment getOperationNamesAssignment_1_0() { return cOperationNamesAssignment_1_0; }
		
		//MULOP
		public RuleCall getOperationNamesMULOPParserRuleCall_1_0_0() { return cOperationNamesMULOPParserRuleCall_1_0_0; }
		
		//args+=NotOpCallExp
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }
		
		//NotOpCallExp
		public RuleCall getArgsNotOpCallExpParserRuleCall_1_1_0() { return cArgsNotOpCallExpParserRuleCall_1_1_0; }
	}
	public class MULOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.MULOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MULOP: '*'|'/';
		@Override public ParserRule getRule() { return rule; }
		
		//'*'|'/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}
	public class NotOpCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.NotOpCallExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperationNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOperationNameUNARYOPParserRuleCall_0_0_0 = (RuleCall)cOperationNameAssignment_0_0.eContents().get(0);
		private final Assignment cSourceAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSourceNotOpCallExpParserRuleCall_0_1_0 = (RuleCall)cSourceAssignment_0_1.eContents().get(0);
		private final RuleCall cPropertyCallExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NotOpCallExp :
		//    ((operationName=UNARYOP source=NotOpCallExp)
		//        |
		//        PropertyCallExp)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//((operationName=UNARYOP source=NotOpCallExp)
		//    |
		//    PropertyCallExp)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(operationName=UNARYOP source=NotOpCallExp)
		public Group getGroup_0() { return cGroup_0; }
		
		//operationName=UNARYOP
		public Assignment getOperationNameAssignment_0_0() { return cOperationNameAssignment_0_0; }
		
		//UNARYOP
		public RuleCall getOperationNameUNARYOPParserRuleCall_0_0_0() { return cOperationNameUNARYOPParserRuleCall_0_0_0; }
		
		//source=NotOpCallExp
		public Assignment getSourceAssignment_0_1() { return cSourceAssignment_0_1; }
		
		//NotOpCallExp
		public RuleCall getSourceNotOpCallExpParserRuleCall_0_1_0() { return cSourceNotOpCallExpParserRuleCall_0_1_0; }
		
		//PropertyCallExp
		public RuleCall getPropertyCallExpParserRuleCall_1() { return cPropertyCallExpParserRuleCall_1; }
	}
	public class UNARYOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.UNARYOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//UNARYOP: 'not' | '-'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'not' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class PropertyCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.PropertyCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourcePrimary_OclExpressionParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Assignment cCallsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallsPropertyCallParserRuleCall_1_0 = (RuleCall)cCallsAssignment_1.eContents().get(0);
		
		////priority_0
		//PropertyCallExp  :
		//    source = Primary_OclExpression (calls+=PropertyCall)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//source = Primary_OclExpression (calls+=PropertyCall)*
		public Group getGroup() { return cGroup; }
		
		//source = Primary_OclExpression
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//Primary_OclExpression
		public RuleCall getSourcePrimary_OclExpressionParserRuleCall_0_0() { return cSourcePrimary_OclExpressionParserRuleCall_0_0; }
		
		//(calls+=PropertyCall)*
		public Assignment getCallsAssignment_1() { return cCallsAssignment_1; }
		
		//PropertyCall
		public RuleCall getCallsPropertyCallParserRuleCall_1_0() { return cCallsPropertyCallParserRuleCall_1_0; }
	}
	public class Primary_OclExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Primary_OclExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelfLiteralExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanLiteralExpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNumericLiteralExpParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNullLiteralExpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBagLiteralExpParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOrderedSetLiteralExpParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSequenceLiteralExpParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSetLiteralExpParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTupleLiteralExpParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cMapLiteralExpParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cEnumLiteralExpParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cIfExpParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cBraceExpParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cOclModelElementExpParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cContextlessCallExpParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//Primary_OclExpression returns OclExpression :
		//    VariableExp
		//    |SelfLiteralExp
		//    |StringLiteralExp
		//    |BooleanLiteralExp
		//    |NumericLiteralExp
		//    |NullLiteralExp
		//    |BagLiteralExp
		//    |OrderedSetLiteralExp
		//    |SequenceLiteralExp
		//    |SetLiteralExp
		//    |TupleLiteralExp
		//    |MapLiteralExp
		//    |EnumLiteralExp
		//    |IfExp
		//    |BraceExp
		//    |OclModelElementExp
		//    |ContextlessCallExp;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableExp
		//|SelfLiteralExp
		//|StringLiteralExp
		//|BooleanLiteralExp
		//|NumericLiteralExp
		//|NullLiteralExp
		//|BagLiteralExp
		//|OrderedSetLiteralExp
		//|SequenceLiteralExp
		//|SetLiteralExp
		//|TupleLiteralExp
		//|MapLiteralExp
		//|EnumLiteralExp
		//|IfExp
		//|BraceExp
		//|OclModelElementExp
		//|ContextlessCallExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableExp
		public RuleCall getVariableExpParserRuleCall_0() { return cVariableExpParserRuleCall_0; }
		
		//SelfLiteralExp
		public RuleCall getSelfLiteralExpParserRuleCall_1() { return cSelfLiteralExpParserRuleCall_1; }
		
		//StringLiteralExp
		public RuleCall getStringLiteralExpParserRuleCall_2() { return cStringLiteralExpParserRuleCall_2; }
		
		//BooleanLiteralExp
		public RuleCall getBooleanLiteralExpParserRuleCall_3() { return cBooleanLiteralExpParserRuleCall_3; }
		
		//NumericLiteralExp
		public RuleCall getNumericLiteralExpParserRuleCall_4() { return cNumericLiteralExpParserRuleCall_4; }
		
		//NullLiteralExp
		public RuleCall getNullLiteralExpParserRuleCall_5() { return cNullLiteralExpParserRuleCall_5; }
		
		//BagLiteralExp
		public RuleCall getBagLiteralExpParserRuleCall_6() { return cBagLiteralExpParserRuleCall_6; }
		
		//OrderedSetLiteralExp
		public RuleCall getOrderedSetLiteralExpParserRuleCall_7() { return cOrderedSetLiteralExpParserRuleCall_7; }
		
		//SequenceLiteralExp
		public RuleCall getSequenceLiteralExpParserRuleCall_8() { return cSequenceLiteralExpParserRuleCall_8; }
		
		//SetLiteralExp
		public RuleCall getSetLiteralExpParserRuleCall_9() { return cSetLiteralExpParserRuleCall_9; }
		
		//TupleLiteralExp
		public RuleCall getTupleLiteralExpParserRuleCall_10() { return cTupleLiteralExpParserRuleCall_10; }
		
		//MapLiteralExp
		public RuleCall getMapLiteralExpParserRuleCall_11() { return cMapLiteralExpParserRuleCall_11; }
		
		//EnumLiteralExp
		public RuleCall getEnumLiteralExpParserRuleCall_12() { return cEnumLiteralExpParserRuleCall_12; }
		
		//IfExp
		public RuleCall getIfExpParserRuleCall_13() { return cIfExpParserRuleCall_13; }
		
		//BraceExp
		public RuleCall getBraceExpParserRuleCall_14() { return cBraceExpParserRuleCall_14; }
		
		//OclModelElementExp
		public RuleCall getOclModelElementExpParserRuleCall_15() { return cOclModelElementExpParserRuleCall_15; }
		
		//ContextlessCallExp
		public RuleCall getContextlessCallExpParserRuleCall_16() { return cContextlessCallExpParserRuleCall_16; }
	}
	public class AuxiliaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Auxiliary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIteratorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAttributeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Auxiliary :Iterator|LocalVariable|Parameter|Attribute;
		@Override public ParserRule getRule() { return rule; }
		
		//Iterator|LocalVariable|Parameter|Attribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Iterator
		public RuleCall getIteratorParserRuleCall_0() { return cIteratorParserRuleCall_0; }
		
		//LocalVariable
		public RuleCall getLocalVariableParserRuleCall_1() { return cLocalVariableParserRuleCall_1; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_2() { return cParameterParserRuleCall_2; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_3() { return cAttributeParserRuleCall_3; }
	}
	public class VariableExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.VariableExp");
		private final Assignment cReferredVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferredVariableAuxiliaryCrossReference_0 = (CrossReference)cReferredVariableAssignment.eContents().get(0);
		private final RuleCall cReferredVariableAuxiliaryIDTerminalRuleCall_0_1 = (RuleCall)cReferredVariableAuxiliaryCrossReference_0.eContents().get(1);
		
		//VariableExp:
		//    referredVariable=[Auxiliary]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//referredVariable=[Auxiliary]
		public Assignment getReferredVariableAssignment() { return cReferredVariableAssignment; }
		
		//[Auxiliary]
		public CrossReference getReferredVariableAuxiliaryCrossReference_0() { return cReferredVariableAuxiliaryCrossReference_0; }
		
		//ID
		public RuleCall getReferredVariableAuxiliaryIDTerminalRuleCall_0_1() { return cReferredVariableAuxiliaryIDTerminalRuleCall_0_1; }
	}
	public class SelfLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.SelfLiteralExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelfLiteralExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSelfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SelfLiteralExp :
		//    {SelfLiteralExp}    'self'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SelfLiteralExp}	'self'
		public Group getGroup() { return cGroup; }
		
		//{SelfLiteralExp}
		public Action getSelfLiteralExpAction_0() { return cSelfLiteralExpAction_0; }
		
		//'self'
		public Keyword getSelfKeyword_1() { return cSelfKeyword_1; }
	}
	public class NullLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.NullLiteralExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteralExp :
		//    {NullLiteralExp} 'null'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{NullLiteralExp} 'null'
		public Group getGroup() { return cGroup; }
		
		//{NullLiteralExp}
		public Action getNullLiteralExpAction_0() { return cNullLiteralExpAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class StringLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.StringLiteralExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStringSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStringSymbolSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringSymbolAssignment_1.eContents().get(0);
		
		//StringLiteralExp :
		//    {StringLiteralExp}
		//    stringSymbol=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringLiteralExp}
		//stringSymbol=STRING
		public Group getGroup() { return cGroup; }
		
		//{StringLiteralExp}
		public Action getStringLiteralExpAction_0() { return cStringLiteralExpAction_0; }
		
		//stringSymbol=STRING
		public Assignment getStringSymbolAssignment_1() { return cStringSymbolAssignment_1; }
		
		//STRING
		public RuleCall getStringSymbolSTRINGTerminalRuleCall_1_0() { return cStringSymbolSTRINGTerminalRuleCall_1_0; }
	}
	public class NumericLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.NumericLiteralExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRealLiteralExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerLiteralExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericLiteralExp:
		//    RealLiteralExp|IntegerLiteralExp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RealLiteralExp|IntegerLiteralExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RealLiteralExp
		public RuleCall getRealLiteralExpParserRuleCall_0() { return cRealLiteralExpParserRuleCall_0; }
		
		//IntegerLiteralExp
		public RuleCall getIntegerLiteralExpParserRuleCall_1() { return cIntegerLiteralExpParserRuleCall_1; }
	}
	public class RealLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.RealLiteralExp");
		private final Assignment cRealSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRealSymbolDOUBLETerminalRuleCall_0 = (RuleCall)cRealSymbolAssignment.eContents().get(0);
		
		//RealLiteralExp : realSymbol=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//realSymbol=DOUBLE
		public Assignment getRealSymbolAssignment() { return cRealSymbolAssignment; }
		
		//DOUBLE
		public RuleCall getRealSymbolDOUBLETerminalRuleCall_0() { return cRealSymbolDOUBLETerminalRuleCall_0; }
	}
	public class IntegerLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.IntegerLiteralExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerLiteralExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIntegerSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntegerSymbolINTTerminalRuleCall_1_0 = (RuleCall)cIntegerSymbolAssignment_1.eContents().get(0);
		
		//IntegerLiteralExp:
		//    {IntegerLiteralExp}
		//    integerSymbol=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerLiteralExp}
		//integerSymbol=INT
		public Group getGroup() { return cGroup; }
		
		//{IntegerLiteralExp}
		public Action getIntegerLiteralExpAction_0() { return cIntegerLiteralExpAction_0; }
		
		//integerSymbol=INT
		public Assignment getIntegerSymbolAssignment_1() { return cIntegerSymbolAssignment_1; }
		
		//INT
		public RuleCall getIntegerSymbolINTTerminalRuleCall_1_0() { return cIntegerSymbolINTTerminalRuleCall_1_0; }
	}
	public class BagLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.BagLiteralExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBagLiteralExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBagKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BagLiteralExp:
		//    {BagLiteralExp}
		//    'Bag' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BagLiteralExp}
		//'Bag' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{BagLiteralExp}
		public Action getBagLiteralExpAction_0() { return cBagLiteralExpAction_0; }
		
		//'Bag'
		public Keyword getBagKeyword_1() { return cBagKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(elements+=OclExpression ("," elements+=OclExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_0_0() { return cElementsOclExpressionParserRuleCall_3_0_0; }
		
		//("," elements+=OclExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_1_1_0() { return cElementsOclExpressionParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class OrderedSetLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OrderedSetLiteralExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrderedSetLiteralExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrderedSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OrderedSetLiteralExp:
		//    {OrderedSetLiteralExp}
		//    'OrderedSet' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{OrderedSetLiteralExp}
		//'OrderedSet' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{OrderedSetLiteralExp}
		public Action getOrderedSetLiteralExpAction_0() { return cOrderedSetLiteralExpAction_0; }
		
		//'OrderedSet'
		public Keyword getOrderedSetKeyword_1() { return cOrderedSetKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(elements+=OclExpression ("," elements+=OclExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_0_0() { return cElementsOclExpressionParserRuleCall_3_0_0; }
		
		//("," elements+=OclExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_1_1_0() { return cElementsOclExpressionParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SequenceLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.SequenceLiteralExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceLiteralExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSequenceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SequenceLiteralExp:
		//    {SequenceLiteralExp}
		//    'Sequence' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SequenceLiteralExp}
		//'Sequence' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{SequenceLiteralExp}
		public Action getSequenceLiteralExpAction_0() { return cSequenceLiteralExpAction_0; }
		
		//'Sequence'
		public Keyword getSequenceKeyword_1() { return cSequenceKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(elements+=OclExpression ("," elements+=OclExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_0_0() { return cElementsOclExpressionParserRuleCall_3_0_0; }
		
		//("," elements+=OclExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_1_1_0() { return cElementsOclExpressionParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SetLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.SetLiteralExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetLiteralExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SetLiteralExp:
		//    {SetLiteralExp}
		//    'Set' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SetLiteralExp}
		//'Set' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{SetLiteralExp}
		public Action getSetLiteralExpAction_0() { return cSetLiteralExpAction_0; }
		
		//'Set'
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(elements+=OclExpression ("," elements+=OclExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_0_0() { return cElementsOclExpressionParserRuleCall_3_0_0; }
		
		//("," elements+=OclExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//elements+=OclExpression
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }
		
		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_1_1_0() { return cElementsOclExpressionParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TupleLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.TupleLiteralExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTupleLiteralExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTupleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTuplePartAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTuplePartTuplePartParserRuleCall_3_0_0 = (RuleCall)cTuplePartAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTuplePartAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTuplePartTuplePartParserRuleCall_3_1_1_0 = (RuleCall)cTuplePartAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TupleLiteralExp:
		//    {TupleLiteralExp}
		//    'Tuple' '{' (tuplePart+=TuplePart ("," tuplePart+=TuplePart)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TupleLiteralExp}
		//'Tuple' '{' (tuplePart+=TuplePart ("," tuplePart+=TuplePart)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{TupleLiteralExp}
		public Action getTupleLiteralExpAction_0() { return cTupleLiteralExpAction_0; }
		
		//'Tuple'
		public Keyword getTupleKeyword_1() { return cTupleKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(tuplePart+=TuplePart ("," tuplePart+=TuplePart)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//tuplePart+=TuplePart
		public Assignment getTuplePartAssignment_3_0() { return cTuplePartAssignment_3_0; }
		
		//TuplePart
		public RuleCall getTuplePartTuplePartParserRuleCall_3_0_0() { return cTuplePartTuplePartParserRuleCall_3_0_0; }
		
		//("," tuplePart+=TuplePart)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//tuplePart+=TuplePart
		public Assignment getTuplePartAssignment_3_1_1() { return cTuplePartAssignment_3_1_1; }
		
		//TuplePart
		public RuleCall getTuplePartTuplePartParserRuleCall_3_1_1_0() { return cTuplePartTuplePartParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TuplePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.TuplePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNameIDTerminalRuleCall_0_0 = (RuleCall)cVarNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeOclTypeLiteralParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitExpressionOclExpressionParserRuleCall_3_0 = (RuleCall)cInitExpressionAssignment_3.eContents().get(0);
		
		//TuplePart:
		//    varName=ID (':' type=OclTypeLiteral)? '=' initExpression=OclExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//varName=ID (':' type=OclTypeLiteral)? '=' initExpression=OclExpression
		public Group getGroup() { return cGroup; }
		
		//varName=ID
		public Assignment getVarNameAssignment_0() { return cVarNameAssignment_0; }
		
		//ID
		public RuleCall getVarNameIDTerminalRuleCall_0_0() { return cVarNameIDTerminalRuleCall_0_0; }
		
		//(':' type=OclTypeLiteral)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//type=OclTypeLiteral
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//OclTypeLiteral
		public RuleCall getTypeOclTypeLiteralParserRuleCall_1_1_0() { return cTypeOclTypeLiteralParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//initExpression=OclExpression
		public Assignment getInitExpressionAssignment_3() { return cInitExpressionAssignment_3; }
		
		//OclExpression
		public RuleCall getInitExpressionOclExpressionParserRuleCall_3_0() { return cInitExpressionOclExpressionParserRuleCall_3_0; }
	}
	public class MapLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.MapLiteralExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMapLiteralExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsMapElementParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsMapElementParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MapLiteralExp :
		//    {MapLiteralExp}
		//    'Map' '{' (elements+=MapElement (',' elements+=MapElement)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{MapLiteralExp}
		//'Map' '{' (elements+=MapElement (',' elements+=MapElement)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{MapLiteralExp}
		public Action getMapLiteralExpAction_0() { return cMapLiteralExpAction_0; }
		
		//'Map'
		public Keyword getMapKeyword_1() { return cMapKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(elements+=MapElement (',' elements+=MapElement)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//elements+=MapElement
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }
		
		//MapElement
		public RuleCall getElementsMapElementParserRuleCall_3_0_0() { return cElementsMapElementParserRuleCall_3_0_0; }
		
		//(',' elements+=MapElement)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//elements+=MapElement
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }
		
		//MapElement
		public RuleCall getElementsMapElementParserRuleCall_3_1_1_0() { return cElementsMapElementParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MapElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.MapElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyOclExpressionParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueOclExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MapElement :
		//    '(' key=OclExpression ',' value=OclExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' key=OclExpression ',' value=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//key=OclExpression
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//OclExpression
		public RuleCall getKeyOclExpressionParserRuleCall_1_0() { return cKeyOclExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//value=OclExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//OclExpression
		public RuleCall getValueOclExpressionParserRuleCall_3_0() { return cValueOclExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EnumLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.EnumLiteralExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEcoreTypesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEcoreTypesImportCrossReference_0_0 = (CrossReference)cEcoreTypesAssignment_0.eContents().get(0);
		private final RuleCall cEcoreTypesImportIDTerminalRuleCall_0_0_1 = (RuleCall)cEcoreTypesImportCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEnum_Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEnum_EEnumCrossReference_2_0 = (CrossReference)cEnum_Assignment_2.eContents().get(0);
		private final RuleCall cEnum_EEnumQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cEnum_EEnumCrossReference_2_0.eContents().get(1);
		private final Keyword cNumberSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//EnumLiteralExp :
		//    ecoreTypes=[Import]'!'enum_=[ecore::EEnum|QualifiedName] "#" name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ecoreTypes=[Import]'!'enum_=[ecore::EEnum|QualifiedName] "#" name=ID
		public Group getGroup() { return cGroup; }
		
		//ecoreTypes=[Import]
		public Assignment getEcoreTypesAssignment_0() { return cEcoreTypesAssignment_0; }
		
		//[Import]
		public CrossReference getEcoreTypesImportCrossReference_0_0() { return cEcoreTypesImportCrossReference_0_0; }
		
		//ID
		public RuleCall getEcoreTypesImportIDTerminalRuleCall_0_0_1() { return cEcoreTypesImportIDTerminalRuleCall_0_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//enum_=[ecore::EEnum|QualifiedName]
		public Assignment getEnum_Assignment_2() { return cEnum_Assignment_2; }
		
		//[ecore::EEnum|QualifiedName]
		public CrossReference getEnum_EEnumCrossReference_2_0() { return cEnum_EEnumCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getEnum_EEnumQualifiedNameParserRuleCall_2_0_1() { return cEnum_EEnumQualifiedNameParserRuleCall_2_0_1; }
		
		//"#"
		public Keyword getNumberSignKeyword_3() { return cNumberSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
	}
	public class LetExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.LetExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableLocalVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIn_Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIn_OclExpressionParserRuleCall_3_0 = (RuleCall)cIn_Assignment_3.eContents().get(0);
		
		//LetExp :
		//    'let' variable=LocalVariable 'in' in_=OclExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' variable=LocalVariable 'in' in_=OclExpression
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//variable=LocalVariable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//LocalVariable
		public RuleCall getVariableLocalVariableParserRuleCall_1_0() { return cVariableLocalVariableParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//in_=OclExpression
		public Assignment getIn_Assignment_3() { return cIn_Assignment_3; }
		
		//OclExpression
		public RuleCall getIn_OclExpressionParserRuleCall_3_0() { return cIn_OclExpressionParserRuleCall_3_0; }
	}
	public class IfExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.IfExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionOclExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionOclExpressionParserRuleCall_3_0 = (RuleCall)cThenExpressionAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseExpressionOclExpressionParserRuleCall_5_0 = (RuleCall)cElseExpressionAssignment_5.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfExp :
		//    'if' condition=OclExpression 'then' thenExpression=OclExpression 'else' elseExpression=OclExpression 'endif'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=OclExpression 'then' thenExpression=OclExpression 'else' elseExpression=OclExpression 'endif'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=OclExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//OclExpression
		public RuleCall getConditionOclExpressionParserRuleCall_1_0() { return cConditionOclExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//thenExpression=OclExpression
		public Assignment getThenExpressionAssignment_3() { return cThenExpressionAssignment_3; }
		
		//OclExpression
		public RuleCall getThenExpressionOclExpressionParserRuleCall_3_0() { return cThenExpressionOclExpressionParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//elseExpression=OclExpression
		public Assignment getElseExpressionAssignment_5() { return cElseExpressionAssignment_5; }
		
		//OclExpression
		public RuleCall getElseExpressionOclExpressionParserRuleCall_5_0() { return cElseExpressionOclExpressionParserRuleCall_5_0; }
		
		//'endif'
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
	}
	public class BraceExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.BraceExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpOclExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BraceExp :
		//    '(' exp=OclExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' exp=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//exp=OclExpression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//OclExpression
		public RuleCall getExpOclExpressionParserRuleCall_1_0() { return cExpOclExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ContextlessCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.ContextlessCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationNameIDTerminalRuleCall_0_0 = (RuleCall)cOperationNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ContextlessCallExp :
		//    operationName=ID '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//operationName=ID '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//operationName=ID
		public Assignment getOperationNameAssignment_0() { return cOperationNameAssignment_0; }
		
		//ID
		public RuleCall getOperationNameIDTerminalRuleCall_0_0() { return cOperationNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(arguments+=OclExpression (',' arguments+=OclExpression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }
		
		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_2_0_0() { return cArgumentsOclExpressionParserRuleCall_2_0_0; }
		
		//(',' arguments+=OclExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }
		
		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_2_1_1_0() { return cArgumentsOclExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BooleanLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.BooleanLiteralExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBooleanSymbolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cBooleanSymbolTrueKeyword_0_0 = (Keyword)cBooleanSymbolAssignment_0.eContents().get(0);
		private final Assignment cBooleanSymbolAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cBooleanSymbolFalseKeyword_1_0 = (Keyword)cBooleanSymbolAssignment_1.eContents().get(0);
		
		//BooleanLiteralExp:
		//    booleanSymbol= 'true'|booleanSymbol= 'false'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//booleanSymbol= 'true'|booleanSymbol= 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//booleanSymbol= 'true'
		public Assignment getBooleanSymbolAssignment_0() { return cBooleanSymbolAssignment_0; }
		
		//'true'
		public Keyword getBooleanSymbolTrueKeyword_0_0() { return cBooleanSymbolTrueKeyword_0_0; }
		
		//booleanSymbol= 'false'
		public Assignment getBooleanSymbolAssignment_1() { return cBooleanSymbolAssignment_1; }
		
		//'false'
		public Keyword getBooleanSymbolFalseKeyword_1_0() { return cBooleanSymbolFalseKeyword_1_0; }
	}
	public class PropertyCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.PropertyCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNavigationOrAttributeCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIterateExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIteratorExpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCollectionOperationCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//PropertyCall:
		//    OperationCall|NavigationOrAttributeCall|IterateExp|IteratorExp|CollectionOperationCall
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationCall|NavigationOrAttributeCall|IterateExp|IteratorExp|CollectionOperationCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationCall
		public RuleCall getOperationCallParserRuleCall_0() { return cOperationCallParserRuleCall_0; }
		
		//NavigationOrAttributeCall
		public RuleCall getNavigationOrAttributeCallParserRuleCall_1() { return cNavigationOrAttributeCallParserRuleCall_1; }
		
		//IterateExp
		public RuleCall getIterateExpParserRuleCall_2() { return cIterateExpParserRuleCall_2; }
		
		//IteratorExp
		public RuleCall getIteratorExpParserRuleCall_3() { return cIteratorExpParserRuleCall_3; }
		
		//CollectionOperationCall
		public RuleCall getCollectionOperationCallParserRuleCall_4() { return cCollectionOperationCallParserRuleCall_4; }
	}
	public class OperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationNameIDTerminalRuleCall_1_0 = (RuleCall)cOperationNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OperationCall:
		//    '.' operationName=ID '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' operationName=ID '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//operationName=ID
		public Assignment getOperationNameAssignment_1() { return cOperationNameAssignment_1; }
		
		//ID
		public RuleCall getOperationNameIDTerminalRuleCall_1_0() { return cOperationNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(arguments+=OclExpression (',' arguments+=OclExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }
		
		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_3_0_0() { return cArgumentsOclExpressionParserRuleCall_3_0_0; }
		
		//(',' arguments+=OclExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_3_1_1_0() { return cArgumentsOclExpressionParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class NavigationOrAttributeCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.NavigationOrAttributeCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NavigationOrAttributeCall :
		//    '.' name=ID
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' name=ID
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class IterateExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.IterateExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIterateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIteratorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIteratorsIteratorParserRuleCall_3_0 = (RuleCall)cIteratorsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIteratorsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIteratorsIteratorParserRuleCall_4_1_0 = (RuleCall)cIteratorsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cResultAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cResultLocalVariableParserRuleCall_6_0 = (RuleCall)cResultAssignment_6.eContents().get(0);
		private final Keyword cVerticalLineKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyOclExpressionParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//IterateExp:
		//    '->' 'iterate' '(' iterators+=Iterator (',' iterators+=Iterator)* ';' result=LocalVariable '|' body=OclExpression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'->' 'iterate' '(' iterators+=Iterator (',' iterators+=Iterator)* ';' result=LocalVariable '|' body=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//'iterate'
		public Keyword getIterateKeyword_1() { return cIterateKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//iterators+=Iterator
		public Assignment getIteratorsAssignment_3() { return cIteratorsAssignment_3; }
		
		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_3_0() { return cIteratorsIteratorParserRuleCall_3_0; }
		
		//(',' iterators+=Iterator)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//iterators+=Iterator
		public Assignment getIteratorsAssignment_4_1() { return cIteratorsAssignment_4_1; }
		
		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_4_1_0() { return cIteratorsIteratorParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//result=LocalVariable
		public Assignment getResultAssignment_6() { return cResultAssignment_6; }
		
		//LocalVariable
		public RuleCall getResultLocalVariableParserRuleCall_6_0() { return cResultLocalVariableParserRuleCall_6_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_7() { return cVerticalLineKeyword_7; }
		
		//body=OclExpression
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_8_0() { return cBodyOclExpressionParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class IteratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Iterator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeOclTypeLiteralParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//Iterator :
		//    name=ID (':' type=OclTypeLiteral)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (':' type=OclTypeLiteral)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(':' type=OclTypeLiteral)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//type=OclTypeLiteral
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//OclTypeLiteral
		public RuleCall getTypeOclTypeLiteralParserRuleCall_1_1_0() { return cTypeOclTypeLiteralParserRuleCall_1_1_0; }
	}
	public class IteratorExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.IteratorExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIteratorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIteratorsIteratorParserRuleCall_3_0 = (RuleCall)cIteratorsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIteratorsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIteratorsIteratorParserRuleCall_4_1_0 = (RuleCall)cIteratorsAssignment_4_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyOclExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IteratorExp :
		//    '->' name=ID '(' iterators+=Iterator (',' iterators+=Iterator)* '|' body=OclExpression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'->' name=ID '(' iterators+=Iterator (',' iterators+=Iterator)* '|' body=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//iterators+=Iterator
		public Assignment getIteratorsAssignment_3() { return cIteratorsAssignment_3; }
		
		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_3_0() { return cIteratorsIteratorParserRuleCall_3_0; }
		
		//(',' iterators+=Iterator)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//iterators+=Iterator
		public Assignment getIteratorsAssignment_4_1() { return cIteratorsAssignment_4_1; }
		
		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_4_1_0() { return cIteratorsIteratorParserRuleCall_4_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_5() { return cVerticalLineKeyword_5; }
		
		//body=OclExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_6_0() { return cBodyOclExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class CollectionOperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.CollectionOperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationNameIDTerminalRuleCall_1_0 = (RuleCall)cOperationNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CollectionOperationCall :
		//    '->' operationName=ID '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'->' operationName=ID '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//operationName=ID
		public Assignment getOperationNameAssignment_1() { return cOperationNameAssignment_1; }
		
		//ID
		public RuleCall getOperationNameIDTerminalRuleCall_1_0() { return cOperationNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(arguments+=OclExpression (',' arguments+=OclExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }
		
		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_3_0_0() { return cArgumentsOclExpressionParserRuleCall_3_0_0; }
		
		//(',' arguments+=OclExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_3_1_1_0() { return cArgumentsOclExpressionParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LocalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.LocalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeOclTypeLiteralParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitExpressionOclExpressionParserRuleCall_3_0 = (RuleCall)cInitExpressionAssignment_3.eContents().get(0);
		
		//LocalVariable :
		//    name=ID (':' type=OclTypeLiteral)? '=' initExpression=OclExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (':' type=OclTypeLiteral)? '=' initExpression=OclExpression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(':' type=OclTypeLiteral)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//type=OclTypeLiteral
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//OclTypeLiteral
		public RuleCall getTypeOclTypeLiteralParserRuleCall_1_1_0() { return cTypeOclTypeLiteralParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//initExpression=OclExpression
		public Assignment getInitExpressionAssignment_3() { return cInitExpressionAssignment_3; }
		
		//OclExpression
		public RuleCall getInitExpressionOclExpressionParserRuleCall_3_0() { return cInitExpressionOclExpressionParserRuleCall_3_0; }
	}
	public class OclTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclTypeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionTypeLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOclAnyTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOclVoidTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTupleTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOclModelElementClassParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMapTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//OclTypeLiteral :
		//    CollectionTypeLiteral
		//    | Primitive
		//    | OclAnyType
		//    | OclVoidType
		//    | TupleType
		//    | OclModelElementClass
		//    | MapType
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//CollectionTypeLiteral
		//| Primitive
		//| OclAnyType
		//| OclVoidType
		//| TupleType
		//| OclModelElementClass
		//| MapType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CollectionTypeLiteral
		public RuleCall getCollectionTypeLiteralParserRuleCall_0() { return cCollectionTypeLiteralParserRuleCall_0; }
		
		//Primitive
		public RuleCall getPrimitiveParserRuleCall_1() { return cPrimitiveParserRuleCall_1; }
		
		//OclAnyType
		public RuleCall getOclAnyTypeParserRuleCall_2() { return cOclAnyTypeParserRuleCall_2; }
		
		//OclVoidType
		public RuleCall getOclVoidTypeParserRuleCall_3() { return cOclVoidTypeParserRuleCall_3; }
		
		//TupleType
		public RuleCall getTupleTypeParserRuleCall_4() { return cTupleTypeParserRuleCall_4; }
		
		//OclModelElementClass
		public RuleCall getOclModelElementClassParserRuleCall_5() { return cOclModelElementClassParserRuleCall_5; }
		
		//MapType
		public RuleCall getMapTypeParserRuleCall_6() { return cMapTypeParserRuleCall_6; }
	}
	public class CollectionTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.CollectionTypeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBagTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOrderedSetTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSequenceTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSetTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//CollectionTypeLiteral:
		//    CollectionType
		//    | BagType
		//    | OrderedSetType
		//    | SequenceType
		//    | SetType
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//CollectionType
		//| BagType
		//| OrderedSetType
		//| SequenceType
		//| SetType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CollectionType
		public RuleCall getCollectionTypeParserRuleCall_0() { return cCollectionTypeParserRuleCall_0; }
		
		//BagType
		public RuleCall getBagTypeParserRuleCall_1() { return cBagTypeParserRuleCall_1; }
		
		//OrderedSetType
		public RuleCall getOrderedSetTypeParserRuleCall_2() { return cOrderedSetTypeParserRuleCall_2; }
		
		//SequenceType
		public RuleCall getSequenceTypeParserRuleCall_3() { return cSequenceTypeParserRuleCall_3; }
		
		//SetType
		public RuleCall getSetTypeParserRuleCall_4() { return cSetTypeParserRuleCall_4; }
	}
	public class CollectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.CollectionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeOclTypeLiteralParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CollectionType :
		//    'Collection' '(' elementType=OclTypeLiteral ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Collection' '(' elementType=OclTypeLiteral ')'
		public Group getGroup() { return cGroup; }
		
		//'Collection'
		public Keyword getCollectionKeyword_0() { return cCollectionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elementType=OclTypeLiteral
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//OclTypeLiteral
		public RuleCall getElementTypeOclTypeLiteralParserRuleCall_2_0() { return cElementTypeOclTypeLiteralParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BagTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.BagType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBagKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeOclTypeLiteralParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BagType :
		//    'Bag' '(' elementType=OclTypeLiteral ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Bag' '(' elementType=OclTypeLiteral ')'
		public Group getGroup() { return cGroup; }
		
		//'Bag'
		public Keyword getBagKeyword_0() { return cBagKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elementType=OclTypeLiteral
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//OclTypeLiteral
		public RuleCall getElementTypeOclTypeLiteralParserRuleCall_2_0() { return cElementTypeOclTypeLiteralParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OrderedSetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OrderedSetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrderedSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeOclTypeLiteralParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OrderedSetType :
		//    'OrderedSet' '(' elementType=OclTypeLiteral ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'OrderedSet' '(' elementType=OclTypeLiteral ')'
		public Group getGroup() { return cGroup; }
		
		//'OrderedSet'
		public Keyword getOrderedSetKeyword_0() { return cOrderedSetKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elementType=OclTypeLiteral
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//OclTypeLiteral
		public RuleCall getElementTypeOclTypeLiteralParserRuleCall_2_0() { return cElementTypeOclTypeLiteralParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SequenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.SequenceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeOclTypeLiteralParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SequenceType :
		//    'Sequence' '(' elementType=OclTypeLiteral ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sequence' '(' elementType=OclTypeLiteral ')'
		public Group getGroup() { return cGroup; }
		
		//'Sequence'
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elementType=OclTypeLiteral
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//OclTypeLiteral
		public RuleCall getElementTypeOclTypeLiteralParserRuleCall_2_0() { return cElementTypeOclTypeLiteralParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.SetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeOclTypeLiteralParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetType :
		//    'Set' '(' elementType=OclTypeLiteral ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Set' '(' elementType=OclTypeLiteral ')'
		public Group getGroup() { return cGroup; }
		
		//'Set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elementType=OclTypeLiteral
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//OclTypeLiteral
		public RuleCall getElementTypeOclTypeLiteralParserRuleCall_2_0() { return cElementTypeOclTypeLiteralParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumericTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primitive:
		//    StringType
		//    | BooleanType
		//    | NumericType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StringType
		//| BooleanType
		//| NumericType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_0() { return cStringTypeParserRuleCall_0; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_1() { return cBooleanTypeParserRuleCall_1; }
		
		//NumericType
		public RuleCall getNumericTypeParserRuleCall_2() { return cNumericTypeParserRuleCall_2; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringType:
		//    {StringType}'String'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType}'String'
		public Group getGroup() { return cGroup; }
		
		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//'String'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanType:
		//    {BooleanType}'Boolean'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanType}'Boolean'
		public Group getGroup() { return cGroup; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
	}
	public class NumericTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.NumericType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericType:
		//    IntegerType
		//    |RealType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerType
		//|RealType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_0() { return cIntegerTypeParserRuleCall_0; }
		
		//RealType
		public RuleCall getRealTypeParserRuleCall_1() { return cRealTypeParserRuleCall_1; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.IntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntegerType:
		//    {IntegerType}'Integer'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType}'Integer'
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
	}
	public class RealTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.RealType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRealKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RealType:
		//    {RealType}'Real'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RealType}'Real'
		public Group getGroup() { return cGroup; }
		
		//{RealType}
		public Action getRealTypeAction_0() { return cRealTypeAction_0; }
		
		//'Real'
		public Keyword getRealKeyword_1() { return cRealKeyword_1; }
	}
	public class OclAnyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclAnyType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOclAnyTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOclAnyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OclAnyType :
		//    {OclAnyType}'OclAny'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{OclAnyType}'OclAny'
		public Group getGroup() { return cGroup; }
		
		//{OclAnyType}
		public Action getOclAnyTypeAction_0() { return cOclAnyTypeAction_0; }
		
		//'OclAny'
		public Keyword getOclAnyKeyword_1() { return cOclAnyKeyword_1; }
	}
	public class OclVoidTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclVoidType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOclVoidTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOclVoidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OclVoidType :
		//    {OclVoidType}'OclVoid'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{OclVoidType}'OclVoid'
		public Group getGroup() { return cGroup; }
		
		//{OclVoidType}
		public Action getOclVoidTypeAction_0() { return cOclVoidTypeAction_0; }
		
		//'OclVoid'
		public Keyword getOclVoidKeyword_1() { return cOclVoidKeyword_1; }
	}
	public class TupleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.TupleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTupleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTupleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cAttributesTupleTypeAttributeParserRuleCall_3_0_0 = (RuleCall)cAttributesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cAttributesTupleTypeAttributeParserRuleCall_3_1_1_0 = (RuleCall)cAttributesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TupleType :
		//    {TupleType}
		//     ('Tuple') '(' (attributes+=TupleTypeAttribute (',' attributes+=TupleTypeAttribute)*)? ')'
		//     ;
		@Override public ParserRule getRule() { return rule; }
		
		//{TupleType}
		// ('Tuple') '(' (attributes+=TupleTypeAttribute (',' attributes+=TupleTypeAttribute)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{TupleType}
		public Action getTupleTypeAction_0() { return cTupleTypeAction_0; }
		
		//('Tuple')
		public Keyword getTupleKeyword_1() { return cTupleKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(attributes+=TupleTypeAttribute (',' attributes+=TupleTypeAttribute)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//attributes+=TupleTypeAttribute
		public Assignment getAttributesAssignment_3_0() { return cAttributesAssignment_3_0; }
		
		//TupleTypeAttribute
		public RuleCall getAttributesTupleTypeAttributeParserRuleCall_3_0_0() { return cAttributesTupleTypeAttributeParserRuleCall_3_0_0; }
		
		//(',' attributes+=TupleTypeAttribute)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//attributes+=TupleTypeAttribute
		public Assignment getAttributesAssignment_3_1_1() { return cAttributesAssignment_3_1_1; }
		
		//TupleTypeAttribute
		public RuleCall getAttributesTupleTypeAttributeParserRuleCall_3_1_1_0() { return cAttributesTupleTypeAttributeParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TupleTypeAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.TupleTypeAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOclTypeLiteralParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TupleTypeAttribute : name=ID ':' type=OclTypeLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=OclTypeLiteral
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=OclTypeLiteral
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//OclTypeLiteral
		public RuleCall getTypeOclTypeLiteralParserRuleCall_2_0() { return cTypeOclTypeLiteralParserRuleCall_2_0; }
	}
	public class OclModelElementClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.OclModelElementClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModelImportCrossReference_0_0 = (CrossReference)cModelAssignment_0.eContents().get(0);
		private final RuleCall cModelImportIDTerminalRuleCall_0_0_1 = (RuleCall)cModelImportCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameEClassCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameEClassIDTerminalRuleCall_2_0_1 = (RuleCall)cNameEClassCrossReference_2_0.eContents().get(1);
		
		//OclModelElementClass: model=[Import]'!'name=[ecore::EClass];
		@Override public ParserRule getRule() { return rule; }
		
		//model=[Import]'!'name=[ecore::EClass]
		public Group getGroup() { return cGroup; }
		
		//model=[Import]
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }
		
		//[Import]
		public CrossReference getModelImportCrossReference_0_0() { return cModelImportCrossReference_0_0; }
		
		//ID
		public RuleCall getModelImportIDTerminalRuleCall_0_0_1() { return cModelImportIDTerminalRuleCall_0_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//name=[ecore::EClass]
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//[ecore::EClass]
		public CrossReference getNameEClassCrossReference_2_0() { return cNameEClassCrossReference_2_0; }
		
		//ID
		public RuleCall getNameEClassIDTerminalRuleCall_2_0_1() { return cNameEClassIDTerminalRuleCall_2_0_1; }
	}
	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.MapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyTypeOclTypeLiteralParserRuleCall_2_0 = (RuleCall)cKeyTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueTypeOclTypeLiteralParserRuleCall_4_0 = (RuleCall)cValueTypeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MapType :
		//    'Map' '(' keyType=OclTypeLiteral ',' valueType=OclTypeLiteral ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Map' '(' keyType=OclTypeLiteral ',' valueType=OclTypeLiteral ')'
		public Group getGroup() { return cGroup; }
		
		//'Map'
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//keyType=OclTypeLiteral
		public Assignment getKeyTypeAssignment_2() { return cKeyTypeAssignment_2; }
		
		//OclTypeLiteral
		public RuleCall getKeyTypeOclTypeLiteralParserRuleCall_2_0() { return cKeyTypeOclTypeLiteralParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//valueType=OclTypeLiteral
		public Assignment getValueTypeAssignment_4() { return cValueTypeAssignment_4; }
		
		//OclTypeLiteral
		public RuleCall getValueTypeOclTypeLiteralParserRuleCall_4_0() { return cValueTypeOclTypeLiteralParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName: ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ModuleElements pModule;
	private final ImportElements pImport;
	private final OclContextBlockElements pOclContextBlock;
	private final OclFeatureDefinitionElements pOclFeatureDefinition;
	private final AttributeElements pAttribute;
	private final OperationElements pOperation;
	private final ParameterElements pParameter;
	private final OclInvariantElements pOclInvariant;
	private final OclExpressionElements pOclExpression;
	private final OclModelElementExpElements pOclModelElementExp;
	private final OperatorCallExpElements pOperatorCallExp;
	private final BOOLOPElements pBOOLOP;
	private final EqOpCallExpElements pEqOpCallExp;
	private final EQOPElements pEQOP;
	private final RelOpCallExpElements pRelOpCallExp;
	private final RELOPElements pRELOP;
	private final AddOpCallExpElements pAddOpCallExp;
	private final ADDOPElements pADDOP;
	private final IntOpCallExpElements pIntOpCallExp;
	private final INTOPElements pINTOP;
	private final MulOpCallExpElements pMulOpCallExp;
	private final MULOPElements pMULOP;
	private final NotOpCallExpElements pNotOpCallExp;
	private final UNARYOPElements pUNARYOP;
	private final PropertyCallExpElements pPropertyCallExp;
	private final Primary_OclExpressionElements pPrimary_OclExpression;
	private final AuxiliaryElements pAuxiliary;
	private final VariableExpElements pVariableExp;
	private final SelfLiteralExpElements pSelfLiteralExp;
	private final NullLiteralExpElements pNullLiteralExp;
	private final StringLiteralExpElements pStringLiteralExp;
	private final NumericLiteralExpElements pNumericLiteralExp;
	private final RealLiteralExpElements pRealLiteralExp;
	private final IntegerLiteralExpElements pIntegerLiteralExp;
	private final BagLiteralExpElements pBagLiteralExp;
	private final OrderedSetLiteralExpElements pOrderedSetLiteralExp;
	private final SequenceLiteralExpElements pSequenceLiteralExp;
	private final SetLiteralExpElements pSetLiteralExp;
	private final TupleLiteralExpElements pTupleLiteralExp;
	private final TuplePartElements pTuplePart;
	private final MapLiteralExpElements pMapLiteralExp;
	private final MapElementElements pMapElement;
	private final EnumLiteralExpElements pEnumLiteralExp;
	private final LetExpElements pLetExp;
	private final IfExpElements pIfExp;
	private final BraceExpElements pBraceExp;
	private final ContextlessCallExpElements pContextlessCallExp;
	private final BooleanLiteralExpElements pBooleanLiteralExp;
	private final PropertyCallElements pPropertyCall;
	private final OperationCallElements pOperationCall;
	private final NavigationOrAttributeCallElements pNavigationOrAttributeCall;
	private final IterateExpElements pIterateExp;
	private final IteratorElements pIterator;
	private final IteratorExpElements pIteratorExp;
	private final CollectionOperationCallElements pCollectionOperationCall;
	private final LocalVariableElements pLocalVariable;
	private final OclTypeLiteralElements pOclTypeLiteral;
	private final CollectionTypeLiteralElements pCollectionTypeLiteral;
	private final CollectionTypeElements pCollectionType;
	private final BagTypeElements pBagType;
	private final OrderedSetTypeElements pOrderedSetType;
	private final SequenceTypeElements pSequenceType;
	private final SetTypeElements pSetType;
	private final PrimitiveElements pPrimitive;
	private final StringTypeElements pStringType;
	private final BooleanTypeElements pBooleanType;
	private final NumericTypeElements pNumericType;
	private final IntegerTypeElements pIntegerType;
	private final RealTypeElements pRealType;
	private final OclAnyTypeElements pOclAnyType;
	private final OclVoidTypeElements pOclVoidType;
	private final TupleTypeElements pTupleType;
	private final TupleTypeAttributeElements pTupleTypeAttribute;
	private final OclModelElementClassElements pOclModelElementClass;
	private final MapTypeElements pMapType;
	private final TerminalRule tDOUBLE;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OclGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModule = new ModuleElements();
		this.pImport = new ImportElements();
		this.pOclContextBlock = new OclContextBlockElements();
		this.pOclFeatureDefinition = new OclFeatureDefinitionElements();
		this.pAttribute = new AttributeElements();
		this.pOperation = new OperationElements();
		this.pParameter = new ParameterElements();
		this.pOclInvariant = new OclInvariantElements();
		this.pOclExpression = new OclExpressionElements();
		this.pOclModelElementExp = new OclModelElementExpElements();
		this.pOperatorCallExp = new OperatorCallExpElements();
		this.pBOOLOP = new BOOLOPElements();
		this.pEqOpCallExp = new EqOpCallExpElements();
		this.pEQOP = new EQOPElements();
		this.pRelOpCallExp = new RelOpCallExpElements();
		this.pRELOP = new RELOPElements();
		this.pAddOpCallExp = new AddOpCallExpElements();
		this.pADDOP = new ADDOPElements();
		this.pIntOpCallExp = new IntOpCallExpElements();
		this.pINTOP = new INTOPElements();
		this.pMulOpCallExp = new MulOpCallExpElements();
		this.pMULOP = new MULOPElements();
		this.pNotOpCallExp = new NotOpCallExpElements();
		this.pUNARYOP = new UNARYOPElements();
		this.pPropertyCallExp = new PropertyCallExpElements();
		this.pPrimary_OclExpression = new Primary_OclExpressionElements();
		this.pAuxiliary = new AuxiliaryElements();
		this.pVariableExp = new VariableExpElements();
		this.pSelfLiteralExp = new SelfLiteralExpElements();
		this.pNullLiteralExp = new NullLiteralExpElements();
		this.pStringLiteralExp = new StringLiteralExpElements();
		this.pNumericLiteralExp = new NumericLiteralExpElements();
		this.pRealLiteralExp = new RealLiteralExpElements();
		this.pIntegerLiteralExp = new IntegerLiteralExpElements();
		this.pBagLiteralExp = new BagLiteralExpElements();
		this.pOrderedSetLiteralExp = new OrderedSetLiteralExpElements();
		this.pSequenceLiteralExp = new SequenceLiteralExpElements();
		this.pSetLiteralExp = new SetLiteralExpElements();
		this.pTupleLiteralExp = new TupleLiteralExpElements();
		this.pTuplePart = new TuplePartElements();
		this.pMapLiteralExp = new MapLiteralExpElements();
		this.pMapElement = new MapElementElements();
		this.pEnumLiteralExp = new EnumLiteralExpElements();
		this.pLetExp = new LetExpElements();
		this.pIfExp = new IfExpElements();
		this.pBraceExp = new BraceExpElements();
		this.pContextlessCallExp = new ContextlessCallExpElements();
		this.pBooleanLiteralExp = new BooleanLiteralExpElements();
		this.pPropertyCall = new PropertyCallElements();
		this.pOperationCall = new OperationCallElements();
		this.pNavigationOrAttributeCall = new NavigationOrAttributeCallElements();
		this.pIterateExp = new IterateExpElements();
		this.pIterator = new IteratorElements();
		this.pIteratorExp = new IteratorExpElements();
		this.pCollectionOperationCall = new CollectionOperationCallElements();
		this.pLocalVariable = new LocalVariableElements();
		this.pOclTypeLiteral = new OclTypeLiteralElements();
		this.pCollectionTypeLiteral = new CollectionTypeLiteralElements();
		this.pCollectionType = new CollectionTypeElements();
		this.pBagType = new BagTypeElements();
		this.pOrderedSetType = new OrderedSetTypeElements();
		this.pSequenceType = new SequenceTypeElements();
		this.pSetType = new SetTypeElements();
		this.pPrimitive = new PrimitiveElements();
		this.pStringType = new StringTypeElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pNumericType = new NumericTypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pRealType = new RealTypeElements();
		this.pOclAnyType = new OclAnyTypeElements();
		this.pOclVoidType = new OclVoidTypeElements();
		this.pTupleType = new TupleTypeElements();
		this.pTupleTypeAttribute = new TupleTypeAttributeElements();
		this.pOclModelElementClass = new OclModelElementClassElements();
		this.pMapType = new MapTypeElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.DOUBLE");
		this.pQualifiedName = new QualifiedNameElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.enseeiht.ocl.xtext.Ocl.SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.enseeiht.ocl.xtext.Ocl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Module:
	//    (imports+=Import)+ (contextlessFeatures+=OclFeatureDefinition)* (contextBlocks+=OclContextBlock)+
	//;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//Import:
	//    'import' package=[ecore::EPackage|STRING] 'as'name=ID;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//OclContextBlock:
	//    ('context' ecoreTypes=[Import]'!'class=[ecore::EClass|QualifiedName]) (members+=(OclFeatureDefinition|OclInvariant))+
	//;
	public OclContextBlockElements getOclContextBlockAccess() {
		return pOclContextBlock;
	}
	
	public ParserRule getOclContextBlockRule() {
		return getOclContextBlockAccess().getRule();
	}
	
	//OclFeatureDefinition:
	//    'def' ':' feature = (Attribute|Operation)
	//;
	public OclFeatureDefinitionElements getOclFeatureDefinitionAccess() {
		return pOclFeatureDefinition;
	}
	
	public ParserRule getOclFeatureDefinitionRule() {
		return getOclFeatureDefinitionAccess().getRule();
	}
	
	//Attribute :
	//    name=ID ':' type=OclTypeLiteral '=' initExpression=OclExpression
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Operation:
	//    name=ID  '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ':' returnType=OclTypeLiteral '=' body=OclExpression
	//;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Parameter:
	//    name=ID ':' type=OclTypeLiteral
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//OclInvariant:
	//    'inv' name=ID ':' body=OclExpression
	//;
	public OclInvariantElements getOclInvariantAccess() {
		return pOclInvariant;
	}
	
	public ParserRule getOclInvariantRule() {
		return getOclInvariantAccess().getRule();
	}
	
	//OclExpression returns OclExpression :
	//    OperatorCallExp|LetExp;
	public OclExpressionElements getOclExpressionAccess() {
		return pOclExpression;
	}
	
	public ParserRule getOclExpressionRule() {
		return getOclExpressionAccess().getRule();
	}
	
	//OclModelElementExp :
	//    model=[Import]'!'name=ID
	//;
	public OclModelElementExpElements getOclModelElementExpAccess() {
		return pOclModelElementExp;
	}
	
	public ParserRule getOclModelElementExpRule() {
		return getOclModelElementExpAccess().getRule();
	}
	
	////priority_5
	//OperatorCallExp:
	//    // args+=EqOpCallExp (({OperatorCallExp.source=current} operationNames+=BOOLOP)     args+=EqOpCallExp )*
	//    args+=EqOpCallExp (operationNames+=BOOLOP args+=EqOpCallExp)*
	//;
	public OperatorCallExpElements getOperatorCallExpAccess() {
		return pOperatorCallExp;
	}
	
	public ParserRule getOperatorCallExpRule() {
		return getOperatorCallExpAccess().getRule();
	}
	
	//BOOLOP  		: 'and'|'or'|'xor'|'implies';
	public BOOLOPElements getBOOLOPAccess() {
		return pBOOLOP;
	}
	
	public ParserRule getBOOLOPRule() {
		return getBOOLOPAccess().getRule();
	}
	
	//EqOpCallExp:
	//    //args+=RelOpCallExp (({EqOpCallExp.source=current} operationNames+=EQOP)     args+=RelOpCallExp )?
	//    args+=RelOpCallExp (operationNames+=EQOP args+=RelOpCallExp)?
	//;
	public EqOpCallExpElements getEqOpCallExpAccess() {
		return pEqOpCallExp;
	}
	
	public ParserRule getEqOpCallExpRule() {
		return getEqOpCallExpAccess().getRule();
	}
	
	//EQOP  		: '='|'<>';
	public EQOPElements getEQOPAccess() {
		return pEQOP;
	}
	
	public ParserRule getEQOPRule() {
		return getEQOPAccess().getRule();
	}
	
	//RelOpCallExp:
	//    //args+=AddOpCallExp (({RelOpCallExp.source=current} operationNames+=RELOP)     args+=AddOpCallExp )?
	//    args+=AddOpCallExp (operationNames+=RELOP args+=AddOpCallExp)?
	//;
	public RelOpCallExpElements getRelOpCallExpAccess() {
		return pRelOpCallExp;
	}
	
	public ParserRule getRelOpCallExpRule() {
		return getRelOpCallExpAccess().getRule();
	}
	
	//RELOP  		: '>'|'<'|'>='|'<=' ;
	public RELOPElements getRELOPAccess() {
		return pRELOP;
	}
	
	public ParserRule getRELOPRule() {
		return getRELOPAccess().getRule();
	}
	
	//AddOpCallExp:
	//    //args+=IntOpCallExp (({AddOpCallExp.source=current} operationNames+=ADDOP)     args+=IntOpCallExp )*
	//    args+=IntOpCallExp (operationNames+=ADDOP args+=IntOpCallExp)*
	//;
	public AddOpCallExpElements getAddOpCallExpAccess() {
		return pAddOpCallExp;
	}
	
	public ParserRule getAddOpCallExpRule() {
		return getAddOpCallExpAccess().getRule();
	}
	
	//ADDOP : '-'|'+';
	public ADDOPElements getADDOPAccess() {
		return pADDOP;
	}
	
	public ParserRule getADDOPRule() {
		return getADDOPAccess().getRule();
	}
	
	//IntOpCallExp :
	//    //args+=MulOpCallExp (({IntOpCallExp.source=current} operationNames+=INTOP)     args+=MulOpCallExp )*
	//    args+=MulOpCallExp (operationNames+=INTOP args+=MulOpCallExp)*
	//;
	public IntOpCallExpElements getIntOpCallExpAccess() {
		return pIntOpCallExp;
	}
	
	public ParserRule getIntOpCallExpRule() {
		return getIntOpCallExpAccess().getRule();
	}
	
	//INTOP : 'div'|'mod';
	public INTOPElements getINTOPAccess() {
		return pINTOP;
	}
	
	public ParserRule getINTOPRule() {
		return getINTOPAccess().getRule();
	}
	
	//MulOpCallExp:
	//    //args+=NotOpCallExp (({MulOpCallExp.source=current} operationNames+=MULOP)     args+=NotOpCallExp )*
	//    args+=NotOpCallExp (operationNames+=MULOP args+=NotOpCallExp)*
	//;
	public MulOpCallExpElements getMulOpCallExpAccess() {
		return pMulOpCallExp;
	}
	
	public ParserRule getMulOpCallExpRule() {
		return getMulOpCallExpAccess().getRule();
	}
	
	//MULOP: '*'|'/';
	public MULOPElements getMULOPAccess() {
		return pMULOP;
	}
	
	public ParserRule getMULOPRule() {
		return getMULOPAccess().getRule();
	}
	
	//NotOpCallExp :
	//    ((operationName=UNARYOP source=NotOpCallExp)
	//        |
	//        PropertyCallExp)
	//;
	public NotOpCallExpElements getNotOpCallExpAccess() {
		return pNotOpCallExp;
	}
	
	public ParserRule getNotOpCallExpRule() {
		return getNotOpCallExpAccess().getRule();
	}
	
	//UNARYOP: 'not' | '-'
	//;
	public UNARYOPElements getUNARYOPAccess() {
		return pUNARYOP;
	}
	
	public ParserRule getUNARYOPRule() {
		return getUNARYOPAccess().getRule();
	}
	
	////priority_0
	//PropertyCallExp  :
	//    source = Primary_OclExpression (calls+=PropertyCall)*
	//    ;
	public PropertyCallExpElements getPropertyCallExpAccess() {
		return pPropertyCallExp;
	}
	
	public ParserRule getPropertyCallExpRule() {
		return getPropertyCallExpAccess().getRule();
	}
	
	//Primary_OclExpression returns OclExpression :
	//    VariableExp
	//    |SelfLiteralExp
	//    |StringLiteralExp
	//    |BooleanLiteralExp
	//    |NumericLiteralExp
	//    |NullLiteralExp
	//    |BagLiteralExp
	//    |OrderedSetLiteralExp
	//    |SequenceLiteralExp
	//    |SetLiteralExp
	//    |TupleLiteralExp
	//    |MapLiteralExp
	//    |EnumLiteralExp
	//    |IfExp
	//    |BraceExp
	//    |OclModelElementExp
	//    |ContextlessCallExp;
	public Primary_OclExpressionElements getPrimary_OclExpressionAccess() {
		return pPrimary_OclExpression;
	}
	
	public ParserRule getPrimary_OclExpressionRule() {
		return getPrimary_OclExpressionAccess().getRule();
	}
	
	//Auxiliary :Iterator|LocalVariable|Parameter|Attribute;
	public AuxiliaryElements getAuxiliaryAccess() {
		return pAuxiliary;
	}
	
	public ParserRule getAuxiliaryRule() {
		return getAuxiliaryAccess().getRule();
	}
	
	//VariableExp:
	//    referredVariable=[Auxiliary]
	//;
	public VariableExpElements getVariableExpAccess() {
		return pVariableExp;
	}
	
	public ParserRule getVariableExpRule() {
		return getVariableExpAccess().getRule();
	}
	
	//SelfLiteralExp :
	//    {SelfLiteralExp}    'self'
	//;
	public SelfLiteralExpElements getSelfLiteralExpAccess() {
		return pSelfLiteralExp;
	}
	
	public ParserRule getSelfLiteralExpRule() {
		return getSelfLiteralExpAccess().getRule();
	}
	
	//NullLiteralExp :
	//    {NullLiteralExp} 'null'
	//;
	public NullLiteralExpElements getNullLiteralExpAccess() {
		return pNullLiteralExp;
	}
	
	public ParserRule getNullLiteralExpRule() {
		return getNullLiteralExpAccess().getRule();
	}
	
	//StringLiteralExp :
	//    {StringLiteralExp}
	//    stringSymbol=STRING
	//;
	public StringLiteralExpElements getStringLiteralExpAccess() {
		return pStringLiteralExp;
	}
	
	public ParserRule getStringLiteralExpRule() {
		return getStringLiteralExpAccess().getRule();
	}
	
	//NumericLiteralExp:
	//    RealLiteralExp|IntegerLiteralExp
	//;
	public NumericLiteralExpElements getNumericLiteralExpAccess() {
		return pNumericLiteralExp;
	}
	
	public ParserRule getNumericLiteralExpRule() {
		return getNumericLiteralExpAccess().getRule();
	}
	
	//RealLiteralExp : realSymbol=DOUBLE;
	public RealLiteralExpElements getRealLiteralExpAccess() {
		return pRealLiteralExp;
	}
	
	public ParserRule getRealLiteralExpRule() {
		return getRealLiteralExpAccess().getRule();
	}
	
	//IntegerLiteralExp:
	//    {IntegerLiteralExp}
	//    integerSymbol=INT
	//;
	public IntegerLiteralExpElements getIntegerLiteralExpAccess() {
		return pIntegerLiteralExp;
	}
	
	public ParserRule getIntegerLiteralExpRule() {
		return getIntegerLiteralExpAccess().getRule();
	}
	
	//BagLiteralExp:
	//    {BagLiteralExp}
	//    'Bag' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
	//;
	public BagLiteralExpElements getBagLiteralExpAccess() {
		return pBagLiteralExp;
	}
	
	public ParserRule getBagLiteralExpRule() {
		return getBagLiteralExpAccess().getRule();
	}
	
	//OrderedSetLiteralExp:
	//    {OrderedSetLiteralExp}
	//    'OrderedSet' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
	//;
	public OrderedSetLiteralExpElements getOrderedSetLiteralExpAccess() {
		return pOrderedSetLiteralExp;
	}
	
	public ParserRule getOrderedSetLiteralExpRule() {
		return getOrderedSetLiteralExpAccess().getRule();
	}
	
	//SequenceLiteralExp:
	//    {SequenceLiteralExp}
	//    'Sequence' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
	//;
	public SequenceLiteralExpElements getSequenceLiteralExpAccess() {
		return pSequenceLiteralExp;
	}
	
	public ParserRule getSequenceLiteralExpRule() {
		return getSequenceLiteralExpAccess().getRule();
	}
	
	//SetLiteralExp:
	//    {SetLiteralExp}
	//    'Set' '{' (elements+=OclExpression ("," elements+=OclExpression)*)? '}'
	//;
	public SetLiteralExpElements getSetLiteralExpAccess() {
		return pSetLiteralExp;
	}
	
	public ParserRule getSetLiteralExpRule() {
		return getSetLiteralExpAccess().getRule();
	}
	
	//TupleLiteralExp:
	//    {TupleLiteralExp}
	//    'Tuple' '{' (tuplePart+=TuplePart ("," tuplePart+=TuplePart)*)? '}'
	//;
	public TupleLiteralExpElements getTupleLiteralExpAccess() {
		return pTupleLiteralExp;
	}
	
	public ParserRule getTupleLiteralExpRule() {
		return getTupleLiteralExpAccess().getRule();
	}
	
	//TuplePart:
	//    varName=ID (':' type=OclTypeLiteral)? '=' initExpression=OclExpression
	//;
	public TuplePartElements getTuplePartAccess() {
		return pTuplePart;
	}
	
	public ParserRule getTuplePartRule() {
		return getTuplePartAccess().getRule();
	}
	
	//MapLiteralExp :
	//    {MapLiteralExp}
	//    'Map' '{' (elements+=MapElement (',' elements+=MapElement)*)? '}'
	//;
	public MapLiteralExpElements getMapLiteralExpAccess() {
		return pMapLiteralExp;
	}
	
	public ParserRule getMapLiteralExpRule() {
		return getMapLiteralExpAccess().getRule();
	}
	
	//MapElement :
	//    '(' key=OclExpression ',' value=OclExpression ')'
	//;
	public MapElementElements getMapElementAccess() {
		return pMapElement;
	}
	
	public ParserRule getMapElementRule() {
		return getMapElementAccess().getRule();
	}
	
	//EnumLiteralExp :
	//    ecoreTypes=[Import]'!'enum_=[ecore::EEnum|QualifiedName] "#" name=ID
	//;
	public EnumLiteralExpElements getEnumLiteralExpAccess() {
		return pEnumLiteralExp;
	}
	
	public ParserRule getEnumLiteralExpRule() {
		return getEnumLiteralExpAccess().getRule();
	}
	
	//LetExp :
	//    'let' variable=LocalVariable 'in' in_=OclExpression
	//;
	public LetExpElements getLetExpAccess() {
		return pLetExp;
	}
	
	public ParserRule getLetExpRule() {
		return getLetExpAccess().getRule();
	}
	
	//IfExp :
	//    'if' condition=OclExpression 'then' thenExpression=OclExpression 'else' elseExpression=OclExpression 'endif'
	//;
	public IfExpElements getIfExpAccess() {
		return pIfExp;
	}
	
	public ParserRule getIfExpRule() {
		return getIfExpAccess().getRule();
	}
	
	//BraceExp :
	//    '(' exp=OclExpression ')'
	//;
	public BraceExpElements getBraceExpAccess() {
		return pBraceExp;
	}
	
	public ParserRule getBraceExpRule() {
		return getBraceExpAccess().getRule();
	}
	
	//ContextlessCallExp :
	//    operationName=ID '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
	//;
	public ContextlessCallExpElements getContextlessCallExpAccess() {
		return pContextlessCallExp;
	}
	
	public ParserRule getContextlessCallExpRule() {
		return getContextlessCallExpAccess().getRule();
	}
	
	//BooleanLiteralExp:
	//    booleanSymbol= 'true'|booleanSymbol= 'false'
	//    ;
	public BooleanLiteralExpElements getBooleanLiteralExpAccess() {
		return pBooleanLiteralExp;
	}
	
	public ParserRule getBooleanLiteralExpRule() {
		return getBooleanLiteralExpAccess().getRule();
	}
	
	//PropertyCall:
	//    OperationCall|NavigationOrAttributeCall|IterateExp|IteratorExp|CollectionOperationCall
	//    ;
	public PropertyCallElements getPropertyCallAccess() {
		return pPropertyCall;
	}
	
	public ParserRule getPropertyCallRule() {
		return getPropertyCallAccess().getRule();
	}
	
	//OperationCall:
	//    '.' operationName=ID '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
	//    ;
	public OperationCallElements getOperationCallAccess() {
		return pOperationCall;
	}
	
	public ParserRule getOperationCallRule() {
		return getOperationCallAccess().getRule();
	}
	
	//NavigationOrAttributeCall :
	//    '.' name=ID
	//    ;
	public NavigationOrAttributeCallElements getNavigationOrAttributeCallAccess() {
		return pNavigationOrAttributeCall;
	}
	
	public ParserRule getNavigationOrAttributeCallRule() {
		return getNavigationOrAttributeCallAccess().getRule();
	}
	
	//IterateExp:
	//    '->' 'iterate' '(' iterators+=Iterator (',' iterators+=Iterator)* ';' result=LocalVariable '|' body=OclExpression ')'
	//    ;
	public IterateExpElements getIterateExpAccess() {
		return pIterateExp;
	}
	
	public ParserRule getIterateExpRule() {
		return getIterateExpAccess().getRule();
	}
	
	//Iterator :
	//    name=ID (':' type=OclTypeLiteral)?
	//    ;
	public IteratorElements getIteratorAccess() {
		return pIterator;
	}
	
	public ParserRule getIteratorRule() {
		return getIteratorAccess().getRule();
	}
	
	//IteratorExp :
	//    '->' name=ID '(' iterators+=Iterator (',' iterators+=Iterator)* '|' body=OclExpression ')'
	//    ;
	public IteratorExpElements getIteratorExpAccess() {
		return pIteratorExp;
	}
	
	public ParserRule getIteratorExpRule() {
		return getIteratorExpAccess().getRule();
	}
	
	//CollectionOperationCall :
	//    '->' operationName=ID '(' (arguments+=OclExpression (',' arguments+=OclExpression)*)? ')'
	//    ;
	public CollectionOperationCallElements getCollectionOperationCallAccess() {
		return pCollectionOperationCall;
	}
	
	public ParserRule getCollectionOperationCallRule() {
		return getCollectionOperationCallAccess().getRule();
	}
	
	//LocalVariable :
	//    name=ID (':' type=OclTypeLiteral)? '=' initExpression=OclExpression
	//;
	public LocalVariableElements getLocalVariableAccess() {
		return pLocalVariable;
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}
	
	//OclTypeLiteral :
	//    CollectionTypeLiteral
	//    | Primitive
	//    | OclAnyType
	//    | OclVoidType
	//    | TupleType
	//    | OclModelElementClass
	//    | MapType
	//    ;
	public OclTypeLiteralElements getOclTypeLiteralAccess() {
		return pOclTypeLiteral;
	}
	
	public ParserRule getOclTypeLiteralRule() {
		return getOclTypeLiteralAccess().getRule();
	}
	
	//CollectionTypeLiteral:
	//    CollectionType
	//    | BagType
	//    | OrderedSetType
	//    | SequenceType
	//    | SetType
	//    ;
	public CollectionTypeLiteralElements getCollectionTypeLiteralAccess() {
		return pCollectionTypeLiteral;
	}
	
	public ParserRule getCollectionTypeLiteralRule() {
		return getCollectionTypeLiteralAccess().getRule();
	}
	
	//CollectionType :
	//    'Collection' '(' elementType=OclTypeLiteral ')'
	//;
	public CollectionTypeElements getCollectionTypeAccess() {
		return pCollectionType;
	}
	
	public ParserRule getCollectionTypeRule() {
		return getCollectionTypeAccess().getRule();
	}
	
	//BagType :
	//    'Bag' '(' elementType=OclTypeLiteral ')'
	//;
	public BagTypeElements getBagTypeAccess() {
		return pBagType;
	}
	
	public ParserRule getBagTypeRule() {
		return getBagTypeAccess().getRule();
	}
	
	//OrderedSetType :
	//    'OrderedSet' '(' elementType=OclTypeLiteral ')'
	//;
	public OrderedSetTypeElements getOrderedSetTypeAccess() {
		return pOrderedSetType;
	}
	
	public ParserRule getOrderedSetTypeRule() {
		return getOrderedSetTypeAccess().getRule();
	}
	
	//SequenceType :
	//    'Sequence' '(' elementType=OclTypeLiteral ')'
	//;
	public SequenceTypeElements getSequenceTypeAccess() {
		return pSequenceType;
	}
	
	public ParserRule getSequenceTypeRule() {
		return getSequenceTypeAccess().getRule();
	}
	
	//SetType :
	//    'Set' '(' elementType=OclTypeLiteral ')'
	//;
	public SetTypeElements getSetTypeAccess() {
		return pSetType;
	}
	
	public ParserRule getSetTypeRule() {
		return getSetTypeAccess().getRule();
	}
	
	//Primitive:
	//    StringType
	//    | BooleanType
	//    | NumericType
	//;
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//StringType:
	//    {StringType}'String'
	//;
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//BooleanType:
	//    {BooleanType}'Boolean'
	//;
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//NumericType:
	//    IntegerType
	//    |RealType
	//;
	public NumericTypeElements getNumericTypeAccess() {
		return pNumericType;
	}
	
	public ParserRule getNumericTypeRule() {
		return getNumericTypeAccess().getRule();
	}
	
	//IntegerType:
	//    {IntegerType}'Integer'
	//;
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//RealType:
	//    {RealType}'Real'
	//;
	public RealTypeElements getRealTypeAccess() {
		return pRealType;
	}
	
	public ParserRule getRealTypeRule() {
		return getRealTypeAccess().getRule();
	}
	
	//OclAnyType :
	//    {OclAnyType}'OclAny'
	//;
	public OclAnyTypeElements getOclAnyTypeAccess() {
		return pOclAnyType;
	}
	
	public ParserRule getOclAnyTypeRule() {
		return getOclAnyTypeAccess().getRule();
	}
	
	//OclVoidType :
	//    {OclVoidType}'OclVoid'
	//;
	public OclVoidTypeElements getOclVoidTypeAccess() {
		return pOclVoidType;
	}
	
	public ParserRule getOclVoidTypeRule() {
		return getOclVoidTypeAccess().getRule();
	}
	
	//TupleType :
	//    {TupleType}
	//     ('Tuple') '(' (attributes+=TupleTypeAttribute (',' attributes+=TupleTypeAttribute)*)? ')'
	//     ;
	public TupleTypeElements getTupleTypeAccess() {
		return pTupleType;
	}
	
	public ParserRule getTupleTypeRule() {
		return getTupleTypeAccess().getRule();
	}
	
	//TupleTypeAttribute : name=ID ':' type=OclTypeLiteral;
	public TupleTypeAttributeElements getTupleTypeAttributeAccess() {
		return pTupleTypeAttribute;
	}
	
	public ParserRule getTupleTypeAttributeRule() {
		return getTupleTypeAttributeAccess().getRule();
	}
	
	//OclModelElementClass: model=[Import]'!'name=[ecore::EClass];
	public OclModelElementClassElements getOclModelElementClassAccess() {
		return pOclModelElementClass;
	}
	
	public ParserRule getOclModelElementClassRule() {
		return getOclModelElementClassAccess().getRule();
	}
	
	//MapType :
	//    'Map' '(' keyType=OclTypeLiteral ',' valueType=OclTypeLiteral ')'
	//;
	public MapTypeElements getMapTypeAccess() {
		return pMapType;
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble :
	//    (INT '.' INT| '.' INT | INT '.') ('e' ('-'|'+') INT)?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//QualifiedName: ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//@Override
	//terminal SL_COMMENT:
	//    '--' .* '\n'
	//;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
