/**
 * generated by Xtext
 */
package fr.enseeiht.ocl.xtext.ocl.impl;

import fr.enseeiht.ocl.xtext.ocl.AddOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.Attribute;
import fr.enseeiht.ocl.xtext.ocl.Auxiliary;
import fr.enseeiht.ocl.xtext.ocl.BagLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.BagType;
import fr.enseeiht.ocl.xtext.ocl.BooleanLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.BooleanType;
import fr.enseeiht.ocl.xtext.ocl.BraceExp;
import fr.enseeiht.ocl.xtext.ocl.CollectionType;
import fr.enseeiht.ocl.xtext.ocl.CollectionTypeLiteral;
import fr.enseeiht.ocl.xtext.ocl.ContextlessCallExp;
import fr.enseeiht.ocl.xtext.ocl.EnumLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.EqOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.IfExp;
import fr.enseeiht.ocl.xtext.ocl.Import;
import fr.enseeiht.ocl.xtext.ocl.IntOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.IntegerLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.IntegerType;
import fr.enseeiht.ocl.xtext.ocl.IterateExp;
import fr.enseeiht.ocl.xtext.ocl.Iterator;
import fr.enseeiht.ocl.xtext.ocl.IteratorExp;
import fr.enseeiht.ocl.xtext.ocl.LetExp;
import fr.enseeiht.ocl.xtext.ocl.LocalVariable;
import fr.enseeiht.ocl.xtext.ocl.MapElement;
import fr.enseeiht.ocl.xtext.ocl.MapLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.MapType;
import fr.enseeiht.ocl.xtext.ocl.MulOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.NavigationOrAttributeCall;
import fr.enseeiht.ocl.xtext.ocl.NotOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.NullLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.NumericLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.NumericType;
import fr.enseeiht.ocl.xtext.ocl.OclAnyType;
import fr.enseeiht.ocl.xtext.ocl.OclContextBlock;
import fr.enseeiht.ocl.xtext.ocl.OclExpression;
import fr.enseeiht.ocl.xtext.ocl.OclFactory;
import fr.enseeiht.ocl.xtext.ocl.OclFeatureDefinition;
import fr.enseeiht.ocl.xtext.ocl.OclInvariant;
import fr.enseeiht.ocl.xtext.ocl.OclModelElementClass;
import fr.enseeiht.ocl.xtext.ocl.OclModelElementExp;
import fr.enseeiht.ocl.xtext.ocl.OclPackage;
import fr.enseeiht.ocl.xtext.ocl.OclTypeLiteral;
import fr.enseeiht.ocl.xtext.ocl.OclVoidType;
import fr.enseeiht.ocl.xtext.ocl.Operation;
import fr.enseeiht.ocl.xtext.ocl.OperationCall;
import fr.enseeiht.ocl.xtext.ocl.OperatorCallExp;
import fr.enseeiht.ocl.xtext.ocl.OrderedSetLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.OrderedSetType;
import fr.enseeiht.ocl.xtext.ocl.Parameter;
import fr.enseeiht.ocl.xtext.ocl.Primitive;
import fr.enseeiht.ocl.xtext.ocl.PropertyCall;
import fr.enseeiht.ocl.xtext.ocl.PropertyCallExp;
import fr.enseeiht.ocl.xtext.ocl.RealLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.RealType;
import fr.enseeiht.ocl.xtext.ocl.RelOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.SelfLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.SequenceLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.SequenceType;
import fr.enseeiht.ocl.xtext.ocl.SetLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.SetType;
import fr.enseeiht.ocl.xtext.ocl.StringLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.StringType;
import fr.enseeiht.ocl.xtext.ocl.TupleLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.TuplePart;
import fr.enseeiht.ocl.xtext.ocl.TupleType;
import fr.enseeiht.ocl.xtext.ocl.TupleTypeAttribute;
import fr.enseeiht.ocl.xtext.ocl.VariableExp;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OclFactoryImpl extends EFactoryImpl implements OclFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OclFactory init()
  {
    try
    {
      OclFactory theOclFactory = (OclFactory)EPackage.Registry.INSTANCE.getEFactory(OclPackage.eNS_URI);
      if (theOclFactory != null)
      {
        return theOclFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OclFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OclFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OclPackage.MODULE: return createModule();
      case OclPackage.IMPORT: return createImport();
      case OclPackage.OCL_CONTEXT_BLOCK: return createOclContextBlock();
      case OclPackage.OCL_FEATURE_DEFINITION: return createOclFeatureDefinition();
      case OclPackage.ATTRIBUTE: return createAttribute();
      case OclPackage.OPERATION: return createOperation();
      case OclPackage.PARAMETER: return createParameter();
      case OclPackage.OCL_INVARIANT: return createOclInvariant();
      case OclPackage.OCL_EXPRESSION: return createOclExpression();
      case OclPackage.OCL_MODEL_ELEMENT_EXP: return createOclModelElementExp();
      case OclPackage.OPERATOR_CALL_EXP: return createOperatorCallExp();
      case OclPackage.EQ_OP_CALL_EXP: return createEqOpCallExp();
      case OclPackage.REL_OP_CALL_EXP: return createRelOpCallExp();
      case OclPackage.ADD_OP_CALL_EXP: return createAddOpCallExp();
      case OclPackage.INT_OP_CALL_EXP: return createIntOpCallExp();
      case OclPackage.MUL_OP_CALL_EXP: return createMulOpCallExp();
      case OclPackage.NOT_OP_CALL_EXP: return createNotOpCallExp();
      case OclPackage.PROPERTY_CALL_EXP: return createPropertyCallExp();
      case OclPackage.AUXILIARY: return createAuxiliary();
      case OclPackage.VARIABLE_EXP: return createVariableExp();
      case OclPackage.SELF_LITERAL_EXP: return createSelfLiteralExp();
      case OclPackage.NULL_LITERAL_EXP: return createNullLiteralExp();
      case OclPackage.STRING_LITERAL_EXP: return createStringLiteralExp();
      case OclPackage.NUMERIC_LITERAL_EXP: return createNumericLiteralExp();
      case OclPackage.REAL_LITERAL_EXP: return createRealLiteralExp();
      case OclPackage.INTEGER_LITERAL_EXP: return createIntegerLiteralExp();
      case OclPackage.BAG_LITERAL_EXP: return createBagLiteralExp();
      case OclPackage.ORDERED_SET_LITERAL_EXP: return createOrderedSetLiteralExp();
      case OclPackage.SEQUENCE_LITERAL_EXP: return createSequenceLiteralExp();
      case OclPackage.SET_LITERAL_EXP: return createSetLiteralExp();
      case OclPackage.TUPLE_LITERAL_EXP: return createTupleLiteralExp();
      case OclPackage.TUPLE_PART: return createTuplePart();
      case OclPackage.MAP_LITERAL_EXP: return createMapLiteralExp();
      case OclPackage.MAP_ELEMENT: return createMapElement();
      case OclPackage.ENUM_LITERAL_EXP: return createEnumLiteralExp();
      case OclPackage.LET_EXP: return createLetExp();
      case OclPackage.IF_EXP: return createIfExp();
      case OclPackage.BRACE_EXP: return createBraceExp();
      case OclPackage.CONTEXTLESS_CALL_EXP: return createContextlessCallExp();
      case OclPackage.BOOLEAN_LITERAL_EXP: return createBooleanLiteralExp();
      case OclPackage.PROPERTY_CALL: return createPropertyCall();
      case OclPackage.OPERATION_CALL: return createOperationCall();
      case OclPackage.NAVIGATION_OR_ATTRIBUTE_CALL: return createNavigationOrAttributeCall();
      case OclPackage.ITERATE_EXP: return createIterateExp();
      case OclPackage.ITERATOR: return createIterator();
      case OclPackage.ITERATOR_EXP: return createIteratorExp();
      case OclPackage.LOCAL_VARIABLE: return createLocalVariable();
      case OclPackage.OCL_TYPE_LITERAL: return createOclTypeLiteral();
      case OclPackage.COLLECTION_TYPE_LITERAL: return createCollectionTypeLiteral();
      case OclPackage.COLLECTION_TYPE: return createCollectionType();
      case OclPackage.BAG_TYPE: return createBagType();
      case OclPackage.ORDERED_SET_TYPE: return createOrderedSetType();
      case OclPackage.SEQUENCE_TYPE: return createSequenceType();
      case OclPackage.SET_TYPE: return createSetType();
      case OclPackage.PRIMITIVE: return createPrimitive();
      case OclPackage.STRING_TYPE: return createStringType();
      case OclPackage.BOOLEAN_TYPE: return createBooleanType();
      case OclPackage.NUMERIC_TYPE: return createNumericType();
      case OclPackage.INTEGER_TYPE: return createIntegerType();
      case OclPackage.REAL_TYPE: return createRealType();
      case OclPackage.OCL_ANY_TYPE: return createOclAnyType();
      case OclPackage.OCL_VOID_TYPE: return createOclVoidType();
      case OclPackage.TUPLE_TYPE: return createTupleType();
      case OclPackage.TUPLE_TYPE_ATTRIBUTE: return createTupleTypeAttribute();
      case OclPackage.OCL_MODEL_ELEMENT_CLASS: return createOclModelElementClass();
      case OclPackage.MAP_TYPE: return createMapType();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public fr.enseeiht.ocl.xtext.ocl.Module createModule()
  {
    ModuleImpl module = new ModuleImpl();
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclContextBlock createOclContextBlock()
  {
    OclContextBlockImpl oclContextBlock = new OclContextBlockImpl();
    return oclContextBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclFeatureDefinition createOclFeatureDefinition()
  {
    OclFeatureDefinitionImpl oclFeatureDefinition = new OclFeatureDefinitionImpl();
    return oclFeatureDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclInvariant createOclInvariant()
  {
    OclInvariantImpl oclInvariant = new OclInvariantImpl();
    return oclInvariant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclExpression createOclExpression()
  {
    OclExpressionImpl oclExpression = new OclExpressionImpl();
    return oclExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclModelElementExp createOclModelElementExp()
  {
    OclModelElementExpImpl oclModelElementExp = new OclModelElementExpImpl();
    return oclModelElementExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperatorCallExp createOperatorCallExp()
  {
    OperatorCallExpImpl operatorCallExp = new OperatorCallExpImpl();
    return operatorCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqOpCallExp createEqOpCallExp()
  {
    EqOpCallExpImpl eqOpCallExp = new EqOpCallExpImpl();
    return eqOpCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelOpCallExp createRelOpCallExp()
  {
    RelOpCallExpImpl relOpCallExp = new RelOpCallExpImpl();
    return relOpCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddOpCallExp createAddOpCallExp()
  {
    AddOpCallExpImpl addOpCallExp = new AddOpCallExpImpl();
    return addOpCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntOpCallExp createIntOpCallExp()
  {
    IntOpCallExpImpl intOpCallExp = new IntOpCallExpImpl();
    return intOpCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MulOpCallExp createMulOpCallExp()
  {
    MulOpCallExpImpl mulOpCallExp = new MulOpCallExpImpl();
    return mulOpCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotOpCallExp createNotOpCallExp()
  {
    NotOpCallExpImpl notOpCallExp = new NotOpCallExpImpl();
    return notOpCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyCallExp createPropertyCallExp()
  {
    PropertyCallExpImpl propertyCallExp = new PropertyCallExpImpl();
    return propertyCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Auxiliary createAuxiliary()
  {
    AuxiliaryImpl auxiliary = new AuxiliaryImpl();
    return auxiliary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableExp createVariableExp()
  {
    VariableExpImpl variableExp = new VariableExpImpl();
    return variableExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelfLiteralExp createSelfLiteralExp()
  {
    SelfLiteralExpImpl selfLiteralExp = new SelfLiteralExpImpl();
    return selfLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NullLiteralExp createNullLiteralExp()
  {
    NullLiteralExpImpl nullLiteralExp = new NullLiteralExpImpl();
    return nullLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteralExp createStringLiteralExp()
  {
    StringLiteralExpImpl stringLiteralExp = new StringLiteralExpImpl();
    return stringLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumericLiteralExp createNumericLiteralExp()
  {
    NumericLiteralExpImpl numericLiteralExp = new NumericLiteralExpImpl();
    return numericLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealLiteralExp createRealLiteralExp()
  {
    RealLiteralExpImpl realLiteralExp = new RealLiteralExpImpl();
    return realLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntegerLiteralExp createIntegerLiteralExp()
  {
    IntegerLiteralExpImpl integerLiteralExp = new IntegerLiteralExpImpl();
    return integerLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BagLiteralExp createBagLiteralExp()
  {
    BagLiteralExpImpl bagLiteralExp = new BagLiteralExpImpl();
    return bagLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrderedSetLiteralExp createOrderedSetLiteralExp()
  {
    OrderedSetLiteralExpImpl orderedSetLiteralExp = new OrderedSetLiteralExpImpl();
    return orderedSetLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SequenceLiteralExp createSequenceLiteralExp()
  {
    SequenceLiteralExpImpl sequenceLiteralExp = new SequenceLiteralExpImpl();
    return sequenceLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetLiteralExp createSetLiteralExp()
  {
    SetLiteralExpImpl setLiteralExp = new SetLiteralExpImpl();
    return setLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TupleLiteralExp createTupleLiteralExp()
  {
    TupleLiteralExpImpl tupleLiteralExp = new TupleLiteralExpImpl();
    return tupleLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TuplePart createTuplePart()
  {
    TuplePartImpl tuplePart = new TuplePartImpl();
    return tuplePart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MapLiteralExp createMapLiteralExp()
  {
    MapLiteralExpImpl mapLiteralExp = new MapLiteralExpImpl();
    return mapLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MapElement createMapElement()
  {
    MapElementImpl mapElement = new MapElementImpl();
    return mapElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumLiteralExp createEnumLiteralExp()
  {
    EnumLiteralExpImpl enumLiteralExp = new EnumLiteralExpImpl();
    return enumLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LetExp createLetExp()
  {
    LetExpImpl letExp = new LetExpImpl();
    return letExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfExp createIfExp()
  {
    IfExpImpl ifExp = new IfExpImpl();
    return ifExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BraceExp createBraceExp()
  {
    BraceExpImpl braceExp = new BraceExpImpl();
    return braceExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextlessCallExp createContextlessCallExp()
  {
    ContextlessCallExpImpl contextlessCallExp = new ContextlessCallExpImpl();
    return contextlessCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanLiteralExp createBooleanLiteralExp()
  {
    BooleanLiteralExpImpl booleanLiteralExp = new BooleanLiteralExpImpl();
    return booleanLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyCall createPropertyCall()
  {
    PropertyCallImpl propertyCall = new PropertyCallImpl();
    return propertyCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationCall createOperationCall()
  {
    OperationCallImpl operationCall = new OperationCallImpl();
    return operationCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NavigationOrAttributeCall createNavigationOrAttributeCall()
  {
    NavigationOrAttributeCallImpl navigationOrAttributeCall = new NavigationOrAttributeCallImpl();
    return navigationOrAttributeCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IterateExp createIterateExp()
  {
    IterateExpImpl iterateExp = new IterateExpImpl();
    return iterateExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Iterator createIterator()
  {
    IteratorImpl iterator = new IteratorImpl();
    return iterator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IteratorExp createIteratorExp()
  {
    IteratorExpImpl iteratorExp = new IteratorExpImpl();
    return iteratorExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalVariable createLocalVariable()
  {
    LocalVariableImpl localVariable = new LocalVariableImpl();
    return localVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclTypeLiteral createOclTypeLiteral()
  {
    OclTypeLiteralImpl oclTypeLiteral = new OclTypeLiteralImpl();
    return oclTypeLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionTypeLiteral createCollectionTypeLiteral()
  {
    CollectionTypeLiteralImpl collectionTypeLiteral = new CollectionTypeLiteralImpl();
    return collectionTypeLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionType createCollectionType()
  {
    CollectionTypeImpl collectionType = new CollectionTypeImpl();
    return collectionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BagType createBagType()
  {
    BagTypeImpl bagType = new BagTypeImpl();
    return bagType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrderedSetType createOrderedSetType()
  {
    OrderedSetTypeImpl orderedSetType = new OrderedSetTypeImpl();
    return orderedSetType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SequenceType createSequenceType()
  {
    SequenceTypeImpl sequenceType = new SequenceTypeImpl();
    return sequenceType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetType createSetType()
  {
    SetTypeImpl setType = new SetTypeImpl();
    return setType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Primitive createPrimitive()
  {
    PrimitiveImpl primitive = new PrimitiveImpl();
    return primitive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringType createStringType()
  {
    StringTypeImpl stringType = new StringTypeImpl();
    return stringType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanType createBooleanType()
  {
    BooleanTypeImpl booleanType = new BooleanTypeImpl();
    return booleanType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumericType createNumericType()
  {
    NumericTypeImpl numericType = new NumericTypeImpl();
    return numericType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntegerType createIntegerType()
  {
    IntegerTypeImpl integerType = new IntegerTypeImpl();
    return integerType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealType createRealType()
  {
    RealTypeImpl realType = new RealTypeImpl();
    return realType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclAnyType createOclAnyType()
  {
    OclAnyTypeImpl oclAnyType = new OclAnyTypeImpl();
    return oclAnyType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclVoidType createOclVoidType()
  {
    OclVoidTypeImpl oclVoidType = new OclVoidTypeImpl();
    return oclVoidType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TupleType createTupleType()
  {
    TupleTypeImpl tupleType = new TupleTypeImpl();
    return tupleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TupleTypeAttribute createTupleTypeAttribute()
  {
    TupleTypeAttributeImpl tupleTypeAttribute = new TupleTypeAttributeImpl();
    return tupleTypeAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclModelElementClass createOclModelElementClass()
  {
    OclModelElementClassImpl oclModelElementClass = new OclModelElementClassImpl();
    return oclModelElementClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MapType createMapType()
  {
    MapTypeImpl mapType = new MapTypeImpl();
    return mapType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclPackage getOclPackage()
  {
    return (OclPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OclPackage getPackage()
  {
    return OclPackage.eINSTANCE;
  }

} //OclFactoryImpl
