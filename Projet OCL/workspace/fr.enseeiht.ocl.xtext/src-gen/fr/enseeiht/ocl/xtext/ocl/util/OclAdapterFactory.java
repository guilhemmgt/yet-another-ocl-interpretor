/**
 * generated by Xtext
 */
package fr.enseeiht.ocl.xtext.ocl.util;

import fr.enseeiht.ocl.xtext.ocl.AddOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.Attribute;
import fr.enseeiht.ocl.xtext.ocl.Auxiliary;
import fr.enseeiht.ocl.xtext.ocl.BagExp;
import fr.enseeiht.ocl.xtext.ocl.BagType;
import fr.enseeiht.ocl.xtext.ocl.BooleanExp;
import fr.enseeiht.ocl.xtext.ocl.BooleanType;
import fr.enseeiht.ocl.xtext.ocl.BraceExp;
import fr.enseeiht.ocl.xtext.ocl.CollectionOperationCall;
import fr.enseeiht.ocl.xtext.ocl.CollectionType;
import fr.enseeiht.ocl.xtext.ocl.EnumLiteralExp;
import fr.enseeiht.ocl.xtext.ocl.EqOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.IfExp;
import fr.enseeiht.ocl.xtext.ocl.Import;
import fr.enseeiht.ocl.xtext.ocl.IntOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.IntegerExp;
import fr.enseeiht.ocl.xtext.ocl.IntegerType;
import fr.enseeiht.ocl.xtext.ocl.IterateExp;
import fr.enseeiht.ocl.xtext.ocl.Iterator;
import fr.enseeiht.ocl.xtext.ocl.IteratorExp;
import fr.enseeiht.ocl.xtext.ocl.LetExp;
import fr.enseeiht.ocl.xtext.ocl.LocalVariable;
import fr.enseeiht.ocl.xtext.ocl.MapElement;
import fr.enseeiht.ocl.xtext.ocl.MapExp;
import fr.enseeiht.ocl.xtext.ocl.MapType;
import fr.enseeiht.ocl.xtext.ocl.MulOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.NavigationOrAttributeCall;
import fr.enseeiht.ocl.xtext.ocl.NumericExp;
import fr.enseeiht.ocl.xtext.ocl.NumericType;
import fr.enseeiht.ocl.xtext.ocl.OclAnyType;
import fr.enseeiht.ocl.xtext.ocl.OclExpression;
import fr.enseeiht.ocl.xtext.ocl.OclFeatureDefinition;
import fr.enseeiht.ocl.xtext.ocl.OclInvariant;
import fr.enseeiht.ocl.xtext.ocl.OclModelElement;
import fr.enseeiht.ocl.xtext.ocl.OclModelElementExp;
import fr.enseeiht.ocl.xtext.ocl.OclModuleElement;
import fr.enseeiht.ocl.xtext.ocl.OclPackage;
import fr.enseeiht.ocl.xtext.ocl.OclType;
import fr.enseeiht.ocl.xtext.ocl.Operation;
import fr.enseeiht.ocl.xtext.ocl.OperationCall;
import fr.enseeiht.ocl.xtext.ocl.OperatorCallExp;
import fr.enseeiht.ocl.xtext.ocl.OrderedSetExp;
import fr.enseeiht.ocl.xtext.ocl.OrderedSetType;
import fr.enseeiht.ocl.xtext.ocl.Parameter;
import fr.enseeiht.ocl.xtext.ocl.Primitive;
import fr.enseeiht.ocl.xtext.ocl.PropertyCall;
import fr.enseeiht.ocl.xtext.ocl.PropertyCallExp;
import fr.enseeiht.ocl.xtext.ocl.RealExp;
import fr.enseeiht.ocl.xtext.ocl.RealType;
import fr.enseeiht.ocl.xtext.ocl.RelOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.SelfExp;
import fr.enseeiht.ocl.xtext.ocl.SequenceExp;
import fr.enseeiht.ocl.xtext.ocl.SequenceType;
import fr.enseeiht.ocl.xtext.ocl.SetExp;
import fr.enseeiht.ocl.xtext.ocl.SetType;
import fr.enseeiht.ocl.xtext.ocl.StringExp;
import fr.enseeiht.ocl.xtext.ocl.StringType;
import fr.enseeiht.ocl.xtext.ocl.TupleExp;
import fr.enseeiht.ocl.xtext.ocl.TuplePart;
import fr.enseeiht.ocl.xtext.ocl.TupleType;
import fr.enseeiht.ocl.xtext.ocl.TupleTypeAttribute;
import fr.enseeiht.ocl.xtext.ocl.VariableExp;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.enseeiht.ocl.xtext.ocl.OclPackage
 * @generated
 */
public class OclAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static OclPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OclAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = OclPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OclSwitch<Adapter> modelSwitch =
    new OclSwitch<Adapter>()
    {
      @Override
      public Adapter caseModule(fr.enseeiht.ocl.xtext.ocl.Module object)
      {
        return createModuleAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseOclModuleElement(OclModuleElement object)
      {
        return createOclModuleElementAdapter();
      }
      @Override
      public Adapter caseOclFeatureDefinition(OclFeatureDefinition object)
      {
        return createOclFeatureDefinitionAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseOclInvariant(OclInvariant object)
      {
        return createOclInvariantAdapter();
      }
      @Override
      public Adapter caseOclExpression(OclExpression object)
      {
        return createOclExpressionAdapter();
      }
      @Override
      public Adapter caseOclModelElementExp(OclModelElementExp object)
      {
        return createOclModelElementExpAdapter();
      }
      @Override
      public Adapter caseOperatorCallExp(OperatorCallExp object)
      {
        return createOperatorCallExpAdapter();
      }
      @Override
      public Adapter casePropertyCallExp(PropertyCallExp object)
      {
        return createPropertyCallExpAdapter();
      }
      @Override
      public Adapter caseAuxiliary(Auxiliary object)
      {
        return createAuxiliaryAdapter();
      }
      @Override
      public Adapter caseVariableExp(VariableExp object)
      {
        return createVariableExpAdapter();
      }
      @Override
      public Adapter caseSelfExp(SelfExp object)
      {
        return createSelfExpAdapter();
      }
      @Override
      public Adapter caseStringExp(StringExp object)
      {
        return createStringExpAdapter();
      }
      @Override
      public Adapter caseNumericExp(NumericExp object)
      {
        return createNumericExpAdapter();
      }
      @Override
      public Adapter caseRealExp(RealExp object)
      {
        return createRealExpAdapter();
      }
      @Override
      public Adapter caseIntegerExp(IntegerExp object)
      {
        return createIntegerExpAdapter();
      }
      @Override
      public Adapter caseBagExp(BagExp object)
      {
        return createBagExpAdapter();
      }
      @Override
      public Adapter caseOrderedSetExp(OrderedSetExp object)
      {
        return createOrderedSetExpAdapter();
      }
      @Override
      public Adapter caseSequenceExp(SequenceExp object)
      {
        return createSequenceExpAdapter();
      }
      @Override
      public Adapter caseSetExp(SetExp object)
      {
        return createSetExpAdapter();
      }
      @Override
      public Adapter caseTupleExp(TupleExp object)
      {
        return createTupleExpAdapter();
      }
      @Override
      public Adapter caseTuplePart(TuplePart object)
      {
        return createTuplePartAdapter();
      }
      @Override
      public Adapter caseMapExp(MapExp object)
      {
        return createMapExpAdapter();
      }
      @Override
      public Adapter caseMapElement(MapElement object)
      {
        return createMapElementAdapter();
      }
      @Override
      public Adapter caseEnumLiteralExp(EnumLiteralExp object)
      {
        return createEnumLiteralExpAdapter();
      }
      @Override
      public Adapter caseLetExp(LetExp object)
      {
        return createLetExpAdapter();
      }
      @Override
      public Adapter caseIfExp(IfExp object)
      {
        return createIfExpAdapter();
      }
      @Override
      public Adapter caseBraceExp(BraceExp object)
      {
        return createBraceExpAdapter();
      }
      @Override
      public Adapter caseBooleanExp(BooleanExp object)
      {
        return createBooleanExpAdapter();
      }
      @Override
      public Adapter casePropertyCall(PropertyCall object)
      {
        return createPropertyCallAdapter();
      }
      @Override
      public Adapter caseOperationCall(OperationCall object)
      {
        return createOperationCallAdapter();
      }
      @Override
      public Adapter caseNavigationOrAttributeCall(NavigationOrAttributeCall object)
      {
        return createNavigationOrAttributeCallAdapter();
      }
      @Override
      public Adapter caseIterateExp(IterateExp object)
      {
        return createIterateExpAdapter();
      }
      @Override
      public Adapter caseIterator(Iterator object)
      {
        return createIteratorAdapter();
      }
      @Override
      public Adapter caseIteratorExp(IteratorExp object)
      {
        return createIteratorExpAdapter();
      }
      @Override
      public Adapter caseCollectionOperationCall(CollectionOperationCall object)
      {
        return createCollectionOperationCallAdapter();
      }
      @Override
      public Adapter caseLocalVariable(LocalVariable object)
      {
        return createLocalVariableAdapter();
      }
      @Override
      public Adapter caseOclType(OclType object)
      {
        return createOclTypeAdapter();
      }
      @Override
      public Adapter caseCollectionType(CollectionType object)
      {
        return createCollectionTypeAdapter();
      }
      @Override
      public Adapter caseBagType(BagType object)
      {
        return createBagTypeAdapter();
      }
      @Override
      public Adapter caseOrderedSetType(OrderedSetType object)
      {
        return createOrderedSetTypeAdapter();
      }
      @Override
      public Adapter caseSequenceType(SequenceType object)
      {
        return createSequenceTypeAdapter();
      }
      @Override
      public Adapter caseSetType(SetType object)
      {
        return createSetTypeAdapter();
      }
      @Override
      public Adapter casePrimitive(Primitive object)
      {
        return createPrimitiveAdapter();
      }
      @Override
      public Adapter caseStringType(StringType object)
      {
        return createStringTypeAdapter();
      }
      @Override
      public Adapter caseBooleanType(BooleanType object)
      {
        return createBooleanTypeAdapter();
      }
      @Override
      public Adapter caseNumericType(NumericType object)
      {
        return createNumericTypeAdapter();
      }
      @Override
      public Adapter caseIntegerType(IntegerType object)
      {
        return createIntegerTypeAdapter();
      }
      @Override
      public Adapter caseRealType(RealType object)
      {
        return createRealTypeAdapter();
      }
      @Override
      public Adapter caseOclAnyType(OclAnyType object)
      {
        return createOclAnyTypeAdapter();
      }
      @Override
      public Adapter caseTupleType(TupleType object)
      {
        return createTupleTypeAdapter();
      }
      @Override
      public Adapter caseTupleTypeAttribute(TupleTypeAttribute object)
      {
        return createTupleTypeAttributeAdapter();
      }
      @Override
      public Adapter caseOclModelElement(OclModelElement object)
      {
        return createOclModelElementAdapter();
      }
      @Override
      public Adapter caseMapType(MapType object)
      {
        return createMapTypeAdapter();
      }
      @Override
      public Adapter caseEqOpCallExp(EqOpCallExp object)
      {
        return createEqOpCallExpAdapter();
      }
      @Override
      public Adapter caseRelOpCallExp(RelOpCallExp object)
      {
        return createRelOpCallExpAdapter();
      }
      @Override
      public Adapter caseAddOpCallExp(AddOpCallExp object)
      {
        return createAddOpCallExpAdapter();
      }
      @Override
      public Adapter caseIntOpCallExp(IntOpCallExp object)
      {
        return createIntOpCallExpAdapter();
      }
      @Override
      public Adapter caseMulOpCallExp(MulOpCallExp object)
      {
        return createMulOpCallExpAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.Module <em>Module</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.Module
   * @generated
   */
  public Adapter createModuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.OclModuleElement <em>Module Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.OclModuleElement
   * @generated
   */
  public Adapter createOclModuleElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.OclFeatureDefinition <em>Feature Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.OclFeatureDefinition
   * @generated
   */
  public Adapter createOclFeatureDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.OclInvariant <em>Invariant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.OclInvariant
   * @generated
   */
  public Adapter createOclInvariantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.OclExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.OclExpression
   * @generated
   */
  public Adapter createOclExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.OclModelElementExp <em>Model Element Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.OclModelElementExp
   * @generated
   */
  public Adapter createOclModelElementExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.OperatorCallExp <em>Operator Call Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.OperatorCallExp
   * @generated
   */
  public Adapter createOperatorCallExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.PropertyCallExp <em>Property Call Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.PropertyCallExp
   * @generated
   */
  public Adapter createPropertyCallExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.Auxiliary <em>Auxiliary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.Auxiliary
   * @generated
   */
  public Adapter createAuxiliaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.VariableExp <em>Variable Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.VariableExp
   * @generated
   */
  public Adapter createVariableExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.SelfExp <em>Self Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.SelfExp
   * @generated
   */
  public Adapter createSelfExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.StringExp <em>String Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.StringExp
   * @generated
   */
  public Adapter createStringExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.NumericExp <em>Numeric Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.NumericExp
   * @generated
   */
  public Adapter createNumericExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.RealExp <em>Real Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.RealExp
   * @generated
   */
  public Adapter createRealExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.IntegerExp <em>Integer Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.IntegerExp
   * @generated
   */
  public Adapter createIntegerExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.BagExp <em>Bag Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.BagExp
   * @generated
   */
  public Adapter createBagExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.OrderedSetExp <em>Ordered Set Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.OrderedSetExp
   * @generated
   */
  public Adapter createOrderedSetExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.SequenceExp <em>Sequence Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.SequenceExp
   * @generated
   */
  public Adapter createSequenceExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.SetExp <em>Set Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.SetExp
   * @generated
   */
  public Adapter createSetExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.TupleExp <em>Tuple Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.TupleExp
   * @generated
   */
  public Adapter createTupleExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.TuplePart <em>Tuple Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.TuplePart
   * @generated
   */
  public Adapter createTuplePartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.MapExp <em>Map Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.MapExp
   * @generated
   */
  public Adapter createMapExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.MapElement <em>Map Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.MapElement
   * @generated
   */
  public Adapter createMapElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.EnumLiteralExp <em>Enum Literal Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.EnumLiteralExp
   * @generated
   */
  public Adapter createEnumLiteralExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.LetExp <em>Let Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.LetExp
   * @generated
   */
  public Adapter createLetExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.IfExp <em>If Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.IfExp
   * @generated
   */
  public Adapter createIfExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.BraceExp <em>Brace Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.BraceExp
   * @generated
   */
  public Adapter createBraceExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.BooleanExp <em>Boolean Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.BooleanExp
   * @generated
   */
  public Adapter createBooleanExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.PropertyCall <em>Property Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.PropertyCall
   * @generated
   */
  public Adapter createPropertyCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.OperationCall <em>Operation Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.OperationCall
   * @generated
   */
  public Adapter createOperationCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.NavigationOrAttributeCall <em>Navigation Or Attribute Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.NavigationOrAttributeCall
   * @generated
   */
  public Adapter createNavigationOrAttributeCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.IterateExp <em>Iterate Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.IterateExp
   * @generated
   */
  public Adapter createIterateExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.Iterator <em>Iterator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.Iterator
   * @generated
   */
  public Adapter createIteratorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.IteratorExp <em>Iterator Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.IteratorExp
   * @generated
   */
  public Adapter createIteratorExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.CollectionOperationCall <em>Collection Operation Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.CollectionOperationCall
   * @generated
   */
  public Adapter createCollectionOperationCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.LocalVariable <em>Local Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.LocalVariable
   * @generated
   */
  public Adapter createLocalVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.OclType <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.OclType
   * @generated
   */
  public Adapter createOclTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.CollectionType <em>Collection Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.CollectionType
   * @generated
   */
  public Adapter createCollectionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.BagType <em>Bag Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.BagType
   * @generated
   */
  public Adapter createBagTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.OrderedSetType <em>Ordered Set Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.OrderedSetType
   * @generated
   */
  public Adapter createOrderedSetTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.SequenceType <em>Sequence Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.SequenceType
   * @generated
   */
  public Adapter createSequenceTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.SetType <em>Set Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.SetType
   * @generated
   */
  public Adapter createSetTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.Primitive <em>Primitive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.Primitive
   * @generated
   */
  public Adapter createPrimitiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.StringType <em>String Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.StringType
   * @generated
   */
  public Adapter createStringTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.BooleanType <em>Boolean Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.BooleanType
   * @generated
   */
  public Adapter createBooleanTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.NumericType <em>Numeric Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.NumericType
   * @generated
   */
  public Adapter createNumericTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.IntegerType <em>Integer Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.IntegerType
   * @generated
   */
  public Adapter createIntegerTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.RealType <em>Real Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.RealType
   * @generated
   */
  public Adapter createRealTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.OclAnyType <em>Any Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.OclAnyType
   * @generated
   */
  public Adapter createOclAnyTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.TupleType <em>Tuple Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.TupleType
   * @generated
   */
  public Adapter createTupleTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.TupleTypeAttribute <em>Tuple Type Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.TupleTypeAttribute
   * @generated
   */
  public Adapter createTupleTypeAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.OclModelElement <em>Model Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.OclModelElement
   * @generated
   */
  public Adapter createOclModelElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.MapType <em>Map Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.MapType
   * @generated
   */
  public Adapter createMapTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.EqOpCallExp <em>Eq Op Call Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.EqOpCallExp
   * @generated
   */
  public Adapter createEqOpCallExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.RelOpCallExp <em>Rel Op Call Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.RelOpCallExp
   * @generated
   */
  public Adapter createRelOpCallExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.AddOpCallExp <em>Add Op Call Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.AddOpCallExp
   * @generated
   */
  public Adapter createAddOpCallExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.IntOpCallExp <em>Int Op Call Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.IntOpCallExp
   * @generated
   */
  public Adapter createIntOpCallExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.enseeiht.ocl.xtext.ocl.MulOpCallExp <em>Mul Op Call Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.enseeiht.ocl.xtext.ocl.MulOpCallExp
   * @generated
   */
  public Adapter createMulOpCallExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //OclAdapterFactory
