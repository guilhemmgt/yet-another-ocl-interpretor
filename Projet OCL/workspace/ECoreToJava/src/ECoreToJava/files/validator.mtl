[comment encoding = UTF-8 /]
[module validator('http://www.eclipse.org/emf/2002/Ecore')]


[template public validator(anEPackage : EPackage)]

[file (capitalize(anEPackage) + 'Validator.java', false, 'UTF-8')]

package ocl;

import java.util.ArrayList;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;

[for (anClassifier : EClassifier | anEPackage.eClassifiers)]
[if anClassifier.oclIsTypeOf(EClass)]
import [anEPackage.name/].[(anClassifier.name)/];
[/if]
[/for]

import [anEPackage.name/].util.[capitalize(anEPackage)/]Switch;

/**
 * Réalise la validation d'un EObject issu de [capitalize(anEPackage)/].
 * Cet classe visite le modèle et utilise les caseXXX pour rediriger l'algo vers la
 * bonne méthode.
 * 
 * La classe Switch exige un paramètre de généricité (et gère une partie de la visite à
 * base de comparaison à null). Ici le paramètre est un booléen mais en réalité on ne
 * s'en sert pas...
 * 
 * @author Corentin THOISON basé sur le code de Guillaume DUPONT
 * @version 0.1
 */
public class [capitalize(anEPackage)/]Validator extends [capitalize(anEPackage)/]Switch<Boolean> {

	/**
	 * On enregistre tous les objects accessible pour certaines fonctions OCL.
	 */
	ArrayList<EObject> allObjects = new ArrayList<EObject>();

	/**
	 * On enregistre les EObjects déjà visités pour éviter d'avoir une boucle infinie.
	 */
	ArrayList<EObject> eObject = new ArrayList<EObject>();

	/**
	 * Résultat de la validation (état interne réinitialisé à chaque nouvelle validation).
	 */
	private ValidationResult result = null;
	
	/**
	 * On récupère OCL où sont stockées les conditions.
	 */
	private OCL ocl;

	/**
	 * Construire un validateur
	 */
	public [capitalize(anEPackage)/]Validator() {}

	/**
	 * Lancer la validation et compiler les résultats dans un ValidationResult.
	 * Cette méthode se charge de créer un résultat de validation vide puis de
	 *  visiter les process présents dans la ressource.
	 * @param resource resource à valider
	 * @return résultat de validation
	 */
	public ValidationResult validate(org.eclipse.emf.ecore.resource.Resource resource) {
		this.result = new ValidationResult();
		eObject.add(null);

		EList<EObject> r = resource.getContents();

		for (EObject object : r) {
			this.allObjects.add(object);
			TreeIterator<EObject> iterator = EcoreUtil.getAllContents(object, true);
			while (iterator.hasNext()) {
				EObject obj = iterator.next();
				this.allObjects.add(obj);
			}
		}

		this.ocl = new OCL(this.result, this.allObjects);

		for (EObject object : r) {
			this.doSwitch(object);
		}

		return this.result;
	}

	[for (anClassifier : EClassifier | anEPackage.eClassifiers)]
		[if anClassifier.oclIsTypeOf(EClass)]
	
		/**
		 * Méthode appelée lorsque l'objet visité est un [(anClassifier.name)/].
		 * Cet méthode amorce aussi la visite des éléments enfants.
		 * Si l'EOject n'était pas déjà visité on le viste sinon on poursuit la visite.
		 * @param object élément visité
		 * @return résultat de validation (null ici, ce qui permet de poursuivre la visite
		 * vers les classes parentes, le cas échéant)
		 */
		@Override
		public Boolean case[(anClassifier.name)/]([anEPackage.name/].[(anClassifier.name)/] object) {

			if(!eObject.contains(object)) {
				eObject.add(object);
				this.ocl.check(object);
	
				[for (aReference : EReference | anClassifier.oclAsType(EClass).eAllReferences)]
				[if aReference.upperBound = -1 or aReference.upperBound > 1]
				for ([aReference.eReferenceType.name/] pe : object.get[capitalize(aReference)/]()) {
					if(!eObject.contains(pe)) {
						this.doSwitch(pe);
					}
				}
				[else]
				if(!eObject.contains(object.get[capitalize(aReference)/]())) {
					this.doSwitch(object.get[capitalize(aReference)/]());
				}
				[/if]
			
				[/for]
	
			}
	
			return null;
		}
	
		[/if]
	[/for]

	@Override
	public Boolean defaultCase(EObject object) {
		return null;
	}

}

[/file]

[/template]

[query public capitalize(elt: ENamedElement) : String = 
	elt.name.first(1).toUpperCase() + elt.name.last(elt.name.size() - 1)
/]