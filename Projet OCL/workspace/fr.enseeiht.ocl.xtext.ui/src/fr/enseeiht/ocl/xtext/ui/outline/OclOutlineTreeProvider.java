/*
 * generated by Xtext 2.37.0
 */
package fr.enseeiht.ocl.xtext.ui.outline;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;

import fr.enseeiht.ocl.xtext.ocl.NotOpCallExp;
import fr.enseeiht.ocl.xtext.ocl.PropertyCallExp;
import fr.enseeiht.ocl.xtext.ocl.adapter.util.OCLValidationAdapterFactory;

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
public class OclOutlineTreeProvider extends DefaultOutlineTreeProvider {

	
	
	@SuppressWarnings("unchecked")
	@Override
	protected void _createChildren(IOutlineNode parentNode, EObject modelElement) {
		for (EObject child : modelElement.eContents()) {
			if(child.eClass().getEStructuralFeature("args") != null) {
				while ((!(child instanceof NotOpCallExp)) && ((EList<String>)child.eGet(child.eClass().getEStructuralFeature("operationNames"))).isEmpty()) {
					child = ((EList<EObject>) child.eGet(child.eClass().getEStructuralFeature("args"))).get(0);
				}
			}
			if((child instanceof PropertyCallExp pce) && pce.getCalls().isEmpty()) {
				child = pce.getSource();
			}
			_createNode(parentNode, child);
		}
	}

	@Override
	protected Object _text(Object modelElement) {
		String outlineString = OCLValidationAdapterFactory.INSTANCE.createAdapter((EObject) modelElement).getOutlineString();
		if(outlineString != null)
			return outlineString;
		return super._text(modelElement);
	}

	
	
}
