/**
 * generated by Xtext 2.32.0
 */
package fr.enseeiht.xtext.tocl.tocl.impl;

import fr.enseeiht.xtext.tocl.tocl.AddOpCallExp;
import fr.enseeiht.xtext.tocl.tocl.Attribute;
import fr.enseeiht.xtext.tocl.tocl.Auxiliary;
import fr.enseeiht.xtext.tocl.tocl.BagExp;
import fr.enseeiht.xtext.tocl.tocl.BagType;
import fr.enseeiht.xtext.tocl.tocl.BoolOpCallExp;
import fr.enseeiht.xtext.tocl.tocl.BooleanExp;
import fr.enseeiht.xtext.tocl.tocl.BooleanType;
import fr.enseeiht.xtext.tocl.tocl.BraceExp;
import fr.enseeiht.xtext.tocl.tocl.CollectionOperationCall;
import fr.enseeiht.xtext.tocl.tocl.CollectionType;
import fr.enseeiht.xtext.tocl.tocl.EnumLiteralExp;
import fr.enseeiht.xtext.tocl.tocl.EqOpCallExp;
import fr.enseeiht.xtext.tocl.tocl.IfExp;
import fr.enseeiht.xtext.tocl.tocl.Import;
import fr.enseeiht.xtext.tocl.tocl.IntOpCallExp;
import fr.enseeiht.xtext.tocl.tocl.IntegerExp;
import fr.enseeiht.xtext.tocl.tocl.IntegerType;
import fr.enseeiht.xtext.tocl.tocl.IterateExp;
import fr.enseeiht.xtext.tocl.tocl.Iterator;
import fr.enseeiht.xtext.tocl.tocl.IteratorExp;
import fr.enseeiht.xtext.tocl.tocl.LetExp;
import fr.enseeiht.xtext.tocl.tocl.LocalVariable;
import fr.enseeiht.xtext.tocl.tocl.MapElement;
import fr.enseeiht.xtext.tocl.tocl.MapExp;
import fr.enseeiht.xtext.tocl.tocl.MapType;
import fr.enseeiht.xtext.tocl.tocl.ModuleElement;
import fr.enseeiht.xtext.tocl.tocl.MulOpCallExp;
import fr.enseeiht.xtext.tocl.tocl.NavigationOrAttributeCall;
import fr.enseeiht.xtext.tocl.tocl.NumericExp;
import fr.enseeiht.xtext.tocl.tocl.NumericType;
import fr.enseeiht.xtext.tocl.tocl.OclAnyType;
import fr.enseeiht.xtext.tocl.tocl.OclExpression;
import fr.enseeiht.xtext.tocl.tocl.OclFeatureDefinition;
import fr.enseeiht.xtext.tocl.tocl.OclInvariant;
import fr.enseeiht.xtext.tocl.tocl.OclModelElement;
import fr.enseeiht.xtext.tocl.tocl.OclModelElementExp;
import fr.enseeiht.xtext.tocl.tocl.OclModuleElement;
import fr.enseeiht.xtext.tocl.tocl.OclType;
import fr.enseeiht.xtext.tocl.tocl.OclUndefinedExp;
import fr.enseeiht.xtext.tocl.tocl.Operation;
import fr.enseeiht.xtext.tocl.tocl.OperationCall;
import fr.enseeiht.xtext.tocl.tocl.OperatorCallExp;
import fr.enseeiht.xtext.tocl.tocl.OrderedSetExp;
import fr.enseeiht.xtext.tocl.tocl.OrderedSetType;
import fr.enseeiht.xtext.tocl.tocl.Parameter;
import fr.enseeiht.xtext.tocl.tocl.Primitive;
import fr.enseeiht.xtext.tocl.tocl.PropertyCall;
import fr.enseeiht.xtext.tocl.tocl.PropertyCallExp;
import fr.enseeiht.xtext.tocl.tocl.RealExp;
import fr.enseeiht.xtext.tocl.tocl.RealType;
import fr.enseeiht.xtext.tocl.tocl.RelOpCallExp;
import fr.enseeiht.xtext.tocl.tocl.SelfExp;
import fr.enseeiht.xtext.tocl.tocl.SequenceExp;
import fr.enseeiht.xtext.tocl.tocl.SequenceType;
import fr.enseeiht.xtext.tocl.tocl.SetExp;
import fr.enseeiht.xtext.tocl.tocl.SetType;
import fr.enseeiht.xtext.tocl.tocl.StringExp;
import fr.enseeiht.xtext.tocl.tocl.StringType;
import fr.enseeiht.xtext.tocl.tocl.SuperExp;
import fr.enseeiht.xtext.tocl.tocl.ToclFactory;
import fr.enseeiht.xtext.tocl.tocl.ToclPackage;
import fr.enseeiht.xtext.tocl.tocl.TupleExp;
import fr.enseeiht.xtext.tocl.tocl.TuplePart;
import fr.enseeiht.xtext.tocl.tocl.TupleType;
import fr.enseeiht.xtext.tocl.tocl.TupleTypeAttribute;
import fr.enseeiht.xtext.tocl.tocl.VariableDeclaration;
import fr.enseeiht.xtext.tocl.tocl.VariableExp;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ToclFactoryImpl extends EFactoryImpl implements ToclFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ToclFactory init()
  {
    try
    {
      ToclFactory theToclFactory = (ToclFactory)EPackage.Registry.INSTANCE.getEFactory(ToclPackage.eNS_URI);
      if (theToclFactory != null)
      {
        return theToclFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ToclFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ToclFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ToclPackage.MODULE: return createModule();
      case ToclPackage.IMPORT: return createImport();
      case ToclPackage.MODULE_ELEMENT: return createModuleElement();
      case ToclPackage.OCL_MODULE_ELEMENT: return createOclModuleElement();
      case ToclPackage.OCL_FEATURE_DEFINITION: return createOclFeatureDefinition();
      case ToclPackage.ATTRIBUTE: return createAttribute();
      case ToclPackage.OPERATION: return createOperation();
      case ToclPackage.PARAMETER: return createParameter();
      case ToclPackage.OCL_INVARIANT: return createOclInvariant();
      case ToclPackage.OCL_EXPRESSION: return createOclExpression();
      case ToclPackage.OCL_MODEL_ELEMENT_EXP: return createOclModelElementExp();
      case ToclPackage.OPERATOR_CALL_EXP: return createOperatorCallExp();
      case ToclPackage.PROPERTY_CALL_EXP: return createPropertyCallExp();
      case ToclPackage.AUXILIARY: return createAuxiliary();
      case ToclPackage.VARIABLE_EXP: return createVariableExp();
      case ToclPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case ToclPackage.SUPER_EXP: return createSuperExp();
      case ToclPackage.SELF_EXP: return createSelfExp();
      case ToclPackage.STRING_EXP: return createStringExp();
      case ToclPackage.NUMERIC_EXP: return createNumericExp();
      case ToclPackage.REAL_EXP: return createRealExp();
      case ToclPackage.INTEGER_EXP: return createIntegerExp();
      case ToclPackage.BAG_EXP: return createBagExp();
      case ToclPackage.ORDERED_SET_EXP: return createOrderedSetExp();
      case ToclPackage.SEQUENCE_EXP: return createSequenceExp();
      case ToclPackage.SET_EXP: return createSetExp();
      case ToclPackage.TUPLE_EXP: return createTupleExp();
      case ToclPackage.TUPLE_PART: return createTuplePart();
      case ToclPackage.MAP_EXP: return createMapExp();
      case ToclPackage.MAP_ELEMENT: return createMapElement();
      case ToclPackage.ENUM_LITERAL_EXP: return createEnumLiteralExp();
      case ToclPackage.OCL_UNDEFINED_EXP: return createOclUndefinedExp();
      case ToclPackage.LET_EXP: return createLetExp();
      case ToclPackage.IF_EXP: return createIfExp();
      case ToclPackage.BRACE_EXP: return createBraceExp();
      case ToclPackage.BOOLEAN_EXP: return createBooleanExp();
      case ToclPackage.PROPERTY_CALL: return createPropertyCall();
      case ToclPackage.OPERATION_CALL: return createOperationCall();
      case ToclPackage.NAVIGATION_OR_ATTRIBUTE_CALL: return createNavigationOrAttributeCall();
      case ToclPackage.ITERATE_EXP: return createIterateExp();
      case ToclPackage.ITERATOR: return createIterator();
      case ToclPackage.ITERATOR_EXP: return createIteratorExp();
      case ToclPackage.COLLECTION_OPERATION_CALL: return createCollectionOperationCall();
      case ToclPackage.LOCAL_VARIABLE: return createLocalVariable();
      case ToclPackage.OCL_TYPE: return createOclType();
      case ToclPackage.COLLECTION_TYPE: return createCollectionType();
      case ToclPackage.BAG_TYPE: return createBagType();
      case ToclPackage.ORDERED_SET_TYPE: return createOrderedSetType();
      case ToclPackage.SEQUENCE_TYPE: return createSequenceType();
      case ToclPackage.SET_TYPE: return createSetType();
      case ToclPackage.PRIMITIVE: return createPrimitive();
      case ToclPackage.STRING_TYPE: return createStringType();
      case ToclPackage.BOOLEAN_TYPE: return createBooleanType();
      case ToclPackage.NUMERIC_TYPE: return createNumericType();
      case ToclPackage.INTEGER_TYPE: return createIntegerType();
      case ToclPackage.REAL_TYPE: return createRealType();
      case ToclPackage.OCL_ANY_TYPE: return createOclAnyType();
      case ToclPackage.TUPLE_TYPE: return createTupleType();
      case ToclPackage.TUPLE_TYPE_ATTRIBUTE: return createTupleTypeAttribute();
      case ToclPackage.OCL_MODEL_ELEMENT: return createOclModelElement();
      case ToclPackage.MAP_TYPE: return createMapType();
      case ToclPackage.BOOL_OP_CALL_EXP: return createBoolOpCallExp();
      case ToclPackage.EQ_OP_CALL_EXP: return createEqOpCallExp();
      case ToclPackage.REL_OP_CALL_EXP: return createRelOpCallExp();
      case ToclPackage.ADD_OP_CALL_EXP: return createAddOpCallExp();
      case ToclPackage.INT_OP_CALL_EXP: return createIntOpCallExp();
      case ToclPackage.MUL_OP_CALL_EXP: return createMulOpCallExp();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public fr.enseeiht.xtext.tocl.tocl.Module createModule()
  {
    ModuleImpl module = new ModuleImpl();
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModuleElement createModuleElement()
  {
    ModuleElementImpl moduleElement = new ModuleElementImpl();
    return moduleElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclModuleElement createOclModuleElement()
  {
    OclModuleElementImpl oclModuleElement = new OclModuleElementImpl();
    return oclModuleElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclFeatureDefinition createOclFeatureDefinition()
  {
    OclFeatureDefinitionImpl oclFeatureDefinition = new OclFeatureDefinitionImpl();
    return oclFeatureDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclInvariant createOclInvariant()
  {
    OclInvariantImpl oclInvariant = new OclInvariantImpl();
    return oclInvariant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclExpression createOclExpression()
  {
    OclExpressionImpl oclExpression = new OclExpressionImpl();
    return oclExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclModelElementExp createOclModelElementExp()
  {
    OclModelElementExpImpl oclModelElementExp = new OclModelElementExpImpl();
    return oclModelElementExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperatorCallExp createOperatorCallExp()
  {
    OperatorCallExpImpl operatorCallExp = new OperatorCallExpImpl();
    return operatorCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyCallExp createPropertyCallExp()
  {
    PropertyCallExpImpl propertyCallExp = new PropertyCallExpImpl();
    return propertyCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Auxiliary createAuxiliary()
  {
    AuxiliaryImpl auxiliary = new AuxiliaryImpl();
    return auxiliary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableExp createVariableExp()
  {
    VariableExpImpl variableExp = new VariableExpImpl();
    return variableExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SuperExp createSuperExp()
  {
    SuperExpImpl superExp = new SuperExpImpl();
    return superExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelfExp createSelfExp()
  {
    SelfExpImpl selfExp = new SelfExpImpl();
    return selfExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringExp createStringExp()
  {
    StringExpImpl stringExp = new StringExpImpl();
    return stringExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumericExp createNumericExp()
  {
    NumericExpImpl numericExp = new NumericExpImpl();
    return numericExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealExp createRealExp()
  {
    RealExpImpl realExp = new RealExpImpl();
    return realExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntegerExp createIntegerExp()
  {
    IntegerExpImpl integerExp = new IntegerExpImpl();
    return integerExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BagExp createBagExp()
  {
    BagExpImpl bagExp = new BagExpImpl();
    return bagExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrderedSetExp createOrderedSetExp()
  {
    OrderedSetExpImpl orderedSetExp = new OrderedSetExpImpl();
    return orderedSetExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SequenceExp createSequenceExp()
  {
    SequenceExpImpl sequenceExp = new SequenceExpImpl();
    return sequenceExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetExp createSetExp()
  {
    SetExpImpl setExp = new SetExpImpl();
    return setExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TupleExp createTupleExp()
  {
    TupleExpImpl tupleExp = new TupleExpImpl();
    return tupleExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TuplePart createTuplePart()
  {
    TuplePartImpl tuplePart = new TuplePartImpl();
    return tuplePart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MapExp createMapExp()
  {
    MapExpImpl mapExp = new MapExpImpl();
    return mapExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MapElement createMapElement()
  {
    MapElementImpl mapElement = new MapElementImpl();
    return mapElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumLiteralExp createEnumLiteralExp()
  {
    EnumLiteralExpImpl enumLiteralExp = new EnumLiteralExpImpl();
    return enumLiteralExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclUndefinedExp createOclUndefinedExp()
  {
    OclUndefinedExpImpl oclUndefinedExp = new OclUndefinedExpImpl();
    return oclUndefinedExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LetExp createLetExp()
  {
    LetExpImpl letExp = new LetExpImpl();
    return letExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfExp createIfExp()
  {
    IfExpImpl ifExp = new IfExpImpl();
    return ifExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BraceExp createBraceExp()
  {
    BraceExpImpl braceExp = new BraceExpImpl();
    return braceExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanExp createBooleanExp()
  {
    BooleanExpImpl booleanExp = new BooleanExpImpl();
    return booleanExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyCall createPropertyCall()
  {
    PropertyCallImpl propertyCall = new PropertyCallImpl();
    return propertyCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationCall createOperationCall()
  {
    OperationCallImpl operationCall = new OperationCallImpl();
    return operationCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NavigationOrAttributeCall createNavigationOrAttributeCall()
  {
    NavigationOrAttributeCallImpl navigationOrAttributeCall = new NavigationOrAttributeCallImpl();
    return navigationOrAttributeCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IterateExp createIterateExp()
  {
    IterateExpImpl iterateExp = new IterateExpImpl();
    return iterateExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Iterator createIterator()
  {
    IteratorImpl iterator = new IteratorImpl();
    return iterator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IteratorExp createIteratorExp()
  {
    IteratorExpImpl iteratorExp = new IteratorExpImpl();
    return iteratorExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionOperationCall createCollectionOperationCall()
  {
    CollectionOperationCallImpl collectionOperationCall = new CollectionOperationCallImpl();
    return collectionOperationCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalVariable createLocalVariable()
  {
    LocalVariableImpl localVariable = new LocalVariableImpl();
    return localVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclType createOclType()
  {
    OclTypeImpl oclType = new OclTypeImpl();
    return oclType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionType createCollectionType()
  {
    CollectionTypeImpl collectionType = new CollectionTypeImpl();
    return collectionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BagType createBagType()
  {
    BagTypeImpl bagType = new BagTypeImpl();
    return bagType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrderedSetType createOrderedSetType()
  {
    OrderedSetTypeImpl orderedSetType = new OrderedSetTypeImpl();
    return orderedSetType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SequenceType createSequenceType()
  {
    SequenceTypeImpl sequenceType = new SequenceTypeImpl();
    return sequenceType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetType createSetType()
  {
    SetTypeImpl setType = new SetTypeImpl();
    return setType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Primitive createPrimitive()
  {
    PrimitiveImpl primitive = new PrimitiveImpl();
    return primitive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringType createStringType()
  {
    StringTypeImpl stringType = new StringTypeImpl();
    return stringType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanType createBooleanType()
  {
    BooleanTypeImpl booleanType = new BooleanTypeImpl();
    return booleanType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumericType createNumericType()
  {
    NumericTypeImpl numericType = new NumericTypeImpl();
    return numericType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntegerType createIntegerType()
  {
    IntegerTypeImpl integerType = new IntegerTypeImpl();
    return integerType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealType createRealType()
  {
    RealTypeImpl realType = new RealTypeImpl();
    return realType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclAnyType createOclAnyType()
  {
    OclAnyTypeImpl oclAnyType = new OclAnyTypeImpl();
    return oclAnyType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TupleType createTupleType()
  {
    TupleTypeImpl tupleType = new TupleTypeImpl();
    return tupleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TupleTypeAttribute createTupleTypeAttribute()
  {
    TupleTypeAttributeImpl tupleTypeAttribute = new TupleTypeAttributeImpl();
    return tupleTypeAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclModelElement createOclModelElement()
  {
    OclModelElementImpl oclModelElement = new OclModelElementImpl();
    return oclModelElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MapType createMapType()
  {
    MapTypeImpl mapType = new MapTypeImpl();
    return mapType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolOpCallExp createBoolOpCallExp()
  {
    BoolOpCallExpImpl boolOpCallExp = new BoolOpCallExpImpl();
    return boolOpCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqOpCallExp createEqOpCallExp()
  {
    EqOpCallExpImpl eqOpCallExp = new EqOpCallExpImpl();
    return eqOpCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelOpCallExp createRelOpCallExp()
  {
    RelOpCallExpImpl relOpCallExp = new RelOpCallExpImpl();
    return relOpCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddOpCallExp createAddOpCallExp()
  {
    AddOpCallExpImpl addOpCallExp = new AddOpCallExpImpl();
    return addOpCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntOpCallExp createIntOpCallExp()
  {
    IntOpCallExpImpl intOpCallExp = new IntOpCallExpImpl();
    return intOpCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MulOpCallExp createMulOpCallExp()
  {
    MulOpCallExpImpl mulOpCallExp = new MulOpCallExpImpl();
    return mulOpCallExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ToclPackage getToclPackage()
  {
    return (ToclPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ToclPackage getPackage()
  {
    return ToclPackage.eINSTANCE;
  }

} //ToclFactoryImpl
